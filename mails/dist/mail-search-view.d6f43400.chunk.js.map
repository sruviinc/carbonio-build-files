{"version":3,"file":"mail-search-view.d6f43400.chunk.js","mappings":"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","sources":["webpack://carbonio-mails-ui/./src/ui-actions/modals/select-folder-modal.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/attachment-type-email-status-row.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/utils.ts","webpack://carbonio-mails-ui/./src/views/search/utils.ts","webpack://carbonio-mails-ui/./src/views/search/parts/received-sent-address-row.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/send-date-row.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/size-smaller-size-larger-row.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/subject-keyword-row.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/tag-folder-row.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/toggle-filters.tsx","webpack://carbonio-mails-ui/./src/commons/scrollable-container.tsx","webpack://carbonio-mails-ui/./src/views/search/advanced-filter-modal.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/use-disable-hooks.ts","webpack://carbonio-mails-ui/./src/views/search/parts/advanced-filter-button.tsx","webpack://carbonio-mails-ui/./src/views/search/search-conversation-list.tsx","webpack://carbonio-mails-ui/./src/views/search/search-message-list.tsx","webpack://carbonio-mails-ui/./src/views/search/search-panel.tsx","webpack://carbonio-mails-ui/./src/views/search/search-view.tsx","webpack://carbonio-mails-ui/./src/views/search/parts/use-find-icon.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Container, Text } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\nimport { isNil } from 'lodash';\n\nimport ModalFooter from '../../carbonio-ui-commons/components/modals/modal-footer';\nimport ModalHeader from '../../carbonio-ui-commons/components/modals/modal-header';\nimport type { Folder, RootFolder } from '../../carbonio-ui-commons/types/folder';\nimport { FolderSelector } from '../../views/sidebar/commons/folder-selector';\n\ntype SelectFolderModalProps = {\n\tfolder?: Folder | RootFolder;\n\tonClose: () => void;\n\theaderTitle: string;\n\tactionLabel: string;\n\tactionTooltip?: string;\n\tdisabledActionTooltip?: string;\n\tinputLabel: string;\n\tconfirmAction: (\n\t\tfolder: Folder | undefined,\n\t\tsetFolder: (_folder: Folder | undefined) => void,\n\t\tonClose: () => void\n\t) => void;\n\tshowSharedAccounts: boolean;\n\tshowTrashFolder: boolean;\n\tshowSpamFolder: boolean;\n\tallowRootSelection: boolean;\n\tallowFolderCreation: boolean;\n};\n\nexport const SelectFolderModal: FC<SelectFolderModalProps> = ({\n\tfolder,\n\tonClose,\n\theaderTitle,\n\tactionLabel,\n\tactionTooltip,\n\tdisabledActionTooltip,\n\tinputLabel,\n\tconfirmAction,\n\tshowSharedAccounts,\n\tshowTrashFolder,\n\tshowSpamFolder,\n\tallowFolderCreation,\n\tallowRootSelection\n}) => {\n\tconst [folderDestination, setFolderDestination] = useState<Folder | undefined>(folder);\n\n\tconst onConfirm = useCallback(() => {\n\t\tconfirmAction(folderDestination, setFolderDestination, onClose);\n\t}, [confirmAction, folderDestination, onClose]);\n\n\tconst isConfirmDisabled = useMemo(\n\t\t() => isNil(folderDestination) || folderDestination?.id === folder?.l,\n\t\t[folder?.l, folderDestination]\n\t);\n\n\tconst confirmActionTooltip = isConfirmDisabled\n\t\t? disabledActionTooltip ??\n\t\t\tt('label.folder_not_valid_destination', 'The selected folder is not a valid destination')\n\t\t: actionTooltip;\n\n\treturn (\n\t\t<Container\n\t\t\tpadding={{ all: 'large' }}\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"fit\"\n\t\t\tstyle={{\n\t\t\t\toverflowY: 'auto'\n\t\t\t}}\n\t\t>\n\t\t\t<ModalHeader onClose={onClose} title={headerTitle} />\n\t\t\t<Container\n\t\t\t\tdata-testid=\"select-folder-modal\"\n\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\tmainAlignment=\"center\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tstyle={{\n\t\t\t\t\toverflowY: 'auto'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Container padding={{ all: 'small' }} mainAlignment=\"center\" crossAlignment=\"flex-start\">\n\t\t\t\t\t<Text overflow=\"break-word\">{inputLabel}</Text>\n\t\t\t\t</Container>\n\t\t\t\t<FolderSelector\n\t\t\t\t\tselectedFolderId={folderDestination?.id}\n\t\t\t\t\tonFolderSelected={setFolderDestination}\n\t\t\t\t\tshowTrashFolder={showTrashFolder}\n\t\t\t\t\tshowSpamFolder={showSpamFolder}\n\t\t\t\t\tallowFolderCreation={allowFolderCreation}\n\t\t\t\t\tallowRootSelection={allowRootSelection}\n\t\t\t\t\tshowSharedAccounts={showSharedAccounts}\n\t\t\t\t/>\n\t\t\t\t<ModalFooter\n\t\t\t\t\ttooltip={confirmActionTooltip}\n\t\t\t\t\tonConfirm={onConfirm}\n\t\t\t\t\tsecondaryAction={onClose}\n\t\t\t\t\tlabel={actionLabel}\n\t\t\t\t\tsecondaryLabel={t('label.cancel', 'Cancel')}\n\t\t\t\t\tdisabled={isConfirmDisabled}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback, useMemo, useState, useRef, useEffect } from 'react';\nimport { Container, ChipInput, ChipItem } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\nimport { filter, find } from 'lodash';\nimport { attachmentTypeItemsConstant, emailStatusItemsConstant } from '../../../constants';\nimport type { AttachTypeEmailStatusRowPropType, ChipOnAdd, ChipOnAddProps } from '../../../types';\n\nconst AttachmentTypeEmailStatusRow: FC<AttachTypeEmailStatusRowPropType> = ({\n\tcompProps\n}): ReactElement => {\n\tconst { attachmentType, setAttachmentType, emailStatus, setEmailStatus } = compProps;\n\tconst attachmentTypeItems = attachmentTypeItemsConstant(t);\n\n\tconst emailStatusItems = emailStatusItemsConstant(t);\n\n\tconst attachmentTypeRef: any = useRef();\n\tconst emailStatusRef: any = useRef();\n\tconst [attachmentTypeRefHasFocus, setAttachmentTypeRefHasFocus] = useState(false);\n\tconst [emailStatusRefHasFocus, setEmailStatusRefHasFocus] = useState(false);\n\n\tconst [attachmentTypeOptions, setAttachmentTypeOptions] = useState<any[]>(attachmentTypeItems);\n\tconst [emailStatusOptions, setEmailStatusOptions] = useState<any[]>(emailStatusItems);\n\tconst onChange = useCallback((state, stateHandler) => {\n\t\tstateHandler(state);\n\t}, []);\n\n\tconst chipOnAdd = useCallback(\n\t\t({ items, label, preText, hasAvatar, isGeneric, isQueryFilter }: ChipOnAddProps): ChipOnAdd => {\n\t\t\tconst values: any = filter(items, (item: any) => item.label === label)[0];\n\t\t\treturn {\n\t\t\t\tlabel: `${preText}:${label}`,\n\t\t\t\thasAvatar,\n\t\t\t\tisGeneric,\n\t\t\t\tisQueryFilter,\n\t\t\t\tvalue: values.searchString,\n\t\t\t\tavatarIcon: values.icon,\n\t\t\t\tavatarColor: 'gray6'\n\t\t\t};\n\t\t},\n\t\t[]\n\t);\n\n\tconst handlerAttachmentType = useCallback(() => {\n\t\tsetAttachmentTypeRefHasFocus(!attachmentTypeRefHasFocus);\n\t}, [attachmentTypeRefHasFocus]);\n\n\tuseEffect(() => {\n\t\tconst ref: HTMLElement = attachmentTypeRef.current;\n\n\t\tif (ref) {\n\t\t\tref.addEventListener('click', handlerAttachmentType);\n\t\t}\n\t\treturn (): void => ref?.removeEventListener('click', handlerAttachmentType);\n\t}, [attachmentTypeRefHasFocus, handlerAttachmentType]);\n\n\tconst handlerEmailStatus = useCallback(() => {\n\t\tsetEmailStatusRefHasFocus(!emailStatusRefHasFocus);\n\t}, [emailStatusRefHasFocus]);\n\n\tuseEffect(() => {\n\t\tconst ref: HTMLElement = emailStatusRef.current;\n\n\t\tif (ref) {\n\t\t\tref.addEventListener('click', handlerEmailStatus);\n\t\t}\n\t\treturn (): void => ref?.removeEventListener('click', handlerEmailStatus);\n\t}, [emailStatusRefHasFocus, handlerEmailStatus]);\n\n\tconst updateAttachmentTypeOptions = useCallback(\n\t\t(target: HTMLInputElement, q: Array<any>): void => {\n\t\t\tif (target.textContent && target.textContent.length > 0) {\n\t\t\t\tsetAttachmentTypeOptions(\n\t\t\t\t\tattachmentTypeItems.filter(\n\t\t\t\t\t\t(v: any): boolean =>\n\t\t\t\t\t\t\tv.label?.toLowerCase().indexOf(target.textContent) !== -1 &&\n\t\t\t\t\t\t\t!find(q, (i) => i.value === v.label)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsetAttachmentTypeOptions(attachmentTypeItems);\n\t\t\t}\n\t\t},\n\t\t[attachmentTypeItems]\n\t);\n\n\tconst updateEmailStatusOptions = useCallback(\n\t\t(target: HTMLInputElement, q: Array<any>): void => {\n\t\t\tif (target.textContent && target.textContent.length > 0) {\n\t\t\t\tsetEmailStatusOptions(\n\t\t\t\t\temailStatusItems.filter(\n\t\t\t\t\t\t(v: any): boolean =>\n\t\t\t\t\t\t\tv.label?.toLowerCase().indexOf(target.textContent as string) !== -1 &&\n\t\t\t\t\t\t\t!find(q, (i) => i.value === v.label)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsetEmailStatusOptions(emailStatusItems);\n\t\t\t}\n\t\t},\n\t\t[emailStatusItems]\n\t);\n\n\tconst attachmentTypeOnInputType = useCallback(\n\t\t(ev) => {\n\t\t\tupdateAttachmentTypeOptions(ev.target, attachmentTypeItems);\n\t\t},\n\t\t[updateAttachmentTypeOptions, attachmentTypeItems]\n\t);\n\tconst emailStatusOnInputType = useCallback(\n\t\t(ev) => {\n\t\t\tupdateEmailStatusOptions(ev.target, emailStatusItems);\n\t\t},\n\t\t[updateEmailStatusOptions, emailStatusItems]\n\t);\n\n\tconst attachmentTypeChipOnAdd = useCallback(\n\t\t(label: unknown): ChipOnAdd =>\n\t\t\tchipOnAdd({\n\t\t\t\titems: attachmentTypeItems,\n\t\t\t\tlabel: label as string,\n\t\t\t\tpreText: 'Attachment',\n\t\t\t\thasAvatar: true,\n\t\t\t\tisGeneric: true,\n\t\t\t\tisQueryFilter: true\n\t\t\t}),\n\t\t[chipOnAdd, attachmentTypeItems]\n\t);\n\n\tconst emailStatusChipOnAdd = useCallback(\n\t\t(label: unknown): ChipOnAdd =>\n\t\t\tchipOnAdd({\n\t\t\t\titems: emailStatusItems,\n\t\t\t\tlabel: label as string,\n\t\t\t\tpreText: 'Is',\n\t\t\t\thasAvatar: false,\n\t\t\t\tisGeneric: true,\n\t\t\t\tisQueryFilter: true\n\t\t\t}),\n\t\t[chipOnAdd, emailStatusItems]\n\t);\n\n\tconst attachmentTypeOnChange = useCallback(\n\t\t(value: ChipItem[]): void => {\n\t\t\tsetAttachmentTypeRefHasFocus(false);\n\t\t\treturn onChange(value, setAttachmentType);\n\t\t},\n\t\t[onChange, setAttachmentType]\n\t);\n\n\tconst emailStatusOnChange = useCallback(\n\t\t(value: ChipItem[]): void => onChange(value, setEmailStatus),\n\t\t[onChange, setEmailStatus]\n\t);\n\n\tconst attachmentTypePlaceholder = useMemo(\n\t\t() => t('label.attachment_type', 'Attachment type'),\n\t\t[]\n\t);\n\n\tconst emailStatusPlaceholder = useMemo(\n\t\t() => t('label.attachment_status', 'Status of e-mail item'),\n\t\t[]\n\t);\n\tconst attachmentIcon = useMemo(\n\t\t() => (attachmentTypeRefHasFocus ? 'ChevronDown' : 'ChevronUp'),\n\t\t[attachmentTypeRefHasFocus]\n\t);\n\n\tconst emailStatusIcon = useMemo(\n\t\t() => (emailStatusRefHasFocus ? 'ChevronDown' : 'ChevronUp'),\n\t\t[emailStatusRefHasFocus]\n\t);\n\n\tconst attachmentTypeBottomBorderColor = useMemo(\n\t\t(): string => (attachmentTypeRefHasFocus ? 'primary' : 'transparent'),\n\t\t[attachmentTypeRefHasFocus]\n\t);\n\tconst emailStatusBottomBorderColor = useMemo(\n\t\t(): string => (emailStatusRefHasFocus ? 'primary' : 'transparent'),\n\t\t[emailStatusRefHasFocus]\n\t);\n\treturn (\n\t\t<>\n\t\t\t<Container padding={{ bottom: 'small', top: 'medium' }} orientation=\"horizontal\">\n\t\t\t\t<Container padding={{ right: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t\t<ChipInput\n\t\t\t\t\t\tref={attachmentTypeRef}\n\t\t\t\t\t\tplaceholder={attachmentTypePlaceholder}\n\t\t\t\t\t\tdefaultValue={attachmentType}\n\t\t\t\t\t\toptions={attachmentTypeOptions}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tdisableOptions={false}\n\t\t\t\t\t\tonAdd={attachmentTypeChipOnAdd}\n\t\t\t\t\t\tonChange={attachmentTypeOnChange}\n\t\t\t\t\t\tmaxChips={1}\n\t\t\t\t\t\tconfirmChipOnBlur\n\t\t\t\t\t\tonInputType={attachmentTypeOnInputType}\n\t\t\t\t\t\ticon={attachmentIcon}\n\t\t\t\t\t\tbottomBorderColor={attachmentTypeBottomBorderColor}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container padding={{ left: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t\t<ChipInput\n\t\t\t\t\t\tdropdownMaxHeight=\"40%\"\n\t\t\t\t\t\tconfirmChipOnBlur\n\t\t\t\t\t\tref={emailStatusRef}\n\t\t\t\t\t\tplaceholder={emailStatusPlaceholder}\n\t\t\t\t\t\tdefaultValue={emailStatus}\n\t\t\t\t\t\toptions={emailStatusOptions}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tdisableOptions={false}\n\t\t\t\t\t\tonAdd={emailStatusChipOnAdd}\n\t\t\t\t\t\tonChange={emailStatusOnChange}\n\t\t\t\t\t\tonInputType={emailStatusOnInputType}\n\t\t\t\t\t\ticon={emailStatusIcon}\n\t\t\t\t\t\tbottomBorderColor={emailStatusBottomBorderColor}\n\t\t\t\t\t\tmaxHeight=\"40%\"\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n\nexport default AttachmentTypeEmailStatusRow;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nconst re = /\\S+@\\S+\\.\\S+/;\n\nexport const isValidEmail = (email: string): boolean => re.test(email);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { TFunction } from 'i18next';\nimport { reduce } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tContactInputItem,\n\tFolder,\n\tFolders,\n\tKeywordState,\n\tQuery,\n\tSearchQueryItem\n} from '../../types';\n\ntype EmptyListMessages = { title: string; description: string }[];\n\nexport const EmptyListMessages = (t: TFunction): EmptyListMessages => [\n\t{\n\t\ttitle: t('displayer.search_title1', 'Start another search'),\n\t\tdescription: t(\n\t\t\t'displayer.search_description1',\n\t\t\t'Or select “Advanced Filters” to refine your search.'\n\t\t)\n\t},\n\t{\n\t\ttitle: t('displayer.search_title2', 'We’re sorry but there are no results for your search'),\n\t\tdescription: t('displayer.search_description2', 'Try to start another search.')\n\t},\n\t{\n\t\ttitle: t('displayer.search_title3', 'There are no results for your search.'),\n\t\tdescription: t(\n\t\t\t'displayer.search_description3',\n\t\t\t'Check the spelling and the filters options or try with another keyword.'\n\t\t)\n\t}\n];\n\nexport const EmptyFieldMessages = (t: TFunction): EmptyListMessages => [\n\t{\n\t\ttitle: t(\n\t\t\t'displayer.search_title4',\n\t\t\t'Select one or more results to perform actions or display details.'\n\t\t),\n\t\tdescription: ''\n\t}\n];\n\nfunction getRegex(prefix?: string): RegExp {\n\treturn new RegExp(`^${prefix}:.*`, 'i');\n}\n\nexport function getChipString(item: SearchQueryItem | ContactInputItem, prefix: string): string {\n\tconst regex = getRegex(prefix);\n\tlet resultString = '';\n\tif ((item as SearchQueryItem).label) {\n\t\tresultString = (item as SearchQueryItem).label;\n\t}\n\tif ((item as ContactInputItem).fullName) {\n\t\tresultString = (item as ContactInputItem).fullName ?? '';\n\t}\n\treturn regex.test(resultString) ? resultString : `${prefix}:${resultString}`;\n}\n\nexport function getChipValue(item: SearchQueryItem | ContactInputItem, prefix: string): string {\n\tconst regex = getRegex(prefix);\n\tlet resultString = '';\n\tif ((item as SearchQueryItem).value) {\n\t\tresultString = (item as SearchQueryItem).value ?? '';\n\t}\n\tif ((item as ContactInputItem).email) {\n\t\tresultString = (item as ContactInputItem).email ?? '';\n\t}\n\tif ((item as ContactInputItem).fullName) {\n\t\tresultString = (item as ContactInputItem).fullName ?? '';\n\t}\n\treturn regex.test(resultString) ? resultString : `${prefix}:${resultString}`;\n}\n\nexport function getChipItems(chips: Query | Array<ContactInputItem>, prefix: string): KeywordState {\n\treturn chips.map((chip) => ({\n\t\t...chip,\n\t\terror: false,\n\t\tid: chip.id ?? `${uuid()} ${chip.label}`,\n\t\tavatarBackground: (chip as ContactInputItem).avatarBackground ?? 'secondary',\n\t\thasAvatar: true,\n\t\tavatarIcon: 'EmailOutline',\n\t\tisGeneric: false,\n\t\tisQueryFilter: true,\n\t\tlabel: getChipString(chip, prefix),\n\t\tfullName: getChipString(chip, prefix),\n\t\tvalue: getChipValue(chip, prefix)\n\t}));\n}\n\n/**\n * Takes a Folders object and returns an array of folder names (keys)\n * that have the `perm` property set to a truthy value.\n */\nexport function getFoldersNameArray(folders: Folders): Array<string> {\n\treturn reduce(\n\t\tfolders,\n\t\t(acc: Array<string>, value: Folder, key: string) => {\n\t\t\tif (value.perm) {\n\t\t\t\tacc.push(key);\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t[]\n\t);\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback, useMemo } from 'react';\n\nimport { Container, ChipInput, ChipItem } from '@zextras/carbonio-design-system';\nimport { t, useIntegratedComponent } from '@zextras/carbonio-shell-ui';\n\nimport { isValidEmail } from './utils';\nimport type { ContactInputItem, RcvdSentAddressRowPropType, SearchChipItem } from '../../../types';\nimport { getChipItems } from '../utils';\n\nexport const ReceivedSentAddressRow: FC<RcvdSentAddressRowPropType> = ({\n\tcompProps\n}): ReactElement => {\n\tconst { receivedFromAddress, setReceivedFromAddress, sentToAddress, setSentToAddress } =\n\t\tcompProps;\n\n\tconst [ContactInput, integrationAvailable] = useIntegratedComponent('contact-input');\n\n\tconst onChange = useCallback((state, stateHandler) => {\n\t\tstateHandler(state);\n\t}, []);\n\n\tconst recipOnChange = useCallback(\n\t\t(label: ChipItem[]): void => onChange(label, setReceivedFromAddress),\n\t\t[onChange, setReceivedFromAddress]\n\t);\n\n\tconst sentToOnChange = useCallback(\n\t\t(label: ChipItem[]): void => onChange(label, setSentToAddress),\n\t\t[onChange, setSentToAddress]\n\t);\n\n\tconst chipOnAdded = useCallback(\n\t\t(\n\t\t\tlabel,\n\t\t\tpreText,\n\t\t\thasAvatar,\n\t\t\tisGeneric,\n\t\t\tisQueryFilter,\n\t\t\thasError,\n\t\t\tavatarIcon\n\t\t): SearchChipItem => ({\n\t\t\tlabel: `${preText}:${label}`,\n\t\t\thasAvatar,\n\t\t\tisGeneric,\n\t\t\tisQueryFilter,\n\t\t\tvalue: `${preText}:${label}`,\n\t\t\thasError,\n\t\t\tavatarIcon\n\t\t}),\n\t\t[]\n\t);\n\n\tconst recipChipOnAdd = useCallback(\n\t\t(label: string | unknown): SearchChipItem =>\n\t\t\tchipOnAdded(\n\t\t\t\tlabel,\n\t\t\t\t'from',\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\t!isValidEmail(typeof label === 'string' ? label : ''),\n\t\t\t\t'EmailOutline'\n\t\t\t),\n\t\t[chipOnAdded]\n\t);\n\n\tconst sentToChipOnAdd = useCallback(\n\t\t(label: string | unknown): SearchChipItem =>\n\t\t\tchipOnAdded(\n\t\t\t\tlabel,\n\t\t\t\t'to',\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\t!isValidEmail(typeof label === 'string' ? label : ''),\n\t\t\t\t'EmailOutline'\n\t\t\t),\n\t\t[chipOnAdded]\n\t);\n\n\tconst chipBackground = 'gray5';\n\n\tconst handleReceivedFromChange = useCallback(\n\t\t(contacts: Array<ContactInputItem>) => {\n\t\t\tconst chips = getChipItems(contacts, 'from');\n\t\t\tsetReceivedFromAddress(chips);\n\t\t},\n\t\t[setReceivedFromAddress]\n\t);\n\n\tconst handleSentToChange = useCallback(\n\t\t(contacts) => {\n\t\t\tconst chips = getChipItems(contacts, 'to');\n\t\t\tsetSentToAddress(chips);\n\t\t},\n\t\t[setSentToAddress]\n\t);\n\n\tconst receivedFromHasError = useMemo(\n\t\t() => !!(receivedFromAddress && receivedFromAddress[0]?.hasError),\n\t\t[receivedFromAddress]\n\t);\n\n\tconst sentFromHasError = useMemo(\n\t\t() => !!(sentToAddress && sentToAddress[0]?.hasError),\n\t\t[sentToAddress]\n\t);\n\n\treturn (\n\t\t<Container padding={{ bottom: 'small', top: 'medium' }} orientation=\"horizontal\">\n\t\t\t<Container padding={{ right: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t{integrationAvailable ? (\n\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tplaceholder={t('label.from', 'From')}\n\t\t\t\t\t\tonChange={handleReceivedFromChange}\n\t\t\t\t\t\tdefaultValue={receivedFromAddress ?? []}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<ChipInput\n\t\t\t\t\t\tplaceholder={t('label.from', 'From')}\n\t\t\t\t\t\tbackground={chipBackground}\n\t\t\t\t\t\tvalue={receivedFromAddress}\n\t\t\t\t\t\tonChange={recipOnChange}\n\t\t\t\t\t\tonAdd={recipChipOnAdd}\n\t\t\t\t\t\tmaxChips={1}\n\t\t\t\t\t\tdescription={\n\t\t\t\t\t\t\treceivedFromHasError\n\t\t\t\t\t\t\t\t? t('label.error_address', 'A valid e-mail is required')\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\thasError={receivedFromHasError}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t\t<Container padding={{ left: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t{integrationAvailable ? (\n\t\t\t\t\t<ContactInput\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tplaceholder={t('label.to', 'To')}\n\t\t\t\t\t\tonChange={handleSentToChange}\n\t\t\t\t\t\tdefaultValue={sentToAddress ?? []}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<ChipInput\n\t\t\t\t\t\tplaceholder={t('label.to', 'To')}\n\t\t\t\t\t\tbackground={chipBackground}\n\t\t\t\t\t\tvalue={sentToAddress}\n\t\t\t\t\t\tonChange={sentToOnChange}\n\t\t\t\t\t\tonAdd={sentToChipOnAdd}\n\t\t\t\t\t\tmaxChips={1}\n\t\t\t\t\t\tdescription={\n\t\t\t\t\t\t\tsentFromHasError ? t('label.error_address', 'A valid e-mail is required') : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\thasError={sentFromHasError}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback, useMemo } from 'react';\n\nimport { Container, DateTimePicker } from '@zextras/carbonio-design-system';\nimport { t, useUserSettings } from '@zextras/carbonio-shell-ui';\nimport moment from 'moment';\n\nimport type { SendReceivedDateRowPropType } from '../../../types';\n\nconst QUERY_DATE_FORMAT = 'L';\nconst PICKER_DATE_FORMAT = 'P';\n\nconst SendReceivedDateRow: FC<SendReceivedDateRowPropType> = ({ compProps }): ReactElement => {\n\tconst { sentBefore, setSentBefore, sentAfter, setSentAfter, sentOn, setSentOn } = compProps;\n\n\tconst { zimbraPrefLocale: prefLocale } = useUserSettings().prefs;\n\tif (prefLocale) {\n\t\tmoment.locale(prefLocale);\n\t}\n\n\tconst onSentBeforeChange = useCallback(\n\t\t(date) => {\n\t\t\tconst tmp = `before:${moment(date).format(QUERY_DATE_FORMAT)}`;\n\t\t\tdate\n\t\t\t\t? setSentBefore([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thasAvatar: true,\n\t\t\t\t\t\t\tavatarBackground: 'gray1',\n\t\t\t\t\t\t\tlabel: tmp,\n\t\t\t\t\t\t\tvalue: tmp,\n\t\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\t\tavatarIcon: 'CalendarOutline'\n\t\t\t\t\t\t}\n\t\t\t\t\t])\n\t\t\t\t: setSentBefore([]);\n\t\t},\n\t\t[setSentBefore]\n\t);\n\n\tconst onSentAfterChange = useCallback(\n\t\t(date) => {\n\t\t\tconst tmp = `after:${moment(date).format(QUERY_DATE_FORMAT)}`;\n\t\t\tdate\n\t\t\t\t? setSentAfter([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thasAvatar: true,\n\t\t\t\t\t\t\tavatarBackground: 'gray1',\n\t\t\t\t\t\t\tlabel: tmp,\n\t\t\t\t\t\t\tvalue: tmp,\n\t\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\t\tavatarIcon: 'CalendarOutline'\n\t\t\t\t\t\t}\n\t\t\t\t\t])\n\t\t\t\t: setSentAfter([]);\n\t\t},\n\t\t[setSentAfter]\n\t);\n\tconst onSentOnChange = useCallback(\n\t\t(date) => {\n\t\t\tconst tmp = `date:${moment(date).format(QUERY_DATE_FORMAT)}`;\n\t\t\tdate\n\t\t\t\t? setSentOn([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thasAvatar: true,\n\t\t\t\t\t\t\tavatarBackground: 'gray1',\n\t\t\t\t\t\t\tlabel: tmp,\n\t\t\t\t\t\t\tvalue: tmp,\n\t\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\t\tavatarIcon: 'CalendarOutline'\n\t\t\t\t\t\t}\n\t\t\t\t\t])\n\t\t\t\t: setSentOn([]);\n\t\t},\n\t\t[setSentOn]\n\t);\n\n\tconst sentBeforeDefault = useMemo(\n\t\t() =>\n\t\t\tsentBefore[0]?.label\n\t\t\t\t? new Date(moment(sentBefore[0]?.label.split('before:')?.[1], QUERY_DATE_FORMAT).valueOf())\n\t\t\t\t: undefined,\n\t\t[sentBefore]\n\t);\n\tconst sentAfterDefault = useMemo(\n\t\t() =>\n\t\t\tsentAfter[0]?.label\n\t\t\t\t? new Date(moment(sentAfter[0]?.label.split('after:')?.[1], QUERY_DATE_FORMAT).valueOf())\n\t\t\t\t: undefined,\n\t\t[sentAfter]\n\t);\n\tconst sentOnDefault = useMemo(\n\t\t() =>\n\t\t\tsentOn[0]?.label\n\t\t\t\t? new Date(moment(sentOn[0]?.label.split('date:')?.[1], QUERY_DATE_FORMAT).valueOf())\n\t\t\t\t: undefined,\n\t\t[sentOn]\n\t);\n\n\treturn (\n\t\t<Container padding={{ bottom: 'small', top: 'medium' }} orientation=\"horizontal\">\n\t\t\t<Container padding={{ right: 'extrasmall' }}>\n\t\t\t\t<DateTimePicker\n\t\t\t\t\twidth=\"fill\"\n\t\t\t\t\tlabel={t('search.sent_before', 'Sent before')}\n\t\t\t\t\tenableChips\n\t\t\t\t\tchipProps={{ avatarBackground: 'gray1', avatarIcon: 'CalendarOutline' }}\n\t\t\t\t\tdateFormat={PICKER_DATE_FORMAT}\n\t\t\t\t\tlocale={prefLocale}\n\t\t\t\t\tincludeTime={false}\n\t\t\t\t\tdefaultValue={sentBeforeDefault}\n\t\t\t\t\tonChange={onSentBeforeChange}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container padding={{ horizontal: 'extrasmall' }}>\n\t\t\t\t<DateTimePicker\n\t\t\t\t\twidth=\"fill\"\n\t\t\t\t\tlabel={t('search.sent_after', 'Sent after')}\n\t\t\t\t\tenableChips\n\t\t\t\t\tchipProps={{ avatarBackground: 'gray1', avatarIcon: 'CalendarOutline' }}\n\t\t\t\t\tdateFormat={PICKER_DATE_FORMAT}\n\t\t\t\t\tlocale={prefLocale}\n\t\t\t\t\tincludeTime={false}\n\t\t\t\t\tdefaultValue={sentAfterDefault}\n\t\t\t\t\tonChange={onSentAfterChange}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container padding={{ left: 'extrasmall' }}>\n\t\t\t\t<DateTimePicker\n\t\t\t\t\twidth=\"fill\"\n\t\t\t\t\tlabel={t('search.sent_on', 'Sent on')}\n\t\t\t\t\tenableChips\n\t\t\t\t\tchipProps={{ avatarBackground: 'gray1', avatarIcon: 'CalendarOutline' }}\n\t\t\t\t\tdateFormat={PICKER_DATE_FORMAT}\n\t\t\t\t\tlocale={prefLocale}\n\t\t\t\t\tincludeTime={false}\n\t\t\t\t\tonChange={onSentOnChange}\n\t\t\t\t\tdefaultValue={sentOnDefault}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n\nexport default SendReceivedDateRow;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback, useMemo, useState } from 'react';\n\nimport { Container, ChipInput, ChipItem } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\n\nimport type { SizeLargerSizeSmallerRowProps } from '../../../types';\n\nconst SizeLargerSizeSmallerRow: FC<SizeLargerSizeSmallerRowProps> = ({\n\tcompProps\n}): ReactElement => {\n\tconst { sizeSmaller, setSizeSmaller, sizeLarger, setSizeLarger } = compProps;\n\n\tconst [isInvalidSmallSize, setIsInvalidSmallSize] = useState(false);\n\tconst [isInvalidLargeSize, setIsInvalidLargeSize] = useState(false);\n\tconst errorLabel = useMemo(() => t('search.size_error', 'Only numbers are allowed'), []);\n\n\tconst onChange = useCallback((state, stateHandler) => {\n\t\tstateHandler(state);\n\t}, []);\n\n\tconst chipOnAdd = useCallback(\n\t\t(label, preText, hasAvatar, isGeneric, isQueryFilter, avatarIcon, error) => ({\n\t\t\tlabel: `${preText}:${label}MB`,\n\t\t\thasAvatar,\n\t\t\tisGeneric,\n\t\t\tisQueryFilter,\n\t\t\tvalue: `${preText.toLowerCase()}:${label}MB`,\n\t\t\tavatarIcon,\n\t\t\terror\n\t\t}),\n\t\t[]\n\t);\n\n\tconst checkErrorSizeSmaller = useCallback(\n\t\t(input: string): void =>\n\t\t\tinput.match(/^[0-9]+$/) ? setIsInvalidSmallSize(false) : setIsInvalidSmallSize(true),\n\t\t[]\n\t);\n\n\tconst checkErrorSizeLarger = useCallback(\n\t\t(input: string): void =>\n\t\t\tinput.match(/^[0-9]+$/) ? setIsInvalidLargeSize(false) : setIsInvalidLargeSize(true),\n\t\t[]\n\t);\n\n\tconst sizeSmallerChipOnAdd = useCallback(\n\t\t(label): any => {\n\t\t\tcheckErrorSizeSmaller(label);\n\t\t\treturn chipOnAdd(\n\t\t\t\tlabel,\n\t\t\t\t'Smaller',\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\t'CollapseOutline',\n\t\t\t\t!label.match(/^[0-9]+$/)\n\t\t\t);\n\t\t},\n\t\t[chipOnAdd, checkErrorSizeSmaller]\n\t);\n\n\tconst sizeLargerChipOnAdd = useCallback(\n\t\t(label): any => {\n\t\t\tcheckErrorSizeLarger(label);\n\t\t\treturn chipOnAdd(\n\t\t\t\tlabel,\n\t\t\t\t'Larger',\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\t'ExpandOutline',\n\t\t\t\t!label.match(/^[0-9]+$/)\n\t\t\t);\n\t\t},\n\t\t[chipOnAdd, checkErrorSizeLarger]\n\t);\n\n\tconst sizeSmallerOnChange = useCallback(\n\t\t(value: ChipItem[]): void => {\n\t\t\tonChange(value, setSizeSmaller);\n\t\t\tif (value.length === 0) setIsInvalidSmallSize(false);\n\t\t},\n\t\t[onChange, setSizeSmaller, setIsInvalidSmallSize]\n\t);\n\n\tconst sizeLargerOnChange = useCallback(\n\t\t(value: ChipItem[]): void => {\n\t\t\tonChange(value, setSizeLarger);\n\t\t\tif (value.length === 0) setIsInvalidLargeSize(false);\n\t\t},\n\t\t[onChange, setSizeLarger, setIsInvalidLargeSize]\n\t);\n\n\tconst sizeSmallerPlaceholder = useMemo(\n\t\t() => t('label.size_smaller', 'Size smaller than (MB)'),\n\t\t[]\n\t);\n\n\tconst sizeLargerPlaceholder = useMemo(() => t('label.size_larger', 'Size larger than (MB)'), []);\n\n\treturn (\n\t\t<Container padding={{ bottom: 'small', top: 'medium' }} orientation=\"horizontal\">\n\t\t\t<Container padding={{ right: 'extrasmall' }}>\n\t\t\t\t<ChipInput\n\t\t\t\t\tplaceholder={sizeSmallerPlaceholder}\n\t\t\t\t\tdefaultValue={[]}\n\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\tvalue={sizeSmaller}\n\t\t\t\t\tonAdd={sizeSmallerChipOnAdd}\n\t\t\t\t\thasError={isInvalidSmallSize}\n\t\t\t\t\tdescription={isInvalidSmallSize ? errorLabel : undefined}\n\t\t\t\t\terrorBackgroundColor=\"gray6\"\n\t\t\t\t\tonChange={sizeSmallerOnChange}\n\t\t\t\t\tmaxChips={1}\n\t\t\t\t\tconfirmChipOnBlur\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container padding={{ left: 'extrasmall' }}>\n\t\t\t\t<ChipInput\n\t\t\t\t\tplaceholder={sizeLargerPlaceholder}\n\t\t\t\t\tdefaultValue={[]}\n\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\tvalue={sizeLarger}\n\t\t\t\t\tonAdd={sizeLargerChipOnAdd}\n\t\t\t\t\thasError={isInvalidLargeSize}\n\t\t\t\t\tdescription={isInvalidLargeSize ? errorLabel : undefined}\n\t\t\t\t\terrorBackgroundColor=\"gray6\"\n\t\t\t\t\tonChange={sizeLargerOnChange}\n\t\t\t\t\tmaxChips={1}\n\t\t\t\t\tconfirmChipOnBlur\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n\nexport default SizeLargerSizeSmallerRow;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback } from 'react';\n\nimport { Container, ChipInput, ChipItem } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\n\nimport { isValidEmail } from './utils';\nimport type { SubjectKeywordRowProps } from '../../../types';\n\nconst SubjectKeywordRow: FC<SubjectKeywordRowProps> = ({ compProps }): ReactElement => {\n\tconst { otherKeywords, setOtherKeywords, subject, setSubject } = compProps;\n\tconst onChange = useCallback((state, stateHandler) => {\n\t\tstateHandler(state);\n\t}, []);\n\tconst keywordChipOnAdd = useCallback(\n\t\t(label) => ({\n\t\t\tlabel,\n\t\t\thasAvatar: false,\n\t\t\tisGeneric: true\n\t\t}),\n\t\t[]\n\t);\n\tconst chipOnAdd = useCallback(\n\t\t(label, preText, hasAvatar, isGeneric, isQueryFilter) => ({\n\t\t\tlabel: `${preText}:${label}`,\n\t\t\thasAvatar,\n\t\t\tisGeneric,\n\t\t\tisQueryFilter,\n\t\t\tvalue: `${preText}:${label}`\n\t\t}),\n\t\t[]\n\t);\n\n\tconst subjectOnChange = useCallback(\n\t\t(value: ChipItem[]): void => onChange(value, setSubject),\n\t\t[onChange, setSubject]\n\t);\n\n\tconst keywordOnChange = useCallback(\n\t\t(value: ChipItem[]): void => onChange(value, setOtherKeywords),\n\t\t[onChange, setOtherKeywords]\n\t);\n\n\tconst subjectChipOnAdd = useCallback(\n\t\t(label: unknown): any => chipOnAdd(label, 'Subject', false, false, true),\n\t\t[chipOnAdd]\n\t);\n\n\tconst chipOnAdded = useCallback(\n\t\t(label, preText, hasAvatar, isGeneric, isQueryFilter, hasError, icon) => {\n\t\t\tconst chip = {\n\t\t\t\tlabel: `${preText}:${label}`,\n\t\t\t\thasAvatar,\n\t\t\t\tisGeneric,\n\t\t\t\tisQueryFilter,\n\t\t\t\tvalue: `${preText}:${label}`,\n\t\t\t\thasError,\n\t\t\t\ticon\n\t\t\t};\n\t\t\tif (!isValidEmail(label)) {\n\t\t\t\tchip.hasError = true;\n\t\t\t}\n\t\t\tchip.icon = 'EmailOutline';\n\t\t\treturn chip;\n\t\t},\n\t\t[]\n\t);\n\n\tconst recipChipOnAdd = useCallback(\n\t\t(label: string): any => chipOnAdded(label, 'from', false, false, true, false, 'EmailOutline'),\n\t\t[chipOnAdded]\n\t);\n\n\tconst senderChipOnAdd = useCallback(\n\t\t(label: string): any => chipOnAdded(label, 'to', false, false, true, false, 'EmailOutline'),\n\t\t[chipOnAdded]\n\t);\n\n\tconst subjectPlaceholder = t('label.subject', 'Subject');\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Container padding={{ bottom: 'small', top: 'medium' }} orientation=\"horizontal\">\n\t\t\t\t<Container padding={{ right: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t\t<ChipInput\n\t\t\t\t\t\tplaceholder={t('label.keywords', 'Keywords')}\n\t\t\t\t\t\tdata-testid={'keywords-input'}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tvalue={otherKeywords}\n\t\t\t\t\t\tseparators={[\n\t\t\t\t\t\t\t{ key: 'Enter', ctrlKey: false },\n\t\t\t\t\t\t\t{ key: ',', ctrlKey: false }\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tonChange={keywordOnChange}\n\t\t\t\t\t\tonAdd={keywordChipOnAdd}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<Container padding={{ left: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t\t<ChipInput\n\t\t\t\t\t\tplaceholder={subjectPlaceholder}\n\t\t\t\t\t\tdata-testid={'subject-input'}\n\t\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\t\tvalue={subject}\n\t\t\t\t\t\tseparators={[\n\t\t\t\t\t\t\t{ key: 'Enter', ctrlKey: false },\n\t\t\t\t\t\t\t{ key: ',', ctrlKey: false }\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tonChange={subjectOnChange}\n\t\t\t\t\t\tonAdd={subjectChipOnAdd}\n\t\t\t\t\t\tmaxChips={1}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default SubjectKeywordRow;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback, useMemo, useState } from 'react';\n\nimport { ChipInput, Container, CustomModal } from '@zextras/carbonio-design-system';\nimport { ZIMBRA_STANDARD_COLORS, t } from '@zextras/carbonio-shell-ui';\nimport { filter } from 'lodash';\n\nimport { isSharedAccountFolder } from '../../../helpers/folders';\nimport type { ChipOnAdd, TagFolderRowProps } from '../../../types';\nimport { SelectFolderModal } from '../../../ui-actions/modals/select-folder-modal';\nimport { getFolderIconColor } from '../../sidebar/utils';\n\nconst TagFolderRow: FC<TagFolderRowProps> = ({ compProps }): ReactElement => {\n\tconst { folder, setFolder, tagOptions, tag, setTag } = compProps;\n\tconst [open, setOpen] = useState(false);\n\n\tconst onClose = useCallback(() => setOpen(false), []);\n\tconst openFolderModal = useCallback(() => setOpen(true), []);\n\n\tconst chipOnAdd = useCallback(\n\t\t(\n\t\t\tlabel,\n\t\t\tpreText,\n\t\t\thasAvatar,\n\t\t\tisGeneric,\n\t\t\tisQueryFilter,\n\t\t\tavatarIcon,\n\t\t\tavatarBackground\n\t\t): ChipOnAdd => ({\n\t\t\tlabel: `${preText}:${label}`,\n\t\t\thasAvatar,\n\t\t\tisGeneric,\n\t\t\tavatarIcon,\n\t\t\tbackground: 'gray2',\n\t\t\tavatarBackground: avatarBackground || 'gray2',\n\t\t\tisQueryFilter,\n\t\t\tvalue: `${preText}:\"${label}\"`\n\t\t}),\n\t\t[]\n\t);\n\n\tconst folderChipOnAdd = useCallback(\n\t\t(label): any => chipOnAdd(label, 'in', true, false, true, 'FolderOutline', ''),\n\t\t[chipOnAdd]\n\t);\n\tconst tagChipOnAdd = useCallback(\n\t\t(label): ChipOnAdd => {\n\t\t\tconst chipBg = filter(tagOptions, { label })[0];\n\t\t\treturn chipOnAdd(\n\t\t\t\tlabel,\n\t\t\t\t'tag',\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\ttrue,\n\t\t\t\t'Tag',\n\t\t\t\tZIMBRA_STANDARD_COLORS[chipBg.color ?? 0].hex\n\t\t\t);\n\t\t},\n\t\t[chipOnAdd, tagOptions]\n\t);\n\tconst folderOnChange = useCallback((folderChips) => setFolder(folderChips), [setFolder]);\n\n\tconst tagPlaceholder = useMemo(() => t('label.tag', 'Tag'), []);\n\tconst onTagChange = useCallback(\n\t\t(chip) => {\n\t\t\tsetTag(chip);\n\t\t},\n\t\t[setTag]\n\t);\n\n\tconst headerTitle = t('share.is_contained_in', 'Is contained in');\n\tconst actionLabel = t('label.choose_folder', 'Choose folder');\n\tconst inputLabel = t(\n\t\t'share.filter_folder_message',\n\t\t'Select a folder where to start your advanced search'\n\t);\n\n\tconst confirmAction = useCallback(\n\t\t(folderDestination, _setFolderDestination, _onClose) => {\n\t\t\tsetFolder([\n\t\t\t\t{\n\t\t\t\t\tlabel: `in:${folderDestination?.absFolderPath}`,\n\t\t\t\t\thasAvatar: true,\n\t\t\t\t\tmaxWidth: '12.5rem',\n\t\t\t\t\tisGeneric: false,\n\t\t\t\t\tbackground: 'gray2',\n\t\t\t\t\tavatarBackground: getFolderIconColor(folderDestination),\n\t\t\t\t\tavatarIcon: 'FolderOutline',\n\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\tvalue: isSharedAccountFolder(folderDestination.id)\n\t\t\t\t\t\t? `inid:\"${folderDestination.id}\"`\n\t\t\t\t\t\t: `in:\"${folderDestination?.absFolderPath}\"`\n\t\t\t\t}\n\t\t\t]);\n\t\t\t_onClose();\n\t\t},\n\t\t[setFolder]\n\t);\n\n\treturn (\n\t\t<Container padding={{ bottom: 'small', top: 'medium' }} orientation=\"horizontal\">\n\t\t\t<Container padding={{ right: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t<ChipInput\n\t\t\t\t\tplaceholder={tagPlaceholder}\n\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\tdefaultValue={[]}\n\t\t\t\t\toptions={tagOptions}\n\t\t\t\t\tvalue={tag}\n\t\t\t\t\tonChange={onTagChange}\n\t\t\t\t\tonAdd={tagChipOnAdd}\n\t\t\t\t\tdisableOptions={false}\n\t\t\t\t\tdisabled\n\t\t\t\t\trequireUniqueChips\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container padding={{ left: 'extrasmall' }} maxWidth=\"50%\">\n\t\t\t\t<ChipInput\n\t\t\t\t\tbackground=\"gray5\"\n\t\t\t\t\ticon=\"FolderOutline\"\n\t\t\t\t\tplaceholder={t('share.is_contained_in', 'Is contained in')}\n\t\t\t\t\tvalue={folder}\n\t\t\t\t\tonChange={folderOnChange}\n\t\t\t\t\tonAdd={folderChipOnAdd}\n\t\t\t\t\tdisabled\n\t\t\t\t\ticonAction={openFolderModal}\n\t\t\t\t\trequireUniqueChips\n\t\t\t\t/>\n\t\t\t\t<CustomModal open={open} onClose={onClose} maxHeight=\"90vh\" size={'medium'}>\n\t\t\t\t\t<SelectFolderModal\n\t\t\t\t\t\tonClose={onClose}\n\t\t\t\t\t\theaderTitle={headerTitle}\n\t\t\t\t\t\tactionLabel={actionLabel}\n\t\t\t\t\t\tinputLabel={inputLabel}\n\t\t\t\t\t\tconfirmAction={confirmAction}\n\t\t\t\t\t\tallowRootSelection={false}\n\t\t\t\t\t\tallowFolderCreation={false}\n\t\t\t\t\t\tshowSharedAccounts\n\t\t\t\t\t\tshowTrashFolder\n\t\t\t\t\t\tshowSpamFolder\n\t\t\t\t\t/>\n\t\t\t\t</CustomModal>\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n\nexport default TagFolderRow;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useState, useEffect, FC, ReactElement } from 'react';\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { Container, Switch, Text, Padding } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\nimport { filter } from 'lodash';\n\nimport type { ToggleFiltersProps } from '../../../types';\n\nconst ToggleFilters: FC<ToggleFiltersProps> = ({ compProps }): ReactElement => {\n\tconst {\n\t\tquery,\n\t\tsetUnreadFilter,\n\t\tsetFlaggedFilter,\n\t\tsetAttachmentFilter,\n\t\tisSharedFolderIncludedTobe,\n\t\tsetIsSharedFolderIncludedTobe\n\t} = compProps;\n\n\tconst [isUnread, setIsUnread] = useState(false);\n\tconst [hasAttachment, setHasAttachment] = useState(false);\n\tconst [isFlagged, setIsFlagged] = useState(false);\n\n\tconst toggleUnread = useCallback(() => {\n\t\tsetIsUnread(!isUnread);\n\t\tisUnread\n\t\t\t? setUnreadFilter([])\n\t\t\t: setUnreadFilter([\n\t\t\t\t\t{\n\t\t\t\t\t\tid: nanoid(),\n\t\t\t\t\t\tlabel: 'is:unread',\n\t\t\t\t\t\tvalue: 'is:unread',\n\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\tavatarIcon: 'EmailOutline',\n\t\t\t\t\t\tavatarBackground: 'gray1'\n\t\t\t\t\t}\n\t\t\t\t]);\n\t}, [isUnread, setUnreadFilter]);\n\n\tconst toggleFlagged = useCallback(() => {\n\t\tsetIsFlagged(!isFlagged);\n\t\tisFlagged\n\t\t\t? setFlaggedFilter([])\n\t\t\t: setFlaggedFilter([\n\t\t\t\t\t{\n\t\t\t\t\t\tid: nanoid(),\n\t\t\t\t\t\tlabel: 'is:flagged',\n\t\t\t\t\t\tvalue: 'is:flagged',\n\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\tavatarIcon: 'FlagOutline',\n\t\t\t\t\t\tavatarBackground: 'error'\n\t\t\t\t\t}\n\t\t\t\t]);\n\t}, [isFlagged, setFlaggedFilter]);\n\n\tconst toggleAttachment = useCallback(() => {\n\t\tsetHasAttachment(!hasAttachment);\n\t\thasAttachment\n\t\t\t? setAttachmentFilter([])\n\t\t\t: setAttachmentFilter([\n\t\t\t\t\t{\n\t\t\t\t\t\tid: nanoid(),\n\t\t\t\t\t\tlabel: 'has:attachment',\n\t\t\t\t\t\tvalue: 'has:attachment',\n\t\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\t\tavatarIcon: 'AttachOutline',\n\t\t\t\t\t\tavatarBackground: 'gray1'\n\t\t\t\t\t}\n\t\t\t\t]);\n\t}, [hasAttachment, setAttachmentFilter]);\n\n\tconst toggleSharedFolder = useCallback(() => {\n\t\tsetIsSharedFolderIncludedTobe(!isSharedFolderIncludedTobe);\n\t}, [isSharedFolderIncludedTobe, setIsSharedFolderIncludedTobe]);\n\n\tuseEffect(() => {\n\t\tif (filter(query, (q) => q.value === 'is:unread' || q.label === 'is:unread').length === 0) {\n\t\t\tsetIsUnread(false);\n\t\t\tsetUnreadFilter([]);\n\t\t} else {\n\t\t\tsetIsUnread(true);\n\t\t\tsetUnreadFilter([\n\t\t\t\t{\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\tlabel: 'is:unread',\n\t\t\t\t\tvalue: 'is:unread',\n\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\tisGeneric: false\n\t\t\t\t}\n\t\t\t]);\n\t\t}\n\n\t\tif (filter(query, (q) => q.value === 'is:flagged' || q.label === 'is:flagged').length === 0) {\n\t\t\tsetIsFlagged(false);\n\t\t\tsetFlaggedFilter([]);\n\t\t} else {\n\t\t\tsetIsFlagged(true);\n\t\t\tsetFlaggedFilter([\n\t\t\t\t{\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\tlabel: 'is:flagged',\n\t\t\t\t\tvalue: 'is:flagged',\n\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\tisGeneric: false,\n\t\t\t\t\tavatarIcon: 'FlagOutline',\n\t\t\t\t\tavatarBackground: 'error'\n\t\t\t\t}\n\t\t\t]);\n\t\t}\n\n\t\tif (\n\t\t\tfilter(query, (q) => q.value === 'has:attachment' || q.label === 'has:attachment').length ===\n\t\t\t0\n\t\t) {\n\t\t\tsetHasAttachment(false);\n\t\t\tsetAttachmentFilter([]);\n\t\t} else {\n\t\t\tsetHasAttachment(true);\n\t\t\tsetAttachmentFilter([\n\t\t\t\t{\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\tlabel: 'has:attachment',\n\t\t\t\t\tvalue: 'has:attachment',\n\t\t\t\t\tisQueryFilter: true,\n\t\t\t\t\tisGeneric: false\n\t\t\t\t}\n\t\t\t]);\n\t\t}\n\t}, [query, setAttachmentFilter, setFlaggedFilter, setUnreadFilter]);\n\n\treturn (\n\t\t<>\n\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"center\" crossAlignment=\"center\">\n\t\t\t\t<Container padding={{ all: 'extrasmall' }}>\n\t\t\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"baseline\" crossAlignment=\"center\">\n\t\t\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t\t\t<Switch onClick={toggleAttachment} value={hasAttachment} />\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t<Text size=\"large\" weight=\"bold\">\n\t\t\t\t\t\t\t{t('label.attachment', 'Attachment')}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t\t<Text color=\"secondary\" size=\"small\" overflow=\"break-word\">\n\t\t\t\t\t\t{t('search.attachment_note', 'Search for all e-mails that have an attachment.')}\n\t\t\t\t\t</Text>\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"baseline\" crossAlignment=\"center\">\n\t\t\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t\t\t<Switch onClick={toggleFlagged} value={isFlagged} />\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t<Text size=\"large\" weight=\"bold\">\n\t\t\t\t\t\t\t{t('label.flagged', 'Flagged')}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t\t<Text color=\"secondary\" size=\"small\" overflow=\"break-word\">\n\t\t\t\t\t\t{t('search.flagged_note', 'Search for all flagged e-mails.')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t</Container>\n\t\t\t</Container>\n\n\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"center\" crossAlignment=\"center\">\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"baseline\" crossAlignment=\"center\">\n\t\t\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t\t\t<Switch onClick={toggleUnread} value={isUnread} />\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t<Text size=\"large\" weight=\"bold\">\n\t\t\t\t\t\t\t{t('search.unread', 'Unread')}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t\t<Text color=\"secondary\" size=\"small\" overflow=\"break-word\">\n\t\t\t\t\t\t{t('search.unread_note', 'Search for all unread e-mail items.')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t</Container>\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"baseline\" crossAlignment=\"center\">\n\t\t\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t\t\t<Switch onClick={toggleSharedFolder} value={isSharedFolderIncludedTobe} />\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t<Text size=\"large\" weight=\"bold\">\n\t\t\t\t\t\t\t{t('label.include_shared_folders', 'Include Shared Folders')}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Container>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t\t<Text color=\"secondary\" size=\"small\" overflow=\"break-word\">\n\t\t\t\t\t\t{t('search.shared_folders_note', 'Search inside shared folders.')}\n\t\t\t\t\t</Text>\n\t\t\t\t\t<Padding bottom=\"small\" />\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n\nexport default ToggleFilters;\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Container } from '@zextras/carbonio-design-system';\nimport styled from 'styled-components';\n\nexport const ScrollableContainer = styled(Container)`\n\toverflow-y: auto;\n\theight: 'fit-content';\n`;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\n\nimport {\n\tCustomModal,\n\tIcon,\n\tRow,\n\tTextWithTooltip,\n\tPadding,\n\tModalHeader,\n\tDivider,\n\tModalFooter\n} from '@zextras/carbonio-design-system';\nimport { getTags, QueryChip, ZIMBRA_STANDARD_COLORS, t } from '@zextras/carbonio-shell-ui';\nimport { concat, filter, includes, map } from 'lodash';\n\nimport AttachmentTypeEmailStatusRow from './parts/attachment-type-email-status-row';\nimport { ReceivedSentAddressRow } from './parts/received-sent-address-row';\nimport SendReceivedDateRow from './parts/send-date-row';\nimport SizeSmallerSizeLargerRow from './parts/size-smaller-size-larger-row';\nimport SubjectKeywordRow from './parts/subject-keyword-row';\nimport TagFolderRow from './parts/tag-folder-row';\nimport ToggleFilters from './parts/toggle-filters';\nimport { useDisabled, useSecondaryDisabled } from './parts/use-disable-hooks';\nimport { getChipItems } from './utils';\nimport { ScrollableContainer } from '../../commons/scrollable-container';\nimport type { AdvancedFilterModalProps, KeywordState } from '../../types';\n\nexport const AdvancedFilterModal = ({\n\topen,\n\tonClose,\n\tquery,\n\tupdateQuery,\n\tsetIsSharedFolderIncluded,\n\tisSharedFolderIncluded\n}: AdvancedFilterModalProps): React.JSX.Element => {\n\tconst [otherKeywords, setOtherKeywords] = useState<KeywordState>([]);\n\tconst [attachmentFilter, setAttachmentFilter] = useState<KeywordState>([]);\n\tconst [unreadFilter, setUnreadFilter] = useState<KeywordState>([]);\n\tconst [flaggedFilter, setFlaggedFilter] = useState<KeywordState>([]);\n\n\tconst [receivedFromAddress, setReceivedFromAddress] = useState<KeywordState>([]);\n\tconst [sentToAddress, setSentToAddress] = useState<KeywordState>([]);\n\tconst [folder, setFolder] = useState<KeywordState>([]);\n\tconst [sentBefore, setSentBefore] = useState<KeywordState>([]);\n\tconst [sentOn, setSentOn] = useState<KeywordState>([]);\n\tconst [sentAfter, setSentAfter] = useState<KeywordState>([]);\n\tconst [subject, setSubject] = useState<KeywordState>([]);\n\tconst [attachmentType, setAttachmentType] = useState<KeywordState>([]);\n\tconst [emailStatus, setEmailStatus] = useState<KeywordState>([]);\n\tconst [sizeSmaller, setSizeSmaller] = useState<KeywordState>([]);\n\tconst [sizeLarger, setSizeLarger] = useState<KeywordState>([]);\n\tconst [sizeSmallerErrorLabel, setSizeSmallerErrorLabel] = useState('');\n\tconst [sizeLargerErrorLabel, setSizeLargerErrorLabel] = useState('');\n\tconst [isSharedFolderIncludedTobe, setIsSharedFolderIncludedTobe] =\n\t\tuseState(isSharedFolderIncluded);\n\tconst queryArray = useMemo(() => ['has:attachment', 'is:flagged', 'is:unread'], []);\n\tconst tagOptions = useMemo(\n\t\t() =>\n\t\t\tmap(getTags(), (item) => ({\n\t\t\t\t...item,\n\t\t\t\tlabel: item.name,\n\t\t\t\tcustomComponent: (\n\t\t\t\t\t<Row takeAvailableSpace mainAlignment=\"flex-start\">\n\t\t\t\t\t\t<Row takeAvailableSpace mainAlignment=\"space-between\">\n\t\t\t\t\t\t\t<Row mainAlignment=\"flex-end\">\n\t\t\t\t\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t\t\t\t\t<Icon icon=\"Tag\" color={ZIMBRA_STANDARD_COLORS[item.color ?? 0].hex} />\n\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row takeAvailableSpace mainAlignment=\"flex-start\">\n\t\t\t\t\t\t\t\t<TextWithTooltip>{item.name}</TextWithTooltip>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Row>\n\t\t\t\t)\n\t\t\t})),\n\t\t[]\n\t);\n\tconst [tag, setTag] = useState<KeywordState>([]);\n\n\tuseEffect(() => {\n\t\tconst updatedQuery = map(\n\t\t\tfilter(\n\t\t\t\tquery,\n\t\t\t\t(v) =>\n\t\t\t\t\t!includes(queryArray, v.label) &&\n\t\t\t\t\t!/^Subject:/.test(v.label) &&\n\t\t\t\t\t!/^Attachment:/.test(v.label) &&\n\t\t\t\t\t!/^Is:/.test(v.label) &&\n\t\t\t\t\t!/^Smaller:/.test(v.label) &&\n\t\t\t\t\t!/^Larger:/.test(v.label) &&\n\t\t\t\t\t!/^subject:/.test(v.label) &&\n\t\t\t\t\t!/^in:/.test(v.label) &&\n\t\t\t\t\t!/^before:/.test(v.label) &&\n\t\t\t\t\t!/^after:/.test(v.label) &&\n\t\t\t\t\t!/^date:/.test(v.label) &&\n\t\t\t\t\t!/^tag:/.test(v.label) &&\n\t\t\t\t\t!/^to:/.test(v.label) &&\n\t\t\t\t\t!/^from:/.test(v.label) &&\n\t\t\t\t\t!v.isQueryFilter\n\t\t\t),\n\t\t\t(q) => ({ ...q, hasAvatar: false })\n\t\t);\n\n\t\tconst subjectsInQuery = map(\n\t\t\tfilter(query, (v) => /^Subject:/.test(v.label)),\n\t\t\t(q) => ({ ...q, hasAvatar: false })\n\t\t);\n\t\tsetSubject(subjectsInQuery);\n\n\t\tconst attachmentTypeInQuery = map(\n\t\t\tfilter(query, (v) => /^Attachment:/.test(v.label)),\n\t\t\t(q) => ({ ...q })\n\t\t);\n\t\tsetAttachmentType(attachmentTypeInQuery);\n\n\t\tconst emailStatusInQuery = map(\n\t\t\tfilter(query, (v) => /^Is:/.test(v.label)),\n\t\t\t(q) => ({ ...q })\n\t\t);\n\t\tsetEmailStatus(emailStatusInQuery);\n\n\t\tconst sizeSmallerInQuery = map(\n\t\t\tfilter(query, (v) => /^Smaller:/.test(v.label)),\n\t\t\t(q) => ({ ...q })\n\t\t);\n\t\tsetSizeSmaller(sizeSmallerInQuery);\n\n\t\tconst sizeLargerInQuery = map(\n\t\t\tfilter(query, (v) => /^Larger:/.test(v.label)),\n\t\t\t(q) => ({ ...q })\n\t\t);\n\t\tsetSizeLarger(sizeLargerInQuery);\n\t\tconst sentBeforeInQuery = map(\n\t\t\tfilter(query, (v) => /^before:/.test(v.label)),\n\t\t\t(q) => ({ ...q, hasAvatar: true, icon: 'CalendarOutline' })\n\t\t);\n\t\tsetSentBefore(sentBeforeInQuery);\n\n\t\tconst sentAfterInQuery = map(\n\t\t\tfilter(query, (v) => /^after:/.test(v.label)),\n\t\t\t(q) => ({ ...q, hasAvatar: true, icon: 'CalendarOutline' })\n\t\t);\n\t\tsetSentAfter(sentAfterInQuery);\n\n\t\tconst tagInQuery = map(\n\t\t\tfilter(query, (v) => /^tag:/.test(v.label)),\n\t\t\t(q) => ({ ...q, hasAvatar: true, icon: 'TagOutline' })\n\t\t);\n\t\tsetTag(tagInQuery);\n\n\t\tconst sentOnInQuery = map(\n\t\t\tfilter(query, (v) => /^date:/.test(v.label)),\n\t\t\t(q) => ({ ...q, hasAvatar: true, icon: 'CalendarOutline' })\n\t\t);\n\t\tsetSentOn(sentOnInQuery);\n\n\t\tconst filteredToChips = query.filter((chip) => /^to:*/.test(chip.label));\n\t\tconst sentToInQuery = getChipItems(filteredToChips, 'to');\n\t\tsetSentToAddress(sentToInQuery);\n\n\t\tconst filteredFromChips = query.filter((chip) => /^from:*/.test(chip.label));\n\t\tconst receivedFromInQuery = getChipItems(filteredFromChips, 'from');\n\t\tsetReceivedFromAddress(receivedFromInQuery);\n\n\t\tconst folderInQuery = map(\n\t\t\tfilter(query, (v) => /^in:/.test(v.label)),\n\t\t\t(q) => ({\n\t\t\t\t...q,\n\t\t\t\thasAvatar: true,\n\t\t\t\ticon: 'FolderOutline'\n\t\t\t})\n\t\t);\n\n\t\tsetFolder(folderInQuery);\n\n\t\tsetOtherKeywords(updatedQuery);\n\t}, [query, queryArray]);\n\n\tconst totalKeywords = useMemo(\n\t\t() => filter(otherKeywords, (q) => q.isGeneric === true || q.isQueryFilter === true).length,\n\t\t[otherKeywords]\n\t);\n\n\tconst secondaryDisabled = useSecondaryDisabled({\n\t\tattachmentFilter,\n\t\tattachmentType,\n\t\temailStatus,\n\t\tflaggedFilter,\n\t\tfolder,\n\t\treceivedFromAddress,\n\t\tsentAfter,\n\t\tsentBefore,\n\t\tsentFromAddress: sentToAddress,\n\t\tsentOn,\n\t\tsizeLarger,\n\t\tsizeSmaller,\n\t\tsubject,\n\t\ttag,\n\t\ttotalKeywords,\n\t\tunreadFilter\n\t});\n\n\tconst resetFilters = useCallback(() => {\n\t\tsetOtherKeywords([]);\n\t\tsetAttachmentFilter([]);\n\t\tsetSubject([]);\n\t\tsetAttachmentType([]);\n\t\tsetEmailStatus([]);\n\t\tsetSizeSmaller([]);\n\t\tsetSizeLarger([]);\n\t\tsetSizeSmallerErrorLabel('');\n\t\tsetSizeLargerErrorLabel('');\n\t\tupdateQuery([]);\n\t\tsetReceivedFromAddress([]);\n\t\tsetSentToAddress([]);\n\t\tsetFolder([]);\n\t\tsetTag([]);\n\t}, [updateQuery]);\n\n\tconst queryToBe = useMemo<Array<QueryChip>>(\n\t\t() =>\n\t\t\tconcat(\n\t\t\t\totherKeywords,\n\t\t\t\tunreadFilter,\n\t\t\t\tflaggedFilter,\n\t\t\t\tattachmentFilter,\n\t\t\t\tfolder,\n\t\t\t\tsentBefore,\n\t\t\t\tsentAfter,\n\t\t\t\tsentOn,\n\t\t\t\ttag,\n\t\t\t\tmap(subject, (q) => ({\n\t\t\t\t\t...q,\n\t\t\t\t\thasAvatar: true,\n\t\t\t\t\ticon: 'EmailOutline',\n\t\t\t\t\ticonBackground: 'gray1'\n\t\t\t\t})),\n\t\t\t\tattachmentType,\n\t\t\t\temailStatus,\n\t\t\t\tsizeLarger,\n\t\t\t\tsizeSmaller,\n\t\t\t\treceivedFromAddress,\n\t\t\t\tsentToAddress\n\t\t\t),\n\t\t[\n\t\t\tattachmentFilter,\n\t\t\tattachmentType,\n\t\t\temailStatus,\n\t\t\tflaggedFilter,\n\t\t\tfolder,\n\t\t\totherKeywords,\n\t\t\treceivedFromAddress,\n\t\t\tsentAfter,\n\t\t\tsentBefore,\n\t\t\tsentToAddress,\n\t\t\tsentOn,\n\t\t\tsizeLarger,\n\t\t\tsizeSmaller,\n\t\t\tsubject,\n\t\t\ttag,\n\t\t\tunreadFilter\n\t\t]\n\t);\n\n\tconst onConfirm = useCallback(() => {\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tupdateQuery(queryToBe);\n\t\tsetIsSharedFolderIncluded(isSharedFolderIncludedTobe);\n\t\tonClose();\n\t}, [updateQuery, queryToBe, setIsSharedFolderIncluded, isSharedFolderIncludedTobe, onClose]);\n\n\tconst subjectKeywordRowProps = useMemo(\n\t\t() => ({\n\t\t\totherKeywords,\n\t\t\tsetOtherKeywords,\n\t\t\tsubject,\n\t\t\tsetSubject\n\t\t}),\n\t\t[otherKeywords, subject]\n\t);\n\n\tconst receivedSentAddressRowProps = useMemo(\n\t\t() => ({\n\t\t\treceivedFromAddress,\n\t\t\tsetReceivedFromAddress,\n\t\t\tsentToAddress,\n\t\t\tsetSentToAddress\n\t\t}),\n\t\t[receivedFromAddress, sentToAddress]\n\t);\n\n\tconst attachmentTypeEmailStatusRowProps = useMemo(\n\t\t() => ({\n\t\t\tattachmentType,\n\t\t\tsetAttachmentType,\n\t\t\temailStatus,\n\t\t\tsetEmailStatus\n\t\t}),\n\t\t[attachmentType, setAttachmentType, emailStatus, setEmailStatus]\n\t);\n\n\tconst sizeSmallerSizeLargerRowProps = useMemo(\n\t\t() => ({\n\t\t\tt,\n\t\t\tsizeSmaller,\n\t\t\tsetSizeSmaller,\n\t\t\tsizeLarger,\n\t\t\tsetSizeLarger,\n\t\t\tsizeSmallerErrorLabel,\n\t\t\tsetSizeSmallerErrorLabel,\n\t\t\tsizeLargerErrorLabel,\n\t\t\tsetSizeLargerErrorLabel\n\t\t}),\n\t\t[\n\t\t\tsizeSmaller,\n\t\t\tsetSizeSmaller,\n\t\t\tsizeLarger,\n\t\t\tsetSizeLarger,\n\t\t\tsizeSmallerErrorLabel,\n\t\t\tsetSizeSmallerErrorLabel,\n\t\t\tsizeLargerErrorLabel,\n\t\t\tsetSizeLargerErrorLabel\n\t\t]\n\t);\n\n\tconst tagFolderRowProps = useMemo(\n\t\t() => ({ folder, setFolder, tagOptions, tag, setTag }),\n\t\t[folder, setFolder, tagOptions, tag, setTag]\n\t);\n\n\tconst sendDateRowProps = useMemo(\n\t\t() => ({ sentBefore, setSentBefore, sentAfter, setSentAfter, sentOn, setSentOn }),\n\t\t[sentBefore, setSentBefore, sentAfter, setSentAfter, sentOn, setSentOn]\n\t);\n\tconst toggleFiltersProps = useMemo(\n\t\t() => ({\n\t\t\tquery,\n\t\t\tsetUnreadFilter,\n\t\t\tsetFlaggedFilter,\n\t\t\tsetAttachmentFilter,\n\t\t\tsetIsSharedFolderIncludedTobe,\n\t\t\tisSharedFolderIncludedTobe\n\t\t}),\n\t\t[query, isSharedFolderIncludedTobe]\n\t);\n\n\tconst disabled = useDisabled({\n\t\tquery,\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tqueryToBe,\n\t\tisSharedFolderIncluded,\n\t\tisSharedFolderIncludedTobe\n\t});\n\n\treturn (\n\t\t<CustomModal open={open} onClose={onClose} maxHeight=\"90vh\" size=\"medium\">\n\t\t\t<ModalHeader\n\t\t\t\tonClose={onClose}\n\t\t\t\ttitle={t('label.single_advanced_filter', 'Advanced Filters')}\n\t\t\t\tshowCloseIcon\n\t\t\t/>\n\t\t\t<Divider />\n\n\t\t\t<ScrollableContainer\n\t\t\t\tpadding={{ horizontal: 'medium', vertical: 'small' }}\n\t\t\t\tmainAlignment={'flex-start'}\n\t\t\t>\n\t\t\t\t<ToggleFilters compProps={toggleFiltersProps} />\n\t\t\t\t<SubjectKeywordRow compProps={subjectKeywordRowProps} />\n\t\t\t\t<ReceivedSentAddressRow compProps={receivedSentAddressRowProps} />\n\t\t\t\t<AttachmentTypeEmailStatusRow compProps={attachmentTypeEmailStatusRowProps} />\n\t\t\t\t<SizeSmallerSizeLargerRow compProps={sizeSmallerSizeLargerRowProps} />\n\t\t\t\t<SendReceivedDateRow compProps={sendDateRowProps} />\n\t\t\t\t<TagFolderRow compProps={tagFolderRowProps} />\n\t\t\t</ScrollableContainer>\n\t\t\t<Divider />\n\t\t\t<ModalFooter\n\t\t\t\tonConfirm={onConfirm}\n\t\t\t\tconfirmDisabled={disabled}\n\t\t\t\tsecondaryActionDisabled={secondaryDisabled}\n\t\t\t\tconfirmLabel={t('action.search', 'Search')}\n\t\t\t\tsecondaryActionLabel={t('action.reset', 'Reset')}\n\t\t\t\tonSecondaryAction={resetFilters}\n\t\t\t/>\n\t\t</CustomModal>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useMemo } from 'react';\n\nimport { QueryChip } from '@zextras/carbonio-shell-ui';\nimport { isEqual, sortBy } from 'lodash';\n\nimport type { UseDisabledPropType, UseSecondaryDisabledType } from '../../../types';\n\nconst isQueryArraysAreEqual = (newQuery: QueryChip[], currentQuery: QueryChip[]): boolean => {\n\tif (newQuery.length === 0 && currentQuery.length === 0) return true;\n\tconst sortedNewQuery = sortBy(newQuery.map((item) => item.label));\n\tconst sortedCurrentQuery = sortBy(currentQuery.map((item) => item.label));\n\treturn isEqual(sortedNewQuery, sortedCurrentQuery);\n};\n\nexport const useDisabled = ({\n\tqueryToBe,\n\tquery,\n\tisSharedFolderIncluded,\n\tisSharedFolderIncludedTobe\n}: UseDisabledPropType): boolean =>\n\tuseMemo(\n\t\t() =>\n\t\t\tisSharedFolderIncluded !== isSharedFolderIncludedTobe\n\t\t\t\t? false\n\t\t\t\t: isQueryArraysAreEqual(queryToBe, query),\n\t\t[isSharedFolderIncluded, isSharedFolderIncludedTobe, query, queryToBe]\n\t);\n\nexport const useSecondaryDisabled = ({\n\tattachmentFilter,\n\tattachmentType,\n\temailStatus,\n\tflaggedFilter,\n\tfolder,\n\treceivedFromAddress,\n\tsentAfter,\n\tsentBefore,\n\tsentFromAddress,\n\tsentOn,\n\tsizeLarger,\n\tsizeSmaller,\n\tsubject,\n\ttag,\n\ttotalKeywords,\n\tunreadFilter\n}: UseSecondaryDisabledType): boolean =>\n\tuseMemo(\n\t\t() =>\n\t\t\ttotalKeywords === 0 &&\n\t\t\tsubject.length === 0 &&\n\t\t\tattachmentType.length === 0 &&\n\t\t\temailStatus.length === 0 &&\n\t\t\tsizeSmaller.length === 0 &&\n\t\t\tsizeLarger.length === 0 &&\n\t\t\tunreadFilter.length === 0 &&\n\t\t\tattachmentFilter.length === 0 &&\n\t\t\tflaggedFilter.length === 0 &&\n\t\t\treceivedFromAddress.length === 0 &&\n\t\t\tsentFromAddress.length === 0 &&\n\t\t\tfolder.length === 0 &&\n\t\t\tsentBefore.length === 0 &&\n\t\t\tsentOn.length === 0 &&\n\t\t\tsentAfter.length === 0 &&\n\t\t\ttag.length === 0,\n\t\t[\n\t\t\tattachmentFilter.length,\n\t\t\tattachmentType.length,\n\t\t\temailStatus.length,\n\t\t\tflaggedFilter.length,\n\t\t\tfolder.length,\n\t\t\treceivedFromAddress.length,\n\t\t\tsentAfter.length,\n\t\t\tsentBefore.length,\n\t\t\tsentFromAddress.length,\n\t\t\tsentOn.length,\n\t\t\tsizeLarger.length,\n\t\t\tsizeSmaller.length,\n\t\t\tsubject.length,\n\t\t\ttag.length,\n\t\t\ttotalKeywords,\n\t\t\tunreadFilter.length\n\t\t]\n\t);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\n\nimport { Button, Container, Tooltip } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\n\nimport type { AdvancedFilterButtonProps } from '../../../types';\n\nconst BorderContainer = styled(Container)`\n\tborder-bottom: 0.0625rem solid ${({ theme }): string => theme?.palette?.gray2?.regular};\n\tborder-right: 0.0625rem solid ${({ theme }): string => theme?.palette?.gray2?.regular};\n`;\n\nexport const AdvancedFilterButton: FC<AdvancedFilterButtonProps> = ({\n\tsetShowAdvanceFilters,\n\tsearchDisabled,\n\tfilterCount,\n\tinvalidQueryTooltip\n}) => (\n\t<Tooltip\n\t\tlabel={invalidQueryTooltip}\n\t\tplacement=\"top\"\n\t\tmaxWidth=\"100%\"\n\t\tdisabled={!searchDisabled || !invalidQueryTooltip}\n\t>\n\t\t<BorderContainer\n\t\t\tpadding={{ all: 'small' }}\n\t\t\theight=\"fit\"\n\t\t\tmainAlignment=\"flex-start\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\tborderRadius=\"none\"\n\t\t>\n\t\t\t<Button\n\t\t\t\tonClick={(): void => setShowAdvanceFilters(true)}\n\t\t\t\ttype={filterCount > 0 ? 'default' : 'outlined'}\n\t\t\t\twidth=\"fill\"\n\t\t\t\tlabel={\n\t\t\t\t\tfilterCount === 0\n\t\t\t\t\t\t? t('label.single_advanced_filter', 'Advanced Filters')\n\t\t\t\t\t\t: t('label.advanced_filters', {\n\t\t\t\t\t\t\t\tcount: filterCount,\n\t\t\t\t\t\t\t\tdefaultValue_one: '{{count}} Advanced Filter',\n\t\t\t\t\t\t\t\tdefaultValue_other: '{{count}} Advanced Filters'\n\t\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tdisabled={searchDisabled}\n\t\t\t\ticon=\"Options2Outline\"\n\t\t\t/>\n\t\t</BorderContainer>\n\t</Tooltip>\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport { t, useAppContext } from '@zextras/carbonio-shell-ui';\nimport { filter, isEmpty, map, noop, sortBy } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { AdvancedFilterButton } from './parts/advanced-filter-button';\nimport ShimmerList from './shimmer-list';\nimport { CustomListItem } from '../../carbonio-ui-commons/components/list/list-item';\nimport { LIST_LIMIT } from '../../constants';\nimport { useAppDispatch } from '../../hooks/redux';\nimport { useSelection } from '../../hooks/use-selection';\nimport { search } from '../../store/actions/search';\nimport type { AppContext, SearchListProps } from '../../types';\nimport { getFolderParentId } from '../../ui-actions/utils';\nimport { ConversationListComponent } from '../app/folder-panel/conversations/conversation-list-component';\nimport { ConversationListItemComponent } from '../app/folder-panel/conversations/conversation-list-item-component';\n\nconst SearchConversationList: FC<SearchListProps> = ({\n\tsearchResults,\n\tquery,\n\tloading,\n\tfilterCount,\n\tsetShowAdvanceFilters,\n\tisInvalidQuery,\n\tsearchDisabled,\n\tinvalidQueryTooltip\n}) => {\n\tconst { itemId, folderId } = useParams<{ itemId: string; folderId: string }>();\n\tconst { setCount, count } = useAppContext<AppContext>();\n\tconst items = [...Object.values(searchResults.conversations ?? {})];\n\tconst dispatch = useAppDispatch();\n\tconst parentId = getFolderParentId({ folderId, isConversation: true, items });\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst {\n\t\tselected,\n\t\ttoggle,\n\t\tdeselectAll,\n\t\tisSelectModeOn,\n\t\tsetIsSelectModeOn,\n\t\tselectAll,\n\t\tisAllSelected,\n\t\tselectAllModeOff\n\t} = useSelection({\n\t\tcurrentFolderId: folderId,\n\t\tsetCount,\n\t\tcount,\n\t\titems\n\t});\n\n\t// selectedIds is an array of the ids of the selected conversations for multiple selection actions\n\tconst selectedIds = useMemo(() => Object.keys(selected), [selected]);\n\n\t// This line of code assigns a random integer between 0 and 1 to the const randomListIndex\n\tconst randomListIndex = useMemo(() => Math.floor(Math.random() * 2), []);\n\tconst listRef = useRef<HTMLDivElement>(null);\n\n\tconst displayerTitle = useMemo(() => {\n\t\t// If the query is invalid, don't return a title\n\t\tif (isInvalidQuery) {\n\t\t\treturn null;\n\t\t}\n\t\t// If there are no results, return a title\n\t\tif (isEmpty(searchResults.conversations)) {\n\t\t\tif (randomListIndex === 0) {\n\t\t\t\treturn t(\n\t\t\t\t\t'displayer.search_list_title1',\n\t\t\t\t\t'It looks like there are no results. Keep searching!'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn t('displayer.search_list_title2', 'None of your items matches your search.');\n\t\t}\n\t\t// If there are results, don't return a title\n\t\treturn null;\n\t}, [isInvalidQuery, searchResults.conversations, randomListIndex]);\n\n\tconst conversationList = useMemo(\n\t\t() => sortBy(filter(Object.values(searchResults?.conversations ?? [])), 'sortIndex'),\n\t\t[searchResults?.conversations]\n\t);\n\n\t// totalConversations: length of conversations object\n\tconst totalConversations = useMemo(\n\t\t() => Object.keys(searchResults?.conversations ?? {}).length ?? 0,\n\t\t[searchResults?.conversations]\n\t);\n\n\t// If the search results have completed loading, we can display the search results.\n\t// Otherwise, we display a loading indicator.\n\tconst conversationsLoadingCompleted = useMemo(\n\t\t() => searchResults?.status === 'fulfilled',\n\t\t[searchResults?.status]\n\t);\n\n\tconst conversations = useMemo(\n\t\t() => Object.values(searchResults?.conversations ?? {}),\n\t\t[searchResults?.conversations]\n\t);\n\n\tuseLayoutEffect(() => {\n\t\tlistRef?.current && (listRef.current.children[0].scrollTop = 0);\n\t}, [searchResults.query]);\n\n\tconst onScrollBottom = useCallback(() => {\n\t\tif (searchResults.more && !isLoading) {\n\t\t\tsetIsLoading(true);\n\t\t\tdispatch(\n\t\t\t\tsearch({\n\t\t\t\t\tquery,\n\t\t\t\t\tlimit: LIST_LIMIT.LOAD_MORE_LIMIT,\n\t\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t\ttypes: 'conversation',\n\t\t\t\t\toffset: totalConversations,\n\t\t\t\t\trecip: '0'\n\t\t\t\t})\n\t\t\t).then(() => {\n\t\t\t\tsetIsLoading(false);\n\t\t\t});\n\t\t}\n\t}, [dispatch, isLoading, query, searchResults, totalConversations]);\n\t// This is used to render the list items. It maps the conversationList array and returns a list item for each conversation.\n\tconst listItems = useMemo(\n\t\t() =>\n\t\t\tmap(conversationList, (conversation) => {\n\t\t\t\tconst active = itemId === conversation.id;\n\t\t\t\tconst isSelected = selected[conversation.id];\n\n\t\t\t\treturn (\n\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\tkey={conversation.id}\n\t\t\t\t\t\tbackground={'transparent'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{(visible: boolean): React.JSX.Element => (\n\t\t\t\t\t\t\t<ConversationListItemComponent\n\t\t\t\t\t\t\t\titem={conversation}\n\t\t\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\t\t\tselecting={isSelectModeOn}\n\t\t\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\t\tactiveItemId={itemId}\n\t\t\t\t\t\t\t\tisSearchModule\n\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\tfolderId=\"\"\n\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\tsetDraggedIds={noop}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</CustomListItem>\n\t\t\t\t);\n\t\t\t}),\n\t\t[conversationList, deselectAll, isSelectModeOn, itemId, selected, toggle]\n\t);\n\n\treturn (\n\t\t<Container background=\"gray6\" width=\"40%\" height=\"fill\" mainAlignment=\"flex-start\">\n\t\t\t<AdvancedFilterButton\n\t\t\t\tsetShowAdvanceFilters={setShowAdvanceFilters}\n\t\t\t\tfilterCount={filterCount}\n\t\t\t\tsearchDisabled={searchDisabled}\n\t\t\t\tinvalidQueryTooltip={invalidQueryTooltip}\n\t\t\t/>\n\t\t\t{!isInvalidQuery && (\n\t\t\t\t<ConversationListComponent\n\t\t\t\t\tdisplayerTitle={displayerTitle}\n\t\t\t\t\tlistItems={listItems}\n\t\t\t\t\ttotalConversations={totalConversations}\n\t\t\t\t\tconversationsLoadingCompleted\n\t\t\t\t\tselectedIds={selectedIds}\n\t\t\t\t\tfolderId={parentId}\n\t\t\t\t\tconversations={conversations}\n\t\t\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\tselectAll={selectAll}\n\t\t\t\t\tisAllSelected={isAllSelected}\n\t\t\t\t\tselectAllModeOff={selectAllModeOff}\n\t\t\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\t\t\tloadMore={onScrollBottom}\n\t\t\t\t\tisSearchModule\n\t\t\t\t\tsetDraggedIds={noop}\n\t\t\t\t\tlistRef={listRef}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{loading && <ShimmerList count={33} delay={0} />}\n\t\t</Container>\n\t);\n};\nexport default SearchConversationList;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, {\n\tFC,\n\tReactElement,\n\tuseCallback,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState\n} from 'react';\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport { t, useAppContext } from '@zextras/carbonio-shell-ui';\nimport { isArray, isEmpty, map, noop, sortBy } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { AdvancedFilterButton } from './parts/advanced-filter-button';\nimport ShimmerList from './shimmer-list';\nimport { CustomListItem } from '../../carbonio-ui-commons/components/list/list-item';\nimport { LIST_LIMIT } from '../../constants';\nimport { useAppDispatch } from '../../hooks/redux';\nimport { useSelection } from '../../hooks/use-selection';\nimport { search } from '../../store/actions/search';\nimport type { AppContext, SearchListProps } from '../../types';\nimport { MessageListComponent } from '../app/folder-panel/messages/message-list-component';\nimport { MessageListItemComponent } from '../app/folder-panel/messages/message-list-item-component';\n\nexport const SearchMessageList: FC<SearchListProps> = ({\n\tsearchDisabled,\n\tsearchResults,\n\tquery,\n\tloading,\n\tfilterCount,\n\tsetShowAdvanceFilters,\n\tisInvalidQuery,\n\tinvalidQueryTooltip\n}) => {\n\tconst { itemId, folderId } = useParams<{ itemId: string; folderId: string }>();\n\tconst { setCount, count } = useAppContext<AppContext>();\n\n\tconst {\n\t\tselected,\n\t\ttoggle,\n\t\tdeselectAll,\n\t\tisSelectModeOn,\n\t\tsetIsSelectModeOn,\n\t\tselectAll,\n\t\tisAllSelected,\n\t\tselectAllModeOff\n\t} = useSelection({\n\t\tcurrentFolderId: folderId,\n\t\tsetCount,\n\t\tcount,\n\t\titems: [...Object.values(searchResults.messages ?? {})]\n\t});\n\n\tconst [randomListIndex, setRandomListIndex] = useState(0);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst listRef = useRef<HTMLDivElement>(null);\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tsetRandomListIndex(Math.round(Math.random()));\n\t}, [searchResults.conversations, query]);\n\n\tconst displayerTitle = useMemo(() => {\n\t\tif (!isInvalidQuery && isEmpty(searchResults.messages)) {\n\t\t\tif (randomListIndex === 0) {\n\t\t\t\treturn t(\n\t\t\t\t\t'displayer.search_list_title1',\n\t\t\t\t\t'It looks like there are no results. Keep searching!'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn t('displayer.search_list_title2', 'None of your items matches your search.');\n\t\t}\n\t\treturn null;\n\t}, [isInvalidQuery, searchResults.messages, randomListIndex]);\n\n\tconst messageList = useMemo(\n\t\t() => sortBy(Object.values(searchResults?.messages ?? []), 'sortIndex'),\n\n\t\t[searchResults?.messages]\n\t);\n\n\tconst listItems = useMemo(\n\t\t() =>\n\t\t\tmap(messageList, (message) => {\n\t\t\t\tconst active = itemId === message.id;\n\t\t\t\tconst isSelected = selected[message.id];\n\t\t\t\treturn (\n\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\tbackground={message.read ? 'gray6' : 'gray5'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{(visible: boolean): ReactElement =>\n\t\t\t\t\t\t\tvisible ? (\n\t\t\t\t\t\t\t\t<MessageListItemComponent\n\t\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\t\t\tisSelected={isSelected}\n\t\t\t\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\t\t\t\t\t\t\tisSearchModule\n\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div style={{ height: '4rem' }} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</CustomListItem>\n\t\t\t\t);\n\t\t\t}),\n\t\t[deselectAll, isSelectModeOn, itemId, messageList, selected, toggle]\n\t);\n\n\tconst totalMessages = useMemo(() => {\n\t\tif (searchResults && searchResults.messages) {\n\t\t\treturn Object.keys(searchResults.messages).length;\n\t\t}\n\t\treturn 0;\n\t}, [searchResults]);\n\n\tuseLayoutEffect(() => {\n\t\tlistRef?.current && (listRef.current.children[0].scrollTop = 0);\n\t}, [searchResults.query]);\n\n\tconst onScrollBottom = useCallback(() => {\n\t\tif (searchResults.more && !isLoading) {\n\t\t\tsetIsLoading(true);\n\t\t\tdispatch(\n\t\t\t\tsearch({\n\t\t\t\t\tquery,\n\t\t\t\t\tlimit: LIST_LIMIT.LOAD_MORE_LIMIT,\n\t\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t\ttypes: 'message',\n\t\t\t\t\toffset: totalMessages,\n\t\t\t\t\trecip: '0'\n\t\t\t\t})\n\t\t\t).then(() => {\n\t\t\t\tsetIsLoading(false);\n\t\t\t});\n\t\t}\n\t}, [dispatch, isLoading, query, searchResults, totalMessages]);\n\n\tconst messagesLoadingCompleted = useMemo(\n\t\t() => !isArray(searchResults?.messages),\n\t\t[searchResults?.messages]\n\t);\n\tconst selectedIds = useMemo(() => Object.keys(selected), [selected]);\n\tconst messages = useMemo(\n\t\t() => Object.values(searchResults?.messages ?? {}),\n\t\t[searchResults?.messages]\n\t);\n\n\treturn (\n\t\t<Container\n\t\t\tbackground=\"white\"\n\t\t\twidth=\"40%\"\n\t\t\theight=\"fill\"\n\t\t\tmainAlignment=\"flex-start\"\n\t\t\tdata-testid=\"MailsSearchResultListContainer\"\n\t\t>\n\t\t\t<AdvancedFilterButton\n\t\t\t\tsetShowAdvanceFilters={setShowAdvanceFilters}\n\t\t\t\tfilterCount={filterCount}\n\t\t\t\tsearchDisabled={searchDisabled}\n\t\t\t\tinvalidQueryTooltip={invalidQueryTooltip}\n\t\t\t/>\n\t\t\t<MessageListComponent\n\t\t\t\ttotalMessages={totalMessages}\n\t\t\t\tdisplayerTitle={displayerTitle}\n\t\t\t\tlistItems={listItems}\n\t\t\t\tmessagesLoadingCompleted={messagesLoadingCompleted}\n\t\t\t\tselectedIds={selectedIds}\n\t\t\t\tfolderId={folderId}\n\t\t\t\tmessages={messages}\n\t\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\t\tisAllSelected={isAllSelected}\n\t\t\t\tselectAll={selectAll}\n\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\tselected={selected}\n\t\t\t\tselectAllModeOff={selectAllModeOff}\n\t\t\t\tisSearchModule\n\t\t\t\tsetDraggedIds={noop}\n\t\t\t\tloadMore={onScrollBottom}\n\t\t\t\tlistRef={listRef}\n\t\t\t/>\n\t\t\t{loading && <ShimmerList count={33} delay={0} />}\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useEffect, useMemo, useState } from 'react';\n\nimport { Container, Padding, Text } from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\nimport { useRouteMatch, Switch, Route } from 'react-router-dom';\n\nimport { EmptyFieldMessages, EmptyListMessages } from './utils';\nimport type { SearchPanelProps } from '../../types';\nimport { ConversationPreviewPanelContainer } from '../app/detail-panel/conversation-preview-panel-container';\nimport { MessagePreviewPanelContainer } from '../app/detail-panel/message-preview-panel-container';\n\nconst generateRandomNumber = (): number => Math.floor(Math.random() * 3);\n\nconst SearchPanel: FC<SearchPanelProps> = ({ searchResults, query }) => {\n\tconst { path } = useRouteMatch();\n\tconst emptyListMessages = useMemo(() => EmptyListMessages(t), []);\n\tconst emptyFieldMessages = useMemo(() => EmptyFieldMessages(t), []);\n\tconst [randomIndex, setRandomIndex] = useState(0);\n\tuseEffect(() => {\n\t\tconst random = generateRandomNumber();\n\t\tsetRandomIndex(random);\n\t}, [searchResults?.conversations?.length, query]);\n\tconst displayerMessage = useMemo(() => {\n\t\tif (!searchResults?.conversations) {\n\t\t\treturn emptyListMessages[randomIndex];\n\t\t}\n\t\treturn emptyFieldMessages[0];\n\t}, [searchResults?.conversations, emptyFieldMessages, emptyListMessages, randomIndex]);\n\n\tconst displayerTitle = useMemo(() => displayerMessage?.title, [displayerMessage?.title]);\n\tconst displayerDescription = useMemo(\n\t\t() => displayerMessage?.description,\n\t\t[displayerMessage?.description]\n\t);\n\treturn (\n\t\t<Switch>\n\t\t\t<Route path={`${path}/folder/:folderId/conversation/:conversationId`}>\n\t\t\t\t<ConversationPreviewPanelContainer setClose={() => {}} />\n\t\t\t</Route>\n\t\t\t<Route path={`${path}/folder/:folderId/message/:messageId`}>\n\t\t\t\t<MessagePreviewPanelContainer />\n\t\t\t</Route>\n\t\t\t<Route\n\t\t\t\tpath={path}\n\t\t\t\trender={(): ReactElement => (\n\t\t\t\t\t<Container background=\"white\">\n\t\t\t\t\t\t<Padding all=\"medium\">\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\t\t\t\tweight=\"bold\"\n\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center' }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{displayerTitle}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{displayerDescription}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t/>\n\t\t</Switch>\n\t);\n};\n\nexport default SearchPanel;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, Suspense, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isRejected } from '@reduxjs/toolkit';\nimport { Container, Spinner } from '@zextras/carbonio-design-system';\nimport {\n\tSEARCH_APP_ID,\n\treplaceHistory,\n\tsetAppContext,\n\tt,\n\tuseUserSettings,\n\tSearchViewProps\n} from '@zextras/carbonio-shell-ui';\nimport { includes, map, reduce } from 'lodash';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport { AdvancedFilterModal } from './advanced-filter-modal';\nimport { findIconFromChip } from './parts/use-find-icon';\nimport SearchConversationList from './search-conversation-list';\nimport { SearchMessageList } from './search-message-list';\nimport SearchPanel from './search-panel';\nimport { useFoldersMap } from '../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport type { Folder } from '../../carbonio-ui-commons/types/folder';\nimport { LIST_LIMIT, MAILS_ROUTE } from '../../constants';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { search } from '../../store/actions/search';\nimport { resetSearchResults, selectSearches } from '../../store/searches-slice';\n\nconst SearchView: FC<SearchViewProps> = ({ useDisableSearch, useQuery, ResultsHeader }) => {\n\tconst [query, updateQuery] = useQuery();\n\tconst [searchDisabled, setSearchDisabled] = useDisableSearch();\n\tconst settings = useUserSettings();\n\tconst isMessageView = settings.prefs.zimbraPrefGroupMailBy === 'message';\n\tconst includeSharedItemsInSearch = settings.prefs.zimbraPrefIncludeSharedItemsInSearch === 'TRUE';\n\tconst folders = useFoldersMap();\n\tconst [count, setCount] = useState(0);\n\n\tconst prefLocale = useMemo(\n\t\t() => settings.prefs.zimbraPrefLocale,\n\t\t[settings.prefs.zimbraPrefLocale]\n\t);\n\n\tuseEffect(() => {\n\t\tsetAppContext({ isMessageView, count, setCount });\n\t}, [count, isMessageView]);\n\n\tconst searchInFolders = useMemo(\n\t\t() =>\n\t\t\treduce(\n\t\t\t\tfolders,\n\t\t\t\t(acc: Array<string>, v: Folder, k: string) => {\n\t\t\t\t\tif (v.perm) {\n\t\t\t\t\t\tacc.push(k);\n\t\t\t\t\t}\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t),\n\t\t[folders]\n\t);\n\n\tconst foldersToSearchInQuery = useMemo(\n\t\t() => `( ${map(searchInFolders, (folder) => `inid:\"${folder}\"`).join(' OR ')} OR is:local) `,\n\t\t[searchInFolders]\n\t);\n\n\tconst dispatch = useAppDispatch();\n\tconst [loading, setLoading] = useState(false);\n\tconst [filterCount, setFilterCount] = useState(0);\n\tconst [showAdvanceFilters, setShowAdvanceFilters] = useState(false);\n\tconst [isSharedFolderIncluded, setIsSharedFolderIncluded] = useState<boolean>(\n\t\tincludeSharedItemsInSearch\n\t);\n\tconst [isInvalidQuery, setIsInvalidQuery] = useState<boolean>(false);\n\tconst searchResults = useAppSelector(selectSearches);\n\n\tconst invalidQueryTooltip = useMemo(\n\t\t() => t('label.invalid_query', 'Unable to parse the search query, clear it and retry'),\n\t\t[]\n\t);\n\n\tconst resultLabel = useMemo(() => {\n\t\tif (isInvalidQuery) {\n\t\t\treturn invalidQueryTooltip;\n\t\t}\n\n\t\tif (searchResults.status === 'fulfilled') {\n\t\t\treturn t('label.results_for', 'Results for: ');\n\t\t}\n\t\tif (searchResults.status === 'pending') {\n\t\t\treturn t('label.loading_results', 'Loading Results...');\n\t\t}\n\t\treturn '';\n\t}, [isInvalidQuery, searchResults.status, invalidQueryTooltip]);\n\n\tconst queryToString = useMemo(\n\t\t() =>\n\t\t\tisSharedFolderIncluded && searchInFolders?.length > 0\n\t\t\t\t? `(${query.map((c) => (c.value ? c.value : c.label)).join(' ')}) ${foldersToSearchInQuery}`\n\t\t\t\t: `${query.map((c) => (c.value ? c.value : c.label)).join(' ')}`,\n\t\t[foldersToSearchInQuery, isSharedFolderIncluded, query, searchInFolders?.length]\n\t);\n\n\tconst searchQuery = useCallback(\n\t\tasync (queryString: string, reset: boolean) => {\n\t\t\tconst resultAction = await dispatch(\n\t\t\t\tsearch({\n\t\t\t\t\tquery: queryString,\n\t\t\t\t\tlimit: LIST_LIMIT.INITIAL_LIMIT,\n\t\t\t\t\tsortBy: 'dateDesc',\n\t\t\t\t\ttypes: isMessageView ? 'message' : 'conversation',\n\t\t\t\t\toffset: reset ? 0 : searchResults.offset,\n\t\t\t\t\trecip: '0',\n\t\t\t\t\tlocale: prefLocale\n\t\t\t\t})\n\t\t\t);\n\t\t\tif (\n\t\t\t\tisRejected(resultAction) &&\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\tresultAction?.payload?.Detail?.Error?.Code === 'mail.QUERY_PARSE_ERROR'\n\t\t\t) {\n\t\t\t\tsetIsInvalidQuery(true);\n\t\t\t\tsetSearchDisabled(true, invalidQueryTooltip);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tdispatch,\n\t\t\tinvalidQueryTooltip,\n\t\t\tisMessageView,\n\t\t\tprefLocale,\n\t\t\tsearchResults.offset,\n\t\t\tsetSearchDisabled\n\t\t]\n\t);\n\n\tconst queryArray = useMemo(() => ['has:attachment', 'is:flagged', 'is:unread'], []);\n\tconst findIcon = useCallback((chip) => findIconFromChip(chip), []);\n\n\tuseEffect(() => {\n\t\tlet _count = 0;\n\t\tif (query && query.length > 0 && !isInvalidQuery) {\n\t\t\tconst modifiedQuery = map(query, (q) => {\n\t\t\t\tif (\n\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t(includes(queryArray, q.label) ||\n\t\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t/^subject:/.test(q.label) ||\n\t\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t/^in:/.test(q.label) ||\n\t\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t/^before:/.test(q.label) ||\n\t\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t/^after:/.test(q.label) ||\n\t\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t/^tag:/.test(q.label) ||\n\t\t\t\t\t\t// TODO: fix type definition\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t/^date:/.test(q.label)) &&\n\t\t\t\t\t!includes(Object.keys(q), 'isGeneric') &&\n\t\t\t\t\t!includes(Object.keys(q), 'isQueryFilter')\n\t\t\t\t) {\n\t\t\t\t\t_count += 1;\n\t\t\t\t\treturn findIcon(q);\n\t\t\t\t}\n\t\t\t\treturn { ...q };\n\t\t\t});\n\n\t\t\tif (_count > 0) {\n\t\t\t\tupdateQuery(modifiedQuery);\n\t\t\t}\n\t\t}\n\t}, [findIcon, isInvalidQuery, query, queryArray, updateQuery]);\n\n\tuseEffect(() => {\n\t\tif (searchResults.status === 'pending') {\n\t\t\tsetLoading(true);\n\t\t}\n\t\tsetLoading(false);\n\t}, [searchResults.status]);\n\n\tuseEffect(() => {\n\t\tif (query?.length > 0 && !isInvalidQuery) {\n\t\t\tsetFilterCount(query.length);\n\t\t\tsearchQuery(queryToString, false);\n\t\t}\n\t\tif (query?.length === 0) {\n\t\t\tsetFilterCount(0);\n\t\t\tsetIsInvalidQuery(false);\n\t\t\tdispatch(resetSearchResults());\n\t\t\treplaceHistory({\n\t\t\t\tpath: MAILS_ROUTE,\n\t\t\t\troute: SEARCH_APP_ID\n\t\t\t});\n\t\t}\n\t}, [dispatch, isInvalidQuery, query.length, queryToString, searchQuery]);\n\n\tconst { path } = useRouteMatch();\n\tconst resultLabelType = isInvalidQuery ? 'warning' : undefined;\n\n\treturn (\n\t\t<>\n\t\t\t<Container>\n\t\t\t\t{/* TOFIX-SHELL: labetype is missing in shell type declaration as optional and string */}\n\t\t\t\t<ResultsHeader\n\t\t\t\t\tlabel={resultLabel}\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tlabelType={resultLabelType}\n\t\t\t\t/>\n\t\t\t\t<Container\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tbackground=\"white\"\n\t\t\t\t\tstyle={{ overflowY: 'auto' }}\n\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path={`${path}/:folder?/:folderId?/:type?/:itemId?`}>\n\t\t\t\t\t\t\t{isMessageView ? (\n\t\t\t\t\t\t\t\t<SearchMessageList\n\t\t\t\t\t\t\t\t\tsearchDisabled={searchDisabled}\n\t\t\t\t\t\t\t\t\tsearchResults={searchResults}\n\t\t\t\t\t\t\t\t\tquery={queryToString}\n\t\t\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t\t\tfilterCount={filterCount}\n\t\t\t\t\t\t\t\t\tsetShowAdvanceFilters={setShowAdvanceFilters}\n\t\t\t\t\t\t\t\t\tisInvalidQuery={isInvalidQuery}\n\t\t\t\t\t\t\t\t\tinvalidQueryTooltip={invalidQueryTooltip}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<SearchConversationList\n\t\t\t\t\t\t\t\t\tsearchDisabled={searchDisabled}\n\t\t\t\t\t\t\t\t\tsearchResults={searchResults}\n\t\t\t\t\t\t\t\t\tquery={queryToString}\n\t\t\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\t\t\tfilterCount={filterCount}\n\t\t\t\t\t\t\t\t\tsetShowAdvanceFilters={setShowAdvanceFilters}\n\t\t\t\t\t\t\t\t\tisInvalidQuery={isInvalidQuery}\n\t\t\t\t\t\t\t\t\tinvalidQueryTooltip={invalidQueryTooltip}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t\t<Suspense fallback={<Spinner color=\"white\" />}>\n\t\t\t\t\t\t<Container mainAlignment=\"flex-start\" width=\"60%\">\n\t\t\t\t\t\t\t<SearchPanel searchResults={searchResults} query={query} />\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Suspense>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t\t<AdvancedFilterModal\n\t\t\t\t// TOFIX: fix type definition\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\tquery={query}\n\t\t\t\t// TOFIX-SHELL: fix updateQUeryFunction inside shell type\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\tupdateQuery={updateQuery}\n\t\t\t\tisSharedFolderIncluded={isSharedFolderIncluded}\n\t\t\t\tsetIsSharedFolderIncluded={setIsSharedFolderIncluded}\n\t\t\t\topen={showAdvanceFilters}\n\t\t\t\tonClose={(): void => setShowAdvanceFilters(false)}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default SearchView;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport type { ChipType } from '../../../types';\n\nexport const findIconFromChip = (chip: ChipType): ChipType => {\n\tswitch (chip.label) {\n\t\tcase 'is:flagged':\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\tavatarIcon: 'FlagOutline',\n\t\t\t\tavatarBackground: 'error',\n\t\t\t\tvalue: 'is:flagged',\n\t\t\t\thasAvatar: true,\n\t\t\t\tisQueryFilter: true\n\t\t\t};\n\t\tcase 'is:unread':\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tavatarIcon: 'EmailOutline',\n\t\t\t\tvalue: 'is:unread',\n\t\t\t\tisQueryFilter: true\n\t\t\t};\n\t\tcase 'has:attachment':\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tavatarIcon: 'AttachOutline',\n\t\t\t\tvalue: 'has:attachment',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\n\t\tcase chip.label.match(/^in:*/)?.input:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'FolderOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\n\t\tcase chip.label.match(/^subject:*/)?.input:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'EmailOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\t\tcase chip.label.match(/^tag:*/)?.input:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'TagOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\n\t\tcase chip.label.match(/^before:*/)?.input:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'CalendarOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\n\t\tcase chip.label.match(/^after:*/)?.input:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'CalendarOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\t\tcase chip.label.match(/^date:*/)?.input:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\thasAvatar: true,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'CalendarOutline',\n\t\t\t\tisQueryFilter: true,\n\t\t\t\tavatarBackground: 'gray1'\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\t...chip,\n\t\t\t\tvalue: chip.label,\n\t\t\t\tavatarIcon: 'MailModOutline',\n\t\t\t\tavatarBackground: 'gray1',\n\t\t\t\tisQueryFilter: true\n\t\t\t};\n\t}\n};\n"],"names":["SelectFolderModal","folder","onClose","headerTitle","actionLabel","actionTooltip","disabledActionTooltip","inputLabel","confirmAction","showSharedAccounts","showTrashFolder","showSpamFolder","allowFolderCreation","allowRootSelection","folderDestination","setFolderDestination","useState","onConfirm","useCallback","isConfirmDisabled","useMemo","isNil","id","l","confirmActionTooltip","t","React","Container","padding","all","mainAlignment","crossAlignment","height","style","overflowY","ModalHeader","title","Text","overflow","FolderSelector","selectedFolderId","onFolderSelected","ModalFooter","tooltip","secondaryAction","label","secondaryLabel","disabled","AttachmentTypeEmailStatusRow","compProps","attachmentType","setAttachmentType","emailStatus","setEmailStatus","attachmentTypeItems","attachmentTypeItemsConstant","emailStatusItems","emailStatusItemsConstant","attachmentTypeRef","useRef","emailStatusRef","attachmentTypeRefHasFocus","setAttachmentTypeRefHasFocus","emailStatusRefHasFocus","setEmailStatusRefHasFocus","attachmentTypeOptions","setAttachmentTypeOptions","emailStatusOptions","setEmailStatusOptions","onChange","state","stateHandler","chipOnAdd","items","preText","hasAvatar","isGeneric","isQueryFilter","values","filter","item","value","searchString","avatarIcon","icon","avatarColor","handlerAttachmentType","useEffect","ref","current","addEventListener","removeEventListener","handlerEmailStatus","updateAttachmentTypeOptions","target","q","textContent","length","v","toLowerCase","indexOf","find","i","updateEmailStatusOptions","attachmentTypeOnInputType","ev","emailStatusOnInputType","attachmentTypeChipOnAdd","emailStatusChipOnAdd","attachmentTypeOnChange","emailStatusOnChange","attachmentTypePlaceholder","emailStatusPlaceholder","attachmentIcon","emailStatusIcon","attachmentTypeBottomBorderColor","emailStatusBottomBorderColor","bottom","top","orientation","right","maxWidth","ChipInput","placeholder","defaultValue","options","background","disableOptions","onAdd","maxChips","confirmChipOnBlur","onInputType","bottomBorderColor","left","dropdownMaxHeight","maxHeight","re","isValidEmail","email","test","getRegex","prefix","RegExp","getChipString","regex","resultString","fullName","getChipValue","getChipItems","chips","map","chip","error","uuid","avatarBackground","ReceivedSentAddressRow","receivedFromAddress","setReceivedFromAddress","sentToAddress","setSentToAddress","ContactInput","integrationAvailable","useIntegratedComponent","recipOnChange","sentToOnChange","chipOnAdded","hasError","recipChipOnAdd","sentToChipOnAdd","chipBackground","handleReceivedFromChange","contacts","handleSentToChange","receivedFromHasError","sentFromHasError","description","undefined","QUERY_DATE_FORMAT","SendReceivedDateRow","sentBefore","setSentBefore","sentAfter","setSentAfter","sentOn","setSentOn","zimbraPrefLocale","prefLocale","useUserSettings","prefs","moment","onSentBeforeChange","date","tmp","format","onSentAfterChange","onSentOnChange","sentBeforeDefault","Date","split","valueOf","sentAfterDefault","sentOnDefault","DateTimePicker","width","enableChips","chipProps","dateFormat","locale","includeTime","horizontal","SizeLargerSizeSmallerRow","sizeSmaller","setSizeSmaller","sizeLarger","setSizeLarger","isInvalidSmallSize","setIsInvalidSmallSize","isInvalidLargeSize","setIsInvalidLargeSize","errorLabel","checkErrorSizeSmaller","input","match","checkErrorSizeLarger","sizeSmallerChipOnAdd","sizeLargerChipOnAdd","sizeSmallerOnChange","sizeLargerOnChange","sizeSmallerPlaceholder","sizeLargerPlaceholder","errorBackgroundColor","SubjectKeywordRow","otherKeywords","setOtherKeywords","subject","setSubject","keywordChipOnAdd","subjectOnChange","keywordOnChange","subjectChipOnAdd","subjectPlaceholder","separators","key","ctrlKey","TagFolderRow","setFolder","tagOptions","tag","setTag","open","setOpen","openFolderModal","folderChipOnAdd","tagChipOnAdd","chipBg","ZIMBRA_STANDARD_COLORS","color","hex","folderOnChange","folderChips","tagPlaceholder","onTagChange","_setFolderDestination","_onClose","absFolderPath","getFolderIconColor","isSharedAccountFolder","requireUniqueChips","iconAction","CustomModal","size","ToggleFilters","query","setUnreadFilter","setFlaggedFilter","setAttachmentFilter","isSharedFolderIncludedTobe","setIsSharedFolderIncludedTobe","isUnread","setIsUnread","hasAttachment","setHasAttachment","isFlagged","setIsFlagged","toggleUnread","nanoid","toggleFlagged","toggleAttachment","toggleSharedFolder","Padding","Switch","onClick","weight","ScrollableContainer","styled","withConfig","displayName","componentId","AdvancedFilterModal","updateQuery","setIsSharedFolderIncluded","isSharedFolderIncluded","attachmentFilter","unreadFilter","flaggedFilter","sizeSmallerErrorLabel","setSizeSmallerErrorLabel","sizeLargerErrorLabel","setSizeLargerErrorLabel","queryArray","getTags","name","customComponent","Row","takeAvailableSpace","Icon","TextWithTooltip","updatedQuery","includes","subjectsInQuery","attachmentTypeInQuery","emailStatusInQuery","sizeSmallerInQuery","sizeLargerInQuery","sentBeforeInQuery","sentAfterInQuery","tagInQuery","sentOnInQuery","sentToInQuery","receivedFromInQuery","folderInQuery","totalKeywords","secondaryDisabled","useSecondaryDisabled","sentFromAddress","resetFilters","queryToBe","concat","iconBackground","subjectKeywordRowProps","receivedSentAddressRowProps","attachmentTypeEmailStatusRowProps","sizeSmallerSizeLargerRowProps","tagFolderRowProps","sendDateRowProps","toggleFiltersProps","useDisabled","isQueryArraysAreEqual","newQuery","currentQuery","sortedNewQuery","sortBy","sortedCurrentQuery","isEqual","showCloseIcon","Divider","vertical","SizeSmallerSizeLargerRow","confirmDisabled","secondaryActionDisabled","confirmLabel","secondaryActionLabel","onSecondaryAction","BorderContainer","theme","palette","gray2","regular","AdvancedFilterButton","setShowAdvanceFilters","searchDisabled","filterCount","invalidQueryTooltip","Tooltip","placement","borderRadius","Button","type","count","defaultValue_one","defaultValue_other","SearchConversationList","searchResults","loading","isInvalidQuery","itemId","folderId","useParams","setCount","useAppContext","Object","conversations","dispatch","useAppDispatch","parentId","getFolderParentId","isConversation","isLoading","setIsLoading","selected","toggle","deselectAll","isSelectModeOn","setIsSelectModeOn","selectAll","isAllSelected","selectAllModeOff","useSelection","currentFolderId","selectedIds","keys","randomListIndex","Math","floor","random","listRef","displayerTitle","isEmpty","conversationList","totalConversations","status","useLayoutEffect","children","scrollTop","onScrollBottom","more","search","limit","LIST_LIMIT","LOAD_MORE_LIMIT","types","offset","recip","then","listItems","conversation","active","isSelected","CustomListItem","visible","ConversationListItemComponent","selecting","activeItemId","isSearchModule","setDraggedIds","noop","ConversationListComponent","conversationsLoadingCompleted","loadMore","ShimmerList","delay","SearchMessageList","messages","setRandomListIndex","round","messageList","message","read","MessageListItemComponent","totalMessages","messagesLoadingCompleted","isArray","MessageListComponent","SearchPanel","path","useRouteMatch","emptyListMessages","EmptyListMessages","emptyFieldMessages","EmptyFieldMessages","randomIndex","setRandomIndex","displayerMessage","displayerDescription","Route","ConversationPreviewPanelContainer","setClose","MessagePreviewPanelContainer","render","whiteSpace","textAlign","SearchView","useDisableSearch","useQuery","ResultsHeader","setSearchDisabled","settings","isMessageView","zimbraPrefGroupMailBy","includeSharedItemsInSearch","zimbraPrefIncludeSharedItemsInSearch","folders","useFoldersMap","setAppContext","searchInFolders","reduce","acc","k","perm","push","foldersToSearchInQuery","join","setLoading","setFilterCount","showAdvanceFilters","setIsInvalidQuery","useAppSelector","selectSearches","resultLabel","queryToString","c","searchQuery","async","queryString","reset","resultAction","INITIAL_LIMIT","isRejected","payload","Detail","Error","Code","findIcon","findIconFromChip","_count","modifiedQuery","resetSearchResults","replaceHistory","MAILS_ROUTE","route","SEARCH_APP_ID","resultLabelType","labelType","Suspense","fallback","Spinner"],"sourceRoot":""}