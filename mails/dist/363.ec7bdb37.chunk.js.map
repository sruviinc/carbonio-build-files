{"version":3,"file":"363.ec7bdb37.chunk.js","mappings":"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","sources":["webpack://carbonio-mails-ui/./src/carbonio-ui-commons/components/modals/modal-footer.tsx","webpack://carbonio-mails-ui/./src/carbonio-ui-commons/components/modals/modal-header.tsx","webpack://carbonio-mails-ui/./src/carbonio-ui-commons/helpers/folders.ts","webpack://carbonio-mails-ui/./src/hooks/use-folders.ts","webpack://carbonio-mails-ui/./src/hooks/use-ui-utilities.ts","webpack://carbonio-mails-ui/./src/integrations/shared-invite-reply/parts/styled-components.jsx","webpack://carbonio-mails-ui/./src/carbonio-ui-commons/components/breadcrumbs/static-breadcrumbs.tsx","webpack://carbonio-mails-ui/./src/views/sidebar/commons/flat-folders-accordion/flat-folders-accordion.tsx","webpack://carbonio-mails-ui/./src/views/sidebar/commons/folder-selector.tsx","webpack://carbonio-mails-ui/./src/views/sidebar/utils.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable import/extensions */\n\nimport React, { FC, ReactElement, useMemo } from 'react';\n\nimport { Container, Button, Padding, Divider, Tooltip } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport type { ModalFooterProps } from '../../types';\n\nconst ModalFooter: FC<ModalFooterProps> = ({\n\tmainAlignment = 'center',\n\tcrossAlignment = 'center',\n\tonConfirm,\n\tlabel,\n\tsecondaryAction,\n\tsecondaryLabel,\n\tprimaryBtnType = 'default',\n\tsecondaryBtnType = 'default',\n\tdisabled,\n\tsecondaryDisabled,\n\tbackground = 'primary',\n\tsecondarybackground,\n\tcolor = 'primary',\n\tsecondaryColor = 'secondary',\n\tsize = 'medium',\n\tshowDivider = true,\n\ttooltip,\n\tsecondaryTooltip,\n\tpaddingTop = 'medium',\n\tadditionalAction,\n\tadditionalBtnType = 'outlined',\n\tadditionalColor = 'secondary',\n\tadditionalLabel,\n\tprimaryButtonIcon\n}): ReactElement => {\n\tconst [t] = useTranslation();\n\n\tconst cancelLabel = useMemo(() => t('label.cancel', 'cancel'), [t]);\n\n\treturn (\n\t\t<Container\n\t\t\tmainAlignment={mainAlignment}\n\t\t\tcrossAlignment={crossAlignment}\n\t\t\tpadding={{\n\t\t\t\ttop: paddingTop\n\t\t\t}}\n\t\t>\n\t\t\t{showDivider && (\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ top: 'small', bottom: 'small' }}\n\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\theight=\"fit\"\n\t\t\t\t>\n\t\t\t\t\t<Divider />\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t\t<Container orientation=\"horizontal\" mainAlignment=\"space-between\">\n\t\t\t\t{additionalAction && (\n\t\t\t\t\t<Container orientation=\"horizontal\" width=\"fit\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tcolor={additionalColor}\n\t\t\t\t\t\t\ttype={additionalBtnType}\n\t\t\t\t\t\t\tonClick={additionalAction}\n\t\t\t\t\t\t\tlabel={additionalLabel ?? cancelLabel}\n\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ top: 'small', bottom: 'small' }}\n\t\t\t\t\tmainAlignment=\"flex-end\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\theight=\"fit\"\n\t\t\t\t>\n\t\t\t\t\t{secondaryAction && (\n\t\t\t\t\t\t<Padding right=\"small\" vertical=\"small\">\n\t\t\t\t\t\t\t{secondaryTooltip ? (\n\t\t\t\t\t\t\t\t<Tooltip label={secondaryTooltip} placement=\"top\" maxWidth=\"fit\">\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tbackgroundColor={secondarybackground}\n\t\t\t\t\t\t\t\t\t\tcolor={secondaryColor}\n\t\t\t\t\t\t\t\t\t\ttype={secondaryBtnType}\n\t\t\t\t\t\t\t\t\t\tonClick={secondaryAction}\n\t\t\t\t\t\t\t\t\t\tlabel={secondaryLabel ?? cancelLabel}\n\t\t\t\t\t\t\t\t\t\tdisabled={secondaryDisabled}\n\t\t\t\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tbackgroundColor={secondarybackground}\n\t\t\t\t\t\t\t\t\tcolor={secondaryColor}\n\t\t\t\t\t\t\t\t\ttype={secondaryBtnType}\n\t\t\t\t\t\t\t\t\tonClick={secondaryAction}\n\t\t\t\t\t\t\t\t\tlabel={secondaryLabel ?? cancelLabel}\n\t\t\t\t\t\t\t\t\tdisabled={secondaryDisabled}\n\t\t\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<Padding vertical=\"small\">\n\t\t\t\t\t\t{tooltip ? (\n\t\t\t\t\t\t\t<Tooltip label={tooltip} placement=\"top\" maxWidth=\"fit\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\tonClick={onConfirm}\n\t\t\t\t\t\t\t\t\tlabel={label}\n\t\t\t\t\t\t\t\t\ttype={primaryBtnType}\n\t\t\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\t\t\tbackgroundColor={color || background}\n\t\t\t\t\t\t\t\t\ticon={primaryButtonIcon}\n\t\t\t\t\t\t\t\t\ticonPlacement=\"left\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\tonClick={onConfirm}\n\t\t\t\t\t\t\t\tlabel={label}\n\t\t\t\t\t\t\t\ttype={primaryBtnType}\n\t\t\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t\t\t\tbackgroundColor={color || background}\n\t\t\t\t\t\t\t\ticon={primaryButtonIcon}\n\t\t\t\t\t\t\t\ticonPlacement=\"left\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Padding>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\nexport default ModalFooter;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\n\nimport {\n\tDivider,\n\tText,\n\tRow,\n\tIconButton,\n\tPadding,\n\tContainer\n} from '@zextras/carbonio-design-system';\n\nconst ModalHeader: FC<{ title: string; onClose?: () => void; showCloseIcon?: boolean }> = ({\n\ttitle,\n\tonClose,\n\tshowCloseIcon = true\n}) => (\n\t<Container mainAlignment=\"space-between\" width=\"100%\">\n\t\t<Row takeAvailableSpace mainAlignment=\"space-between\" width=\"100%\">\n\t\t\t<Row width=\"calc(100% - 1.5rem)\" takeAvailableSpace mainAlignment=\"flex-start\">\n\t\t\t\t<Text weight=\"bold\" size=\"large\">\n\t\t\t\t\t{title}\n\t\t\t\t</Text>\n\t\t\t</Row>\n\t\t\t{onClose && showCloseIcon && (\n\t\t\t\t<Row mainAlignment=\"flex-start\">\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\t\tstyle={{ padding: 0, margin: 0 }}\n\t\t\t\t\t\tonClick={onClose}\n\t\t\t\t\t\ticon=\"CloseOutline\"\n\t\t\t\t\t/>\n\t\t\t\t</Row>\n\t\t\t)}\n\t\t</Row>\n\t\t<Padding top=\"medium\" />\n\t\t<Divider />\n\t\t<Padding bottom=\"medium\" />\n\t</Container>\n);\n\nexport default ModalHeader;\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { FOLDERS, getUserAccount } from '@zextras/carbonio-shell-ui';\nimport { find } from 'lodash';\n\nimport { useFolderStore } from '../store/zustand/folder';\nimport type { Folder, Folders } from '../types/folder';\n\nconst NO_ACCOUNT_NAME = 'No account';\n\n/*\n * Describe the folder id syntax\n *\n * [<zid>:]<folderId>\n *\n * e.g. a79fa996-e90e-4f04-97c4-c84209bb8277:2\n */\nconst FOLDERID_REGEX = /^([^:]+(?=:))*:?(\\d+)$/;\n\ntype FolderIdType = { zid: string | null; id: string | null };\n\n/**\n * Parse the given folder id and returns on object with the composing parts of the folder id\n * @param folderId\n */\nexport const getFolderIdParts = (folderId: string): FolderIdType => {\n\tconst result: FolderIdType = { zid: null, id: null };\n\n\tif (!folderId || !folderId.match(FOLDERID_REGEX)) {\n\t\treturn result;\n\t}\n\n\tconst parts = FOLDERID_REGEX.exec(folderId);\n\tif (!parts) {\n\t\treturn result;\n\t}\n\n\t[, result.zid = null, result.id = null] = parts;\n\treturn result;\n};\n\n/**\n * Get the account name of the owner of the given folder, if the owner is an\n * \"other\" account, different from the primary account of the current user.\n * If the owner is the primary account then <code>null</code> is returned\n * @param folderId\n * @param folderRoots\n */\nexport const getFolderOtherOwnerAccountName = (\n\tfolderId: string,\n\tfolderRoots: Folders\n): string | null => {\n\tif (!folderId) {\n\t\treturn null;\n\t}\n\n\tconst { zid } = getFolderIdParts(folderId);\n\tif (!zid) {\n\t\treturn null;\n\t}\n\n\t/** find the folderRoots for which the id corresponds to the message zid\n\t * if the folderRoots has an owner, return the owner\n\t * if not, return null\n\t * */\n\n\tconst matchingFolderRoot = find(folderRoots, (c) => c.id.includes(zid));\n\tif (!matchingFolderRoot) {\n\t\treturn null;\n\t}\n\n\treturn 'owner' in matchingFolderRoot && matchingFolderRoot.owner\n\t\t? matchingFolderRoot.owner\n\t\t: null;\n};\n\n/**\n * Returns the account name of the owner of the folder, based on the folder id\n * @param folderId\n * @param folderRoots\n */\nexport const getFolderOwnerAccountName = (folderId: string, folderRoots: Folders): string => {\n\tconst primaryAccount = getUserAccount();\n\n\t/*\n\t * Try to get the account of the \"other\" owner, aka an owner which\n\t * is not the primary account of the current user\n\t */\n\tconst otherOwnerAccount = getFolderOtherOwnerAccountName(folderId, folderRoots);\n\n\tif (!otherOwnerAccount) {\n\t\treturn primaryAccount?.name ?? NO_ACCOUNT_NAME;\n\t}\n\n\treturn otherOwnerAccount;\n};\n\n/**\n * Tells if a folder with the given id is a spam folder\n * @param folderId\n * @param folderType\n */\nexport const isA = (folderId: string, folderType: keyof Folders): boolean => {\n\tif (!folderId) {\n\t\treturn false;\n\t}\n\treturn getFolderIdParts(folderId).id === folderType;\n};\n\n/**\n * Tells if a folder with the given id is the default account root folder\n * @param folderId\n */\nexport const isDefaultAccountRoot = (folderId: string): boolean => folderId === FOLDERS.USER_ROOT;\n\n/**\n * Tells if a folder with the given id is a root folder\n * @param folderId\n */\nexport const isRoot = (folderId: string): boolean => isA(folderId, FOLDERS.USER_ROOT);\n\n/**\n * Tells if the given folder is a link to a folder shared by another user\n * @param folder\n */\nexport const isLink = (folder: Folder): boolean =>\n\t(folder && folder.isLink && getFolderIdParts(folder.id).zid === null) ?? false;\n\n/**\n * Tells if a folder is a folder of a shared account\n * @param folderId\n */\nexport function isSharedAccountFolder(folderId: string): boolean {\n\treturn getFolderIdParts(folderId).zid !== null;\n}\n\n/**\n * Tells if a folder is a system one\n * @param folderId\n */\nexport const isSystemFolder = (folderId: string): boolean => {\n\tconst { id } = getFolderIdParts(folderId);\n\tif (!id) {\n\t\treturn false;\n\t}\n\tconst systemFoldersIds: readonly string[] = Object.values(FOLDERS);\n\treturn systemFoldersIds.includes(folderId);\n};\n\n/**\n * Tells if a folder is a trashed folder\n * @param folder\n * @param folderId\n */\nexport const isTrashed = ({\n\tfolder,\n\tfolderId\n}: {\n\tfolder?: Folder;\n\tfolderId?: string;\n}): boolean => {\n\tif (!folder && !folderId) {\n\t\treturn false;\n\t}\n\tconst folderIdAbsPath = useFolderStore.getState()?.folders?.[folderId ?? '']?.absFolderPath;\n\n\tconst path = folder ? folder.absFolderPath : folderIdAbsPath;\n\tif (!path) {\n\t\treturn false;\n\t}\n\n\treturn path.toLowerCase().startsWith('/trash');\n};\n\n/**\n * Tells if a folder with the given id is a trash folder\n * @param folderId\n */\nexport const isTrash = (folderId: string): boolean => isA(folderId, FOLDERS.TRASH);\n\n/**\n * Tells if the current user has read permission on the given folder/link\n * @param folder\n */\nexport const isReadAllowed = (folder: Folder): boolean => !folder.perm || folder.perm.includes('r');\n\n/**\n * Tells if the current user has write permission on the given folder/link\n * @param folder\n */\nexport const isWriteAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('w');\n\n/**\n * Tells if the current user has insertion permission on the given folder/link\n * @param folder\n */\nexport const isInsertAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('i');\n\n/**\n * Tells if the current user has subfolder creation permission on the given folder/link\n * @param folder\n */\nexport const isCreateAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('c');\n\n/**\n * Tells if the current user has deletion permission on the given folder/link\n * @param folder\n */\nexport const isDeleteAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('d');\n\n/**\n * Tells if the current user has administration permission on the given folder/link\n * @param folder\n */\nexport const isAdministerAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('a');\n('');\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { sortBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { getRootsArray, useRootsArray } from '../carbonio-ui-commons/store/zustand/folder/hooks';\nimport { Folder } from '../carbonio-ui-commons/types/folder';\nimport { getFolderIdParts } from '../helpers/folders';\n\n/**\n * calculate the sorting criteria for a given folder\n * system folders are placed before user folders\n * the trash folder is always the last one\n * @param folder\n * @returns the sorting criteria\n */\nexport const getSortCriteria = (folder: Folder): string => {\n\tconst { id } = getFolderIdParts(folder.id);\n\tif (id === FOLDERS.TRASH) {\n\t\treturn FOLDERS.LAST_SYSTEM_FOLDER_POSITION;\n\t}\n\treturn parseInt(id ?? '', 10) < 17 ? `   ${id}` : folder.name.toLowerCase();\n};\n\n/**\n * recursively sort the children of a folder according to a given sort function\n * @param children\n * @param sortFunction\n * @returns the sorted children\n */\nexport const sortFolders = ({\n\tchildren,\n\tsortFunction\n}: {\n\tchildren: Folder[];\n\tsortFunction: (folder: Folder) => number | string;\n}): Folder[] => {\n\tconst childrenSorted = sortBy(children, sortFunction);\n\treturn childrenSorted.map((folder) => ({\n\t\t...folder,\n\t\tchildren: sortFolders({ children: folder.children, sortFunction })\n\t}));\n};\n\n/**\n * sorts the children of the useRootsArray hook according to the specified sort function\n * @returns the sorted children\n */\nexport const useFolders = (): Array<Folder> => {\n\tconst roots = useRootsArray();\n\treturn useMemo(() => sortFolders({ children: roots, sortFunction: getSortCriteria }), [roots]);\n};\n\n/**\n * sorts the children of the getRootsArray hook according to the specified sort function\n * @returns the sorted children\n */\nexport const getFolders = (): Array<Folder> => {\n\tconst roots = getRootsArray();\n\treturn sortFolders({ children: roots, sortFunction: getSortCriteria });\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useContext, useMemo } from 'react';\n\nimport {\n\tCreateModalFn,\n\tCreateSnackbarFn,\n\tModalManagerContext,\n\tuseSnackbar\n} from '@zextras/carbonio-design-system';\n\nimport { useGlobalModal } from '../views/global-modal-manager';\n\nexport type UiUtilities = {\n\tcreateModal: CreateModalFn;\n\tcreateSnackbar: CreateSnackbarFn;\n};\n\nexport const useUiUtilities = (): UiUtilities => {\n\tconst createModal = useContext(ModalManagerContext);\n\tconst createSnackbar = useSnackbar();\n\tconst createGlobalModal = useGlobalModal();\n\n\treturn useMemo(\n\t\t() => ({\n\t\t\tcreateModal: createModal ?? createGlobalModal,\n\t\t\tcreateSnackbar\n\t\t}),\n\t\t[createGlobalModal, createModal, createSnackbar]\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport styled from 'styled-components';\nimport { Container, Text } from '@zextras/carbonio-design-system';\n\nexport const Square = styled.div`\n\twidth: 1.125rem;\n\theight: 1.125rem;\n\tposition: relative;\n\ttop: -0.1875rem;\n\tborder: 0.0625rem solid ${({ theme }) => theme.palette.gray2.regular};\n\tbackground: ${({ color }) => color};\n\tborder-radius: 0.25rem;\n`;\nexport const ColorContainer = styled(Container)`\n\tborder-bottom: 0.0625rem solid ${({ theme }) => theme.palette.gray2.regular};\n\tcursor: ${({ disabled }) => (disabled ? 'no-drop' : 'pointer')};\n`;\n\nexport const TextUpperCase = styled(Text)`\n\ttext-transform: capitalize;\n`;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react';\n\nimport {\n\tBreadcrumbs,\n\tBreadcrumbsProps,\n\tContainer,\n\tRow,\n\tText,\n\tTextProps,\n\tTooltip\n} from '@zextras/carbonio-design-system';\n\ntype StaticBreadcrumbsProps = BreadcrumbsProps & {\n\tsize?: TextProps['size'];\n\ttooltipLabel?: string;\n};\n\nconst StaticBreadcrumbs = React.forwardRef<HTMLDivElement, StaticBreadcrumbsProps>(\n\tfunction BreadcrumbsFn(\n\t\t{ crumbs, collapserProps, dropdownProps, size = 'large', tooltipLabel, ...rest },\n\t\tref\n\t) {\n\t\tconst crumbsCount = crumbs.length;\n\t\tconst tooltip =\n\t\t\ttooltipLabel ?? crumbs.reduce<string>((result, crumb) => `${result}/${crumb.label}`, '');\n\t\tconst firstCrumb = crumbs.shift();\n\n\t\treturn (\n\t\t\t<Tooltip label={tooltip}>\n\t\t\t\t<Row mainAlignment=\"flex-start\" wrap=\"nowrap\" width=\"fill\">\n\t\t\t\t\t<Container\n\t\t\t\t\t\twidth=\"fit\"\n\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\tpadding={{ left: 'small', right: 'extrasmall' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text size={size} color={crumbsCount === 1 ? 'text' : 'secondary'}>\n\t\t\t\t\t\t\t{firstCrumb?.label ?? ''}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Container>\n\t\t\t\t\t{/* FIXME the width/maxWidth */}\n\t\t\t\t\t<Row mainAlignment=\"flex-start\" maxWidth=\"70%\">\n\t\t\t\t\t\t<Breadcrumbs crumbs={crumbs} dropdownProps={{ disabled: true }}></Breadcrumbs>\n\t\t\t\t\t</Row>\n\t\t\t\t</Row>\n\t\t\t</Tooltip>\n\t\t);\n\t}\n);\n\nexport { StaticBreadcrumbsProps, StaticBreadcrumbs };\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, ReactElement, useCallback, useState } from 'react';\n\nimport {\n\tAvatar,\n\tCollapse,\n\tContainer,\n\tContainerProps,\n\tgetColor,\n\tIcon,\n\tIconButton,\n\tListItem,\n\tListV2,\n\tPadding,\n\tRow,\n\tText,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport { FOLDERS, useUserAccount } from '@zextras/carbonio-shell-ui';\nimport { noop } from 'lodash';\nimport styled from 'styled-components';\n\nimport { StaticBreadcrumbs } from '../../../../carbonio-ui-commons/components/breadcrumbs/static-breadcrumbs';\nimport { Folder } from '../../../../carbonio-ui-commons/types/folder';\nimport { isRoot } from '../../../../helpers/folders';\nimport { getFolderIconColor, getFolderIconName, getSystemFolderTranslatedName } from '../../utils';\n\nconst FOLDER_ROW_HEIGHT = '2.6rem';\n\nconst FolderAccordionPlaceholder = styled.div`\n\theight: ${FOLDER_ROW_HEIGHT};\n`;\n\nconst RootAccordion = styled(Row)`\n\tcursor: pointer;\n`;\n\nconst CustomContainer = styled(Container)<ContainerProps & { active?: boolean }>`\n\t&:hover {\n\t\tbackground-color: ${({ theme, active }): string =>\n\t\t\tactive ? theme.palette.highlight.active : theme.palette.gray6.hover};\n\t}\n`;\n\nconst CustomListItemHelper = styled(ListItem)``;\n\nexport const CustomListItem = styled(CustomListItemHelper).attrs(\n\t({\n\t\tbackground = 'gray6',\n\t\tactive,\n\t\tactiveBackground = 'highlight',\n\t\tselected,\n\t\tselectedBackground = 'gray5',\n\t\ttheme\n\t}) => ({\n\t\t$baseBackgroundColor: getColor(\n\t\t\t(active && activeBackground) || (selected && selectedBackground) || background,\n\t\t\ttheme\n\t\t),\n\t\t$focusBackgroundColor: getColor(`${(active && activeBackground) || 'gray6'}.focus`, theme)\n\t})\n)``;\n\ntype FlatFoldersAccordionFolderProps = {\n\tfolder: Folder;\n\tselected?: boolean;\n\tonFolderSelected?: (arg: Folder) => void;\n};\n\nexport type FlatFoldersAccordionRootProps = FlatFoldersAccordionFolderProps & {\n\tchildrenFolders: Array<Folder>;\n\tisOpen?: boolean;\n\tonOpenStatusChange?: (isOpen: boolean) => void;\n\tselectedFolderId?: string;\n\tallowRootSelection?: boolean;\n};\n\nexport type FlatFoldersAccordionProps = {\n\troots: Array<Folder>;\n\tselectedFolderId?: string;\n\tonFolderSelected?: (folder: Folder) => void;\n\tallowRootSelection?: boolean;\n};\n\n/**\n * Process the absolute path of the given folder, removing\n * the leading slash\n *\n * @param folder\n * @return the array of the crumbs name of the path\n */\nexport const getFolderAbsPathParts = (folder: Folder): Array<string> => {\n\tif (!folder) {\n\t\treturn [];\n\t}\n\n\t// Exception for root folders\n\tif (isRoot(folder?.id)) {\n\t\treturn [folder.name ?? ''];\n\t}\n\tconst reg = /^\\/?(.*)$/gm;\n\n\tconst matches = reg.exec(folder.absFolderPath ?? '');\n\tif (!matches) {\n\t\treturn [];\n\t}\n\n\treturn matches[1].split('/');\n};\n\nconst FlatFoldersAccordionFolder: FC<FlatFoldersAccordionFolderProps> = ({\n\tfolder,\n\tonFolderSelected,\n\t...rest\n}) => {\n\tconst iconName = getFolderIconName(folder);\n\tconst iconColor = getFolderIconColor(folder);\n\tconst parts = getFolderAbsPathParts(folder);\n\n\t/*\n\t * Create the crumbs array and try to get the translations\n\t * for the first part which usually represent a system folder\n\t * for which a translated name is available\n\t */\n\tconst crumbs = parts.map((part, index) => ({\n\t\tid: `${index} `,\n\t\tlabel: index === 0 ? getSystemFolderTranslatedName({ folderName: part }) : part\n\t}));\n\n\tconst selectionHandler = useCallback(() => {\n\t\tonFolderSelected ? onFolderSelected(folder) : noop;\n\t}, [onFolderSelected, folder]);\n\n\treturn (\n\t\t<Container\n\t\t\twidth=\"fill\"\n\t\t\tmain-alignment=\"flex-start\"\n\t\t\torientation=\"vertical\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\tpadding={{ top: 'small', right: 'small', bottom: 'small', left: 'extralarge' }}\n\t\t\theight={FOLDER_ROW_HEIGHT}\n\t\t\tonClick={selectionHandler}\n\t\t\twrap=\"nowrap\"\n\t\t\t{...rest}\n\t\t>\n\t\t\t<Row mainAlignment=\"flex-start\" wrap=\"nowrap\" width=\"fill\">\n\t\t\t\t<Container width=\"fit\">\n\t\t\t\t\t<Icon color={iconColor} icon={iconName || 'FolderOutline'} size=\"large\" />\n\t\t\t\t</Container>\n\t\t\t\t<StaticBreadcrumbs crumbs={crumbs} size=\"large\" />\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n\nconst FlatFoldersAccordionRoot: FC<FlatFoldersAccordionRootProps> = ({\n\tfolder,\n\tchildrenFolders,\n\tisOpen = false,\n\tonFolderSelected,\n\tonOpenStatusChange,\n\tselectedFolderId,\n\tallowRootSelection\n}) => {\n\tconst [open, setOpen] = useState(isOpen);\n\tconst account = useUserAccount();\n\n\tconst rootLabel = folder.id === FOLDERS.USER_ROOT ? account.name : folder.name;\n\tconst toggleOpen = useCallback(\n\t\t(e: KeyboardEvent | React.SyntheticEvent) => {\n\t\t\te.stopPropagation();\n\t\t\tsetOpen((op) => {\n\t\t\t\tonOpenStatusChange && onOpenStatusChange(!op);\n\t\t\t\treturn !op;\n\t\t\t});\n\t\t},\n\t\t[onOpenStatusChange]\n\t);\n\n\tconst onClick = useCallback(\n\t\t(e: KeyboardEvent | React.SyntheticEvent) => {\n\t\t\te.stopPropagation();\n\t\t\tif (!open) {\n\t\t\t\tsetOpen(true);\n\t\t\t}\n\n\t\t\tif (!allowRootSelection) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tonFolderSelected && onFolderSelected(folder);\n\t\t},\n\t\t[open, allowRootSelection, onFolderSelected, folder]\n\t);\n\treturn (\n\t\t<RootAccordion width=\"fill\" data-testid={`folder-accordion-root-${folder.id}`}>\n\t\t\t<CustomContainer\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\twidth=\"fill\"\n\t\t\t\theight=\"fit\"\n\t\t\t\tmainAlignment=\"space-between\"\n\t\t\t\tpadding={'small'}\n\t\t\t\tonClick={onClick}\n\t\t\t\tbackground={selectedFolderId === folder.id ? 'highlight.active' : 'gray6'}\n\t\t\t\tactive={selectedFolderId === folder.id}\n\t\t\t>\n\t\t\t\t<Container orientation=\"horizontal\" width=\"fill\" mainAlignment=\"flex-start\">\n\t\t\t\t\t<Padding horizontal=\"small\">\n\t\t\t\t\t\t<Avatar label={rootLabel} size=\"medium\" />\n\t\t\t\t\t</Padding>\n\t\t\t\t\t<Tooltip label={rootLabel} placement=\"right\" maxWidth=\"100%\">\n\t\t\t\t\t\t<Text>{rootLabel}</Text>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t</Container>\n\n\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tcustomSize={{ iconSize: 'large', paddingSize: 0 }}\n\t\t\t\t\t\tonClick={toggleOpen}\n\t\t\t\t\t\ticon={open ? 'ChevronUp' : 'ChevronDown'}\n\t\t\t\t\t/>\n\t\t\t\t</Padding>\n\t\t\t</CustomContainer>\n\t\t\t<Collapse crossSize=\"100%\" orientation=\"vertical\" open={open} disableTransition={false}>\n\t\t\t\t<ListV2>\n\t\t\t\t\t{childrenFolders.map<ReactElement>((childFolder) => (\n\t\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\t\tkey={childFolder.id}\n\t\t\t\t\t\t\tselected={selectedFolderId === childFolder.id}\n\t\t\t\t\t\t\tactive={selectedFolderId === childFolder.id}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{(visible: boolean): ReactElement =>\n\t\t\t\t\t\t\t\tvisible ? (\n\t\t\t\t\t\t\t\t\t<FlatFoldersAccordionFolder\n\t\t\t\t\t\t\t\t\t\tdata-testid={`folder-accordion-item-${childFolder.id}`}\n\t\t\t\t\t\t\t\t\t\tfolder={childFolder}\n\t\t\t\t\t\t\t\t\t\tonFolderSelected={onFolderSelected}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<FolderAccordionPlaceholder />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</CustomListItem>\n\t\t\t\t\t))}\n\t\t\t\t</ListV2>\n\t\t\t</Collapse>\n\t\t</RootAccordion>\n\t);\n};\n\nexport const FlatFoldersAccordion: FC<FlatFoldersAccordionProps> = ({\n\troots,\n\tonFolderSelected,\n\tselectedFolderId,\n\tallowRootSelection\n}) => (\n\t<Container orientation={'vertical'} style={{ overflowY: 'auto' }}>\n\t\t{roots.map<ReactElement>((root, index) => (\n\t\t\t<FlatFoldersAccordionRoot\n\t\t\t\tkey={root.id}\n\t\t\t\tfolder={root}\n\t\t\t\tchildrenFolders={root.children}\n\t\t\t\tisOpen\n\t\t\t\tonFolderSelected={onFolderSelected}\n\t\t\t\tselectedFolderId={selectedFolderId}\n\t\t\t\tallowRootSelection={allowRootSelection}\n\t\t\t/>\n\t\t))}\n\t</Container>\n);\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ChangeEvent, ReactElement, useMemo, useState } from 'react';\n\nimport { Button, Container, Input, Padding } from '@zextras/carbonio-design-system';\nimport { FOLDERS, t } from '@zextras/carbonio-shell-ui';\nimport { filter, startsWith } from 'lodash';\nimport styled from 'styled-components';\n\nimport { FlatFoldersAccordion } from './flat-folders-accordion/flat-folders-accordion';\nimport { getFolder, useRootsArray } from '../../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport type { Folder } from '../../../carbonio-ui-commons/types/folder';\nimport { isRoot, isSpam, isTrash, isTrashed } from '../../../helpers/folders';\nimport { getSortCriteria, sortFolders } from '../../../hooks/use-folders';\nimport { getSystemFolderTranslatedName } from '../utils';\n\nconst ContainerEl = styled(Container)`\n\toverflow-y: auto;\n\tdisplay: block;\n`;\n\nexport type FolderSelectorProps = {\n\tinputLabel?: string;\n\tonNewFolderClick?: () => void;\n\tselectedFolderId?: string;\n\tonFolderSelected: (arg: Folder) => void;\n\tshowSharedAccounts: boolean;\n\tshowTrashFolder: boolean;\n\tshowSpamFolder: boolean;\n\tallowRootSelection: boolean;\n\tallowFolderCreation: boolean;\n};\n\nconst flattenFolders = (\n\tfolders: Array<Folder>,\n\toptions?: {\n\t\tshowTrashFolder?: boolean;\n\t\tshowSpamFolder?: boolean;\n\t}\n): Array<Folder> => {\n\tconst result: Array<Folder> = [];\n\tconst sortedFolders = sortFolders({ children: folders, sortFunction: getSortCriteria });\n\n\tsortedFolders.forEach((folder) => {\n\t\tif (!options?.showTrashFolder && (isTrash(folder.id) || isTrashed({ folder }))) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!options?.showSpamFolder && isSpam(folder.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\tresult.push({\n\t\t\t...folder,\n\t\t\tname: getSystemFolderTranslatedName({ folderName: folder.name }),\n\t\t\tchildren: []\n\t\t});\n\t\tfolder.children && result.push(...flattenFolders(folder.children, options));\n\t});\n\n\treturn result;\n};\n\nconst flattenRootsFolders = (\n\troots: Array<Folder>,\n\toptions?: {\n\t\tshowTrashFolder?: boolean;\n\t\tshowSpamFolder?: boolean;\n\t}\n): Array<Folder> =>\n\troots.map((root) => ({\n\t\t...root,\n\t\tchildren: flattenFolders(root.children, options)\n\t}));\n\nfunction filterRootChildren(folders: Array<Folder>, nameCriteria: string): Array<Folder> {\n\treturn filter(folders, (folder) => {\n\t\tconst folderName = folder.name?.toLowerCase();\n\t\treturn startsWith(folderName, nameCriteria.toLowerCase());\n\t});\n}\n\nfunction filterRoots(roots: Array<Folder>, nameCriteria: string): Array<Folder> {\n\treturn roots.reduce((acc, root) => {\n\t\tif (isRoot(root.id)) {\n\t\t\tacc.push({\n\t\t\t\t...root,\n\t\t\t\tchildren: root.children ? filterRootChildren(root.children, nameCriteria) : []\n\t\t\t});\n\t\t}\n\t\treturn acc.filter((accItem) => !!accItem.children?.length);\n\t}, [] as Array<Folder>);\n}\n\nexport const FolderSelector = ({\n\tinputLabel,\n\tonNewFolderClick,\n\tselectedFolderId,\n\tonFolderSelected,\n\tallowRootSelection,\n\tallowFolderCreation,\n\tshowTrashFolder,\n\tshowSpamFolder,\n\tshowSharedAccounts\n}: FolderSelectorProps): ReactElement => {\n\tconst [inputValue, setInputValue] = useState('');\n\tconst selectedFolder = selectedFolderId && getFolder(selectedFolderId);\n\tconst roots = useRootsArray();\n\tconst filteredAccountsRoots = useMemo<Array<Folder>>(\n\t\t() => (showSharedAccounts ? roots : roots.filter((root) => root.id === FOLDERS.USER_ROOT)),\n\t\t[roots, showSharedAccounts]\n\t);\n\tconst flattenRoots = useMemo(\n\t\t() =>\n\t\t\tflattenRootsFolders(filteredAccountsRoots, {\n\t\t\t\tshowTrashFolder,\n\t\t\t\tshowSpamFolder\n\t\t\t}),\n\t\t[filteredAccountsRoots, showSpamFolder, showTrashFolder]\n\t);\n\tconst filteredRoots = filterRoots(flattenRoots, inputValue);\n\tconst inputName = selectedFolder ? selectedFolder.name : '';\n\treturn (\n\t\t<>\n\t\t\t<Input\n\t\t\t\tdata-testid={'folder-name-filter'}\n\t\t\t\tinputName={inputName}\n\t\t\t\tlabel={inputLabel ?? t('label.filter_folders', 'Filter folders')}\n\t\t\t\tbackgroundColor=\"gray5\"\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={(e: ChangeEvent<HTMLInputElement>): void => setInputValue(e.target.value)}\n\t\t\t/>\n\t\t\t<Padding vertical=\"medium\" />\n\t\t\t<ContainerEl\n\t\t\t\torientation=\"vertical\"\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\tminHeight=\"30vh\"\n\t\t\t\tmaxHeight=\"60vh\"\n\t\t\t>\n\t\t\t\t<FlatFoldersAccordion\n\t\t\t\t\troots={filteredRoots}\n\t\t\t\t\tonFolderSelected={onFolderSelected}\n\t\t\t\t\tselectedFolderId={selectedFolderId}\n\t\t\t\t\tallowRootSelection={allowRootSelection}\n\t\t\t\t/>\n\t\t\t</ContainerEl>\n\t\t\t{onNewFolderClick && (\n\t\t\t\t<Container\n\t\t\t\t\tpadding={{ top: 'medium', bottom: 'medium' }}\n\t\t\t\t\tmainAlignment=\"center\"\n\t\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\t>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"ghost\"\n\t\t\t\t\t\tlabel={t('label.new_folder', 'New Folder')}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={onNewFolderClick}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t)}\n\t\t</>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { type AccordionItemType } from '@zextras/carbonio-design-system';\nimport { FOLDERS, ROOT_NAME, ZIMBRA_STANDARD_COLORS, t } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy, reduce } from 'lodash';\n\nimport { isSystemFolder } from '../../carbonio-ui-commons/helpers/folders';\nimport {\n\ttype AccordionFolder,\n\ttype Folder,\n\ttype LinkFolderFields\n} from '../../carbonio-ui-commons/types/folder';\nimport { getFolderIdParts } from '../../helpers/folders';\n\nexport const normalizeFolder = (\n\tfolder: Folder & Partial<LinkFolderFields>\n): Partial<Folder & Partial<LinkFolderFields>> =>\n\tomitBy(\n\t\t{\n\t\t\tid: folder.id,\n\t\t\tuuid: folder.uuid,\n\t\t\tcolor: folder.color,\n\t\t\tname: folder.name,\n\t\t\tpath: folder.absFolderPath,\n\t\t\tparent: folder.l,\n\t\t\tparentUuid: folder.luuid,\n\t\t\titemsCount: folder.n,\n\t\t\tsize: folder.s,\n\t\t\tunreadCount: folder.u,\n\t\t\tsynced: true,\n\t\t\trgb: folder.rgb,\n\t\t\towner: folder.owner,\n\t\t\trid: folder.rid,\n\t\t\tzid: folder.zid,\n\t\t\tacl: folder.acl,\n\t\t\tperm: folder.perm,\n\t\t\tisSharedFolder: !!folder.owner,\n\t\t\tretentionPolicy: folder.retentionPolicy,\n\t\t\tview: folder.view\n\t\t},\n\t\tisNil\n\t);\n\nexport const extractFolders = (accordion: Array<any>, acc = {}): any =>\n\treduce(\n\t\taccordion,\n\t\t(acc2, folder) => {\n\t\t\tif (folder.folder) {\n\t\t\t\treturn (folder.view === 'message' &&\n\t\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t[folder.id]: normalizeFolder(folder),\n\t\t\t\t\t\t\t...extractFolders(folder.folder, acc2)\n\t\t\t\t\t\t}\n\t\t\t\t\t: { ...acc2, ...extractFolders(folder.folder, acc2) };\n\t\t\t}\n\t\t\treturn (folder.view === 'message' &&\n\t\t\t\tfolder.id !== FOLDERS.IM_LOGS &&\n\t\t\t\tfolder.id !== FOLDERS.USER_ROOT) ||\n\t\t\t\tfolder.id === FOLDERS.TRASH\n\t\t\t\t? {\n\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t[folder.id]: normalizeFolder(folder)\n\t\t\t\t\t}\n\t\t\t\t: acc2;\n\t\t},\n\t\tacc\n\t);\n\nexport const capitalise = (word: string): string => {\n\tconst asciiRef = word?.charCodeAt(0);\n\tconst newAsciiRef = asciiRef - 32;\n\tconst newChar = String.fromCharCode(newAsciiRef);\n\treturn word ? newChar + word.substring(1) : '';\n};\n\nexport const getFolderIconColorForAccordionFolder = (f: AccordionFolder): string => {\n\tif (f?.folder?.color) {\n\t\treturn f.folder.color < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[f.folder.color].hex\n\t\t\t: f?.folder.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconColor = (f: Folder | AccordionItemType): string => {\n\tif ('color' in f && f?.color) {\n\t\treturn Number(f.color) < 10\n\t\t\t? ZIMBRA_STANDARD_COLORS[Number(f.color)].hex\n\t\t\t: f?.rgb ?? ZIMBRA_STANDARD_COLORS[0].hex;\n\t}\n\treturn ZIMBRA_STANDARD_COLORS[0].hex;\n};\n\nexport const getFolderIconName = (folder: Folder | AccordionItemType): string | null => {\n\tconst { id } = getFolderIdParts(folder.id);\n\tif (\n\t\tid === FOLDERS.USER_ROOT ||\n\t\t('isLink' in folder && folder.isLink && folder.oname === ROOT_NAME)\n\t) {\n\t\treturn null;\n\t}\n\n\tif (id && isSystemFolder(id)) {\n\t\tswitch (id) {\n\t\t\tcase FOLDERS.INBOX:\n\t\t\t\treturn 'InboxOutline';\n\t\t\tcase FOLDERS.DRAFTS:\n\t\t\t\treturn 'FileOutline';\n\t\t\tcase FOLDERS.SENT:\n\t\t\t\treturn 'PaperPlaneOutline';\n\t\t\tcase FOLDERS.SPAM:\n\t\t\t\treturn 'SlashOutline';\n\t\t\tcase FOLDERS.TRASH:\n\t\t\t\treturn 'Trash2Outline';\n\t\t\tdefault:\n\t\t\t\treturn 'FolderOutline';\n\t\t}\n\t}\n\treturn 'FolderOutline';\n};\n\nexport const translatedSystemFolders = (): Array<string> => [\n\tt('folders.inbox', 'Inbox'),\n\tt('folders.sent', 'Sent'),\n\tt('folders.drafts', 'Drafts'),\n\tt('folders.trash', 'Trash'),\n\tt('folders.spam', 'Spam'),\n\tt('folders.junk', 'Junk')\n];\n\ntype GetSystemFolderProps = {\n\tfolderId?: string;\n\tfolderName: string;\n};\n\nexport const getSystemFolderTranslatedName = ({ folderName }: GetSystemFolderProps): string => {\n\tif (folderName) {\n\t\tswitch (folderName) {\n\t\t\tcase 'Inbox':\n\t\t\t\treturn t('folders.inbox', 'Inbox');\n\t\t\tcase 'Sent':\n\t\t\t\treturn t('folders.sent', 'Sent');\n\t\t\tcase 'Drafts':\n\t\t\t\treturn t('folders.drafts', 'Drafts');\n\t\t\tcase 'Trash':\n\t\t\t\treturn t('folders.trash', 'Trash');\n\t\t\tcase 'Spam':\n\t\t\t\treturn t('folders.spam', 'Spam');\n\t\t\tcase 'Junk':\n\t\t\t\treturn t('folders.junk', 'Junk');\n\t\t\tdefault:\n\t\t\t\treturn folderName;\n\t\t}\n\t}\n\treturn folderName;\n};\n\nexport const getFolderTranslatedName = ({ folderId, folderName }: GetSystemFolderProps): string => {\n\tconst { id } = getFolderIdParts(folderId ?? '');\n\tif (id && isSystemFolder(id)) {\n\t\treturn getSystemFolderTranslatedName({ folderName });\n\t}\n\n\treturn folderName;\n};\n"],"names":["ModalFooter","mainAlignment","crossAlignment","onConfirm","label","secondaryAction","secondaryLabel","primaryBtnType","secondaryBtnType","disabled","secondaryDisabled","background","secondarybackground","color","secondaryColor","size","showDivider","tooltip","secondaryTooltip","paddingTop","additionalAction","additionalBtnType","additionalColor","additionalLabel","primaryButtonIcon","t","useTranslation","cancelLabel","useMemo","React","Container","padding","top","bottom","orientation","height","Divider","width","Button","type","onClick","Padding","horizontal","right","vertical","Tooltip","placement","maxWidth","backgroundColor","icon","iconPlacement","ModalHeader","title","onClose","showCloseIcon","Row","takeAvailableSpace","Text","weight","IconButton","style","margin","FOLDERID_REGEX","getFolderIdParts","folderId","result","zid","id","match","parts","exec","isSystemFolder","Object","values","FOLDERS","includes","isTrash","isA","folderType","TRASH","getSortCriteria","folder","LAST_SYSTEM_FOLDER_POSITION","parseInt","name","toLowerCase","sortFolders","children","sortFunction","sortBy","map","useFolders","roots","useRootsArray","useUiUtilities","createModal","useContext","ModalManagerContext","createSnackbar","useSnackbar","createGlobalModal","useGlobalModal","Square","styled","withConfig","displayName","componentId","theme","palette","gray2","regular","ColorContainer","TextUpperCase","StaticBreadcrumbs","crumbs","collapserProps","dropdownProps","tooltipLabel","rest","ref","crumbsCount","length","reduce","crumb","firstCrumb","shift","wrap","left","Breadcrumbs","FOLDER_ROW_HEIGHT","FolderAccordionPlaceholder","RootAccordion","CustomContainer","active","highlight","gray6","hover","CustomListItemHelper","ListItem","CustomListItem","attrs","activeBackground","selected","selectedBackground","$baseBackgroundColor","getColor","$focusBackgroundColor","FlatFoldersAccordionFolder","onFolderSelected","iconName","getFolderIconName","iconColor","getFolderIconColor","isRoot","matches","absFolderPath","split","getFolderAbsPathParts","part","index","getSystemFolderTranslatedName","folderName","selectionHandler","useCallback","noop","_extends","Icon","FlatFoldersAccordionRoot","childrenFolders","isOpen","onOpenStatusChange","selectedFolderId","allowRootSelection","open","setOpen","useState","account","useUserAccount","rootLabel","USER_ROOT","toggleOpen","e","stopPropagation","op","Avatar","customSize","iconSize","paddingSize","Collapse","crossSize","disableTransition","ListV2","childFolder","key","visible","FlatFoldersAccordion","overflowY","root","ContainerEl","flattenFolders","folders","options","forEach","showTrashFolder","isTrashed","showSpamFolder","isSpam","push","filterRootChildren","nameCriteria","filter","startsWith","FolderSelector","inputLabel","onNewFolderClick","allowFolderCreation","showSharedAccounts","inputValue","setInputValue","selectedFolder","getFolder","filteredAccountsRoots","flattenRoots","flattenRootsFolders","filteredRoots","acc","accItem","filterRoots","inputName","Input","value","onChange","target","minHeight","maxHeight","capitalise","word","asciiRef","charCodeAt","newAsciiRef","newChar","String","fromCharCode","substring","f","Number","ZIMBRA_STANDARD_COLORS","hex","rgb","isLink","oname","ROOT_NAME","INBOX","DRAFTS","SENT","SPAM","translatedSystemFolders","getFolderTranslatedName"],"sourceRoot":""}