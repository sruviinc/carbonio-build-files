{"version":3,"file":"778.6f77244a.chunk.js","mappings":"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","sources":["webpack://carbonio-mails-ui/./src/carbonio-ui-commons/components/list/list-item.tsx","webpack://carbonio-mails-ui/./src/carbonio-ui-commons/components/list/list.tsx","webpack://carbonio-mails-ui/./src/helpers/sorting.ts","webpack://carbonio-mails-ui/./src/hooks/use-message-actions.tsx","webpack://carbonio-mails-ui/./src/hooks/use-selection.tsx","webpack://carbonio-mails-ui/./src/ui-actions/conversation-actions.tsx","webpack://carbonio-mails-ui/./src/ui-actions/multiple-selection-actions-panel.tsx","webpack://carbonio-mails-ui/./src/ui-actions/get-msg-conv-actions-functions.ts","webpack://carbonio-mails-ui/./src/ui-actions/use-msg-conv-actions.ts","webpack://carbonio-mails-ui/./src/views/app/detail-panel/conversation-message-preview.tsx","webpack://carbonio-mails-ui/./src/views/app/detail-panel/conversation-preview-panel.tsx","webpack://carbonio-mails-ui/./src/views/app/detail-panel/conversation-preview-panel-container.tsx","webpack://carbonio-mails-ui/./src/views/app/detail-panel/message-preview-panel-container.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/conversations/conversation-list-component.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/conversations/conversation-messages-list.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/row-info.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/conversations/conversation-list-item.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/conversations/utils.ts","webpack://carbonio-mails-ui/./src/views/app/folder-panel/conversations/conversation-list-item-component.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/messages/message-list-component.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/messages/message-list-item-component.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/messages/message-list-item.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/sorting-component.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/breadcrumbs.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/drag-item-wrapper.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/hover-bar-container.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/hover-container.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/tooltip-wrapper.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/item-avatar.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/list-item-actions-wrapper.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/sender-name.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/parts/utils/utils.ts","webpack://carbonio-mails-ui/./src/views/search/shimmer-list.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { getColor, ListItem } from '@zextras/carbonio-design-system';\nimport styled from 'styled-components';\n\nconst CustomListItemHelper = styled(ListItem)``;\n\nexport const CustomListItem = styled(CustomListItemHelper).attrs(\n\t({\n\t\tbackground = 'gray6',\n\t\tactive,\n\t\tactiveBackground = 'highlight',\n\t\tselected,\n\t\tselectedBackground = 'gray5',\n\t\ttheme\n\t}) => ({\n\t\t$baseBackgroundColor: getColor(\n\t\t\t(active && activeBackground) || (selected && selectedBackground) || background,\n\t\t\ttheme\n\t\t),\n\t\t$focusBackgroundColor: getColor(`${(active && activeBackground) || 'gray6'}.focus`, theme)\n\t})\n)`\n\ttransition: none;\n\t&:focus,\n\t&:active {\n\t\tbackground: ${({ $focusBackgroundColor }): string => $focusBackgroundColor};\n\t\t${CustomListItemHelper} {\n\t\t\tbackground: ${({ $focusBackgroundColor }): string => $focusBackgroundColor};\n\t\t}\n\t}\n\n\t&:hover {\n\t\tbackground: ${({ $baseBackgroundColor }): string => $baseBackgroundColor};\n\t\t&:focus,\n\t\t&:active {\n\t\t\tbackground: ${({ $focusBackgroundColor }): string => $focusBackgroundColor};\n\t\t}\n\t}\n`;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ListV2 } from '@zextras/carbonio-design-system';\nimport styled from 'styled-components';\n\nexport const CustomList = styled(ListV2)`\n\tpadding-bottom: 0.25rem;\n\tmin-height: 0;\n`;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { editSettings } from '@zextras/carbonio-shell-ui';\nimport { find } from 'lodash';\n\nimport { SORTING_OPTIONS } from '../constants';\nimport { FolderSortOrder } from '../types';\n\nconst fallbackSortOrder = {\n\tsortType: 'date',\n\tsortDirection: 'Desc' as 'Asc' | 'Desc',\n\tsortOrder: 'dateDesc',\n\tremainingFoldersSortOrder: '',\n\tremainingSortOptions: ''\n};\n\n/**\n * Returns sortType, sortDirection and sortOrder for the given folder\n *\n * @param folderId\n * @param prefSortOrder\n *\n * returns an object containing\n * sortType: the sort type for the given folder,\n * sortDirection: the sort direction for the given folder,\n * sortOrder: the concatenation of sortType and sortDirection,\n * remainingFoldersSortOrder: the sort order of the other folders,\n * remainingSortOptions: the sort order of the other options not related to mails\n */\nexport function parseMessageSortingOptions(\n\tfolderId?: string,\n\tprefSortOrder?: string\n): FolderSortOrder {\n\tif (!prefSortOrder || !folderId) {\n\t\treturn fallbackSortOrder;\n\t}\n\tconst splitString = ',BDLV';\n\tconst sortOrderString = prefSortOrder.split(splitString)[0];\n\tconst sortingFolders = sortOrderString.split(',');\n\tconst sortOrderOfFolder = find(\n\t\tsortingFolders,\n\t\t(item) => item.substring(0, item.lastIndexOf(':')) === folderId\n\t);\n\n\tconst remainingSortOptions = splitString.concat(prefSortOrder.split(splitString)[1]) ?? '';\n\tconst remainingFoldersSortOrder =\n\t\tsortingFolders\n\t\t\t.filter((item) => item.substring(0, item.lastIndexOf(':')) !== folderId)\n\t\t\t.join(',') ?? '';\n\tif (!!sortOrderOfFolder && !sortOrderOfFolder.includes(SORTING_OPTIONS.size.value)) {\n\t\tconst sortOrder = sortOrderOfFolder.substring(sortOrderOfFolder.lastIndexOf(':') + 1);\n\t\tconst sortDirection = sortOrder.includes('Desc') ? 'Desc' : 'Asc';\n\t\tconst sortType = sortOrder.split(/Asc|Desc/i)[0];\n\n\t\treturn { sortType, sortDirection, sortOrder, remainingFoldersSortOrder, remainingSortOptions };\n\t}\n\treturn fallbackSortOrder;\n}\n\nfunction modifySettingString(\n\tinputStringA: string,\n\tinputStringB: string,\n\tfolderId?: string\n): string {\n\tconst replaceStr = new RegExp(`${folderId}:(.*?)(Asc|Desc)`);\n\treturn replaceStr.test(inputStringA)\n\t\t? inputStringA.replace(replaceStr, `${inputStringB}`)\n\t\t: `${inputStringA},${inputStringB}`;\n}\n\nexport function updateSortingSettings({\n\tprefSortOrder,\n\tsortingTypeValue,\n\tsortingDirection,\n\tfolderId\n}: {\n\tprefSortOrder?: string;\n\tsortingTypeValue: string;\n\tsortingDirection: string;\n\tfolderId?: string;\n}): void {\n\tif (!prefSortOrder) {\n\t\tconst changes = {\n\t\t\tprefs: {\n\t\t\t\tzimbraPrefSortOrder: `${folderId}:${sortingTypeValue}${sortingDirection},BDLV`\n\t\t\t}\n\t\t};\n\t\teditSettings(changes);\n\t\treturn;\n\t}\n\tconst secondString = prefSortOrder.substring(prefSortOrder.indexOf(',BDLV'));\n\tconst sortingString = `${folderId}:${sortingTypeValue}${sortingDirection}`;\n\tconst splitString = ',BDLV';\n\tconst sortOrderString = prefSortOrder.split(splitString)[0];\n\tconst replacedString = modifySettingString(sortOrderString, sortingString, folderId);\n\tconst finalString = replacedString + secondString;\n\n\tconst changes = {\n\t\tprefs: {\n\t\t\tzimbraPrefSortOrder: finalString\n\t\t}\n\t};\n\teditSettings(changes);\n}\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useCallback, useMemo } from 'react';\n\nimport { Dispatch } from '@reduxjs/toolkit';\nimport {\n\tFOLDERS,\n\tTags,\n\tuseAppContext,\n\tuseIntegratedFunction,\n\tuseTags\n} from '@zextras/carbonio-shell-ui';\nimport { includes } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { useAppDispatch } from './redux';\nimport { useSelection } from './use-selection';\nimport { EXTRA_WINDOW_ACTION_ID } from '../constants';\nimport { getFolderIdParts } from '../helpers/folders';\nimport type { AppContext, MailMessage, MessageAction } from '../types';\nimport {\n\tuseCreateAppointment,\n\tdownloadEml,\n\teditAsNewMsg,\n\tforwardMsg,\n\tpreviewMessageOnSeparatedWindow,\n\tprintMsg,\n\treplyAllMsg,\n\treplyMsg,\n\tsendDraft,\n\tsetMsgFlag,\n\tsetMsgRead,\n\tshowOriginalMsg,\n\tuseDeleteMessagePermanently,\n\tuseDeleteMsg,\n\tuseEditDraft,\n\tuseMoveMessageToFolder,\n\tuseMoveMsgToTrash,\n\tuseRedirectMsg,\n\tuseSetMsgAsSpam\n} from '../ui-actions/message-actions';\nimport { applyTag } from '../ui-actions/tag-actions';\nimport { useGlobalExtraWindowManager } from '../views/app/extra-windows/global-extra-window-manager';\nimport { useExtraWindow } from '../views/app/extra-windows/use-extra-window';\n\ntype ActionGeneratorProps = {\n\tisInsideExtraWindow: boolean;\n\tmessage: MailMessage;\n\tdispatch: Dispatch;\n\tfolderId: string;\n\ttags: Tags;\n};\n\nconst useDraftActions = (): (({\n\tisInsideExtraWindow,\n\tmessage,\n\tdispatch,\n\tdeselectAll,\n\tfolderId,\n\tisAlone,\n\ttags\n}: ActionGeneratorProps & {\n\tdeselectAll: () => void;\n\tisAlone: boolean;\n}) => Array<MessageAction>) => {\n\tconst editDraft = useEditDraft();\n\tconst moveMsgToTrash = useMoveMsgToTrash();\n\n\treturn useCallback(\n\t\t({\n\t\t\tisInsideExtraWindow,\n\t\t\tmessage,\n\t\t\tdispatch,\n\t\t\tdeselectAll,\n\t\t\tfolderId,\n\t\t\tisAlone,\n\t\t\ttags\n\t\t}: ActionGeneratorProps & {\n\t\t\tdeselectAll: () => void;\n\t\t\tisAlone: boolean;\n\t\t}): Array<MessageAction> => {\n\t\t\tconst actions: Array<MessageAction> = [];\n\t\t\t!isInsideExtraWindow && actions.push(sendDraft({ message, dispatch }));\n\t\t\t!isInsideExtraWindow && actions.push(editDraft({ id: message.id, message }));\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(\n\t\t\t\t\tmoveMsgToTrash({\n\t\t\t\t\t\tids: [message.id],\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tdeselectAll,\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\tconversationId: message?.conversation,\n\t\t\t\t\t\tcloseEditor: isAlone\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\tactions.push(setMsgFlag({ ids: [message.id], value: message.flagged, dispatch }));\n\t\t\tactions.push(applyTag({ tags, conversation: message, isMessage: true }));\n\t\t\treturn actions;\n\t\t},\n\t\t[editDraft, moveMsgToTrash]\n\t);\n};\n\nconst useTrashActions = (): (({\n\tisInsideExtraWindow,\n\tmessage,\n\tdispatch,\n\tdeselectAll,\n\tfolderId,\n\ttags\n}: ActionGeneratorProps & { deselectAll: () => void }) => Array<MessageAction>) => {\n\tconst moveMessageToFolder = useMoveMessageToFolder();\n\tconst deleteMessagePermanently = useDeleteMessagePermanently();\n\n\treturn useCallback(\n\t\t({\n\t\t\tisInsideExtraWindow,\n\t\t\tmessage,\n\t\t\tdispatch,\n\t\t\tdeselectAll,\n\t\t\tfolderId,\n\t\t\ttags\n\t\t}: ActionGeneratorProps & { deselectAll: () => void }): Array<MessageAction> => {\n\t\t\tconst actions: Array<MessageAction> = [];\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(\n\t\t\t\t\tmoveMessageToFolder({\n\t\t\t\t\t\tid: [message.id],\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tisRestore: true,\n\t\t\t\t\t\tdeselectAll\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(deleteMessagePermanently({ ids: [message.id], dispatch, deselectAll }));\n\t\t\tactions.push(applyTag({ tags, conversation: message, isMessage: true }));\n\t\t\treturn actions;\n\t\t},\n\t\t[deleteMessagePermanently, moveMessageToFolder]\n\t);\n};\n\nconst useSpamActions = (): (({\n\tisInsideExtraWindow,\n\tmessage,\n\tdispatch,\n\ttags,\n\tfolderId\n}: ActionGeneratorProps) => Array<MessageAction>) => {\n\tconst deleteMsg = useDeleteMsg();\n\tconst setMsgAsSpam = useSetMsgAsSpam();\n\n\treturn useCallback(\n\t\t({\n\t\t\tisInsideExtraWindow,\n\t\t\tmessage,\n\t\t\tdispatch,\n\t\t\ttags,\n\t\t\tfolderId\n\t\t}: ActionGeneratorProps): Array<MessageAction> => {\n\t\t\tconst actions: Array<MessageAction> = [];\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(\n\t\t\t\t\tdeleteMsg({\n\t\t\t\t\t\tids: [message.id],\n\t\t\t\t\t\tdispatch\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(setMsgAsSpam({ ids: [message.id], value: true, dispatch, folderId }));\n\t\t\tactions.push(printMsg({ message }));\n\t\t\tactions.push(showOriginalMsg({ id: message.id }));\n\t\t\tactions.push(applyTag({ tags, conversation: message, isMessage: true }));\n\t\t\treturn actions;\n\t\t},\n\t\t[deleteMsg, setMsgAsSpam]\n\t);\n};\n\nconst useDefaultActions = (): (({\n\tisInsideExtraWindow,\n\tmessage,\n\tdispatch,\n\tdeselectAll,\n\tfolderId,\n\tisAlone,\n\ttags,\n\tisAvailable,\n\topenAppointmentComposer\n}: ActionGeneratorProps & {\n\topenAppointmentComposer: ReturnType<typeof useIntegratedFunction>[0];\n\tdeselectAll: () => void;\n\tisAlone: boolean;\n\tisAvailable: boolean;\n}) => Array<MessageAction>) => {\n\tconst moveMsgToTrash = useMoveMsgToTrash();\n\tconst moveMessageToFolder = useMoveMessageToFolder();\n\tconst redirectMsg = useRedirectMsg();\n\tconst setMsgAsSpam = useSetMsgAsSpam();\n\tconst createAppointment = useCreateAppointment();\n\n\treturn useCallback(\n\t\t({\n\t\t\tisInsideExtraWindow,\n\t\t\tmessage,\n\t\t\tdispatch,\n\t\t\tdeselectAll,\n\t\t\tfolderId,\n\t\t\tisAlone,\n\t\t\ttags,\n\t\t\tisAvailable,\n\t\t\topenAppointmentComposer\n\t\t}: ActionGeneratorProps & {\n\t\t\topenAppointmentComposer: ReturnType<typeof useIntegratedFunction>[0];\n\t\t\tdeselectAll: () => void;\n\t\t\tisAlone: boolean;\n\t\t\tisAvailable: boolean;\n\t\t}): Array<MessageAction> => {\n\t\t\tconst actions: Array<MessageAction> = [];\n\t\t\t!isInsideExtraWindow && actions.push(replyMsg({ id: message.id }));\n\t\t\t!isInsideExtraWindow && actions.push(replyAllMsg({ id: message.id }));\n\t\t\t!isInsideExtraWindow && actions.push(forwardMsg({ id: message.id }));\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(\n\t\t\t\t\tmoveMsgToTrash({\n\t\t\t\t\t\tids: [message.id],\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tdeselectAll,\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\tconversationId: message?.conversation,\n\t\t\t\t\t\tcloseEditor: isAlone\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\tactions.push(\n\t\t\t\tsetMsgRead({\n\t\t\t\t\tids: [message.id],\n\t\t\t\t\tvalue: message.read,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tfolderId,\n\t\t\t\t\tshouldReplaceHistory: true,\n\t\t\t\t\tdeselectAll\n\t\t\t\t})\n\t\t\t);\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(\n\t\t\t\t\tmoveMessageToFolder({\n\t\t\t\t\t\tid: [message.id],\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tisRestore: false,\n\t\t\t\t\t\tdeselectAll\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\tactions.push(applyTag({ tags, conversation: message, isMessage: true }));\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tisAvailable &&\n\t\t\t\tactions.push(createAppointment({ item: message, openAppointmentComposer }));\n\t\t\tactions.push(printMsg({ message }));\n\t\t\tactions.push(setMsgFlag({ ids: [message.id], value: message.flagged, dispatch }));\n\t\t\t!isInsideExtraWindow && actions.push(redirectMsg({ id: message.id }));\n\t\t\t!isInsideExtraWindow && actions.push(editAsNewMsg({ id: message.id }));\n\t\t\t!isInsideExtraWindow &&\n\t\t\t\tactions.push(setMsgAsSpam({ ids: [message.id], value: false, dispatch, folderId }));\n\t\t\tactions.push(showOriginalMsg({ id: message.id }));\n\t\t\tactions.push(downloadEml({ id: message.id }));\n\n\t\t\treturn actions;\n\t\t},\n\t\t[createAppointment, moveMessageToFolder, moveMsgToTrash, redirectMsg, setMsgAsSpam]\n\t);\n};\n\n/*\n * TOFIX this hook is used only by the displayer. It should be aligned/merged with\n * \tthe others functions that are providing primary and secondary actions for a message\n *\n * TOFIX the folder id comparisons are weak: they're not working for shared folders nor for subfolders.\n *  Consider using/creating common utility functions\n */\nexport const useMessageActions = (\n\tmessage: MailMessage | undefined,\n\tisAlone = false\n): Array<MessageAction> => {\n\tconst { folderId }: { folderId: string } = useParams();\n\tconst dispatch = useAppDispatch();\n\tconst { setCount } = useAppContext<AppContext>();\n\tconst { deselectAll } = useSelection({ currentFolderId: folderId, setCount, count: 0 });\n\tconst { isInsideExtraWindow } = useExtraWindow();\n\tconst { createWindow } = useGlobalExtraWindowManager();\n\tconst [openAppointmentComposer, isAvailable] = useIntegratedFunction('create_appointment');\n\tconst getDraftsActions = useDraftActions();\n\tconst getDefaultActions = useDefaultActions();\n\tconst getTrashActions = useTrashActions();\n\tconst getSpamActions = useSpamActions();\n\tconst systemFolders = useMemo(\n\t\t() => [FOLDERS.INBOX, FOLDERS.SENT, FOLDERS.DRAFTS, FOLDERS.TRASH, FOLDERS.SPAM],\n\t\t[]\n\t);\n\tconst tags = useTags();\n\tconst actions: Array<MessageAction> = [{ id: EXTRA_WINDOW_ACTION_ID }];\n\n\tif (!message) {\n\t\treturn [];\n\t}\n\n\tif (getFolderIdParts(message.parent).id === FOLDERS.DRAFTS) {\n\t\tactions.push(\n\t\t\t...getDraftsActions({\n\t\t\t\tisInsideExtraWindow,\n\t\t\t\tmessage,\n\t\t\t\tdispatch,\n\t\t\t\tdeselectAll,\n\t\t\t\tfolderId,\n\t\t\t\tisAlone,\n\t\t\t\ttags\n\t\t\t})\n\t\t);\n\t}\n\n\tif (\n\t\tgetFolderIdParts(message.parent).id === FOLDERS.INBOX ||\n\t\tgetFolderIdParts(message.parent).id === FOLDERS.SENT ||\n\t\t!includes(systemFolders, getFolderIdParts(message.parent).id)\n\t) {\n\t\tactions.push(\n\t\t\t...getDefaultActions({\n\t\t\t\tisInsideExtraWindow,\n\t\t\t\tmessage,\n\t\t\t\tdispatch,\n\t\t\t\tdeselectAll,\n\t\t\t\tfolderId,\n\t\t\t\tisAlone,\n\t\t\t\ttags,\n\t\t\t\tisAvailable,\n\t\t\t\topenAppointmentComposer\n\t\t\t})\n\t\t);\n\t\t// INBOX, SENT OR CREATED_FOLDER\n\t}\n\n\tif (getFolderIdParts(message.parent).id === FOLDERS.TRASH) {\n\t\tactions.push(\n\t\t\t...getTrashActions({\n\t\t\t\tisInsideExtraWindow,\n\t\t\t\tmessage,\n\t\t\t\tdispatch,\n\t\t\t\tdeselectAll,\n\t\t\t\tfolderId,\n\t\t\t\ttags\n\t\t\t})\n\t\t);\n\t}\n\n\tif (getFolderIdParts(message.parent).id === FOLDERS.SPAM) {\n\t\tactions.push(...getSpamActions({ isInsideExtraWindow, message, dispatch, tags, folderId }));\n\t}\n\n\t!isInsideExtraWindow &&\n\t\tactions.push(\n\t\t\tpreviewMessageOnSeparatedWindow(message.id, folderId, message.subject, createWindow, actions)\n\t\t);\n\n\treturn actions;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { map, omit } from 'lodash';\n\nimport type { BackupSearchMessage, Conversation, IncompleteMessage } from '../types';\n\ntype UseSelectionProps = {\n\tcurrentFolderId: string;\n\tcount: number;\n\titems?: Array<IncompleteMessage | Conversation | BackupSearchMessage>;\n\tsetCount: (value: number | ((prevState: number) => number)) => void;\n};\n\ntype UseSelectionReturnType = {\n\tselected: Record<string, boolean>;\n\tisSelectModeOn: boolean;\n\tsetIsSelectModeOn: (value: boolean | ((prev: boolean) => boolean)) => void;\n\ttoggle: (id: string) => void;\n\tdeselectAll: () => void;\n\tselectAll: () => void;\n\tisAllSelected: boolean;\n\tselectAllModeOff: () => void;\n};\n\nexport const useSelection = ({\n\tsetCount,\n\tcount,\n\titems = []\n}: UseSelectionProps): UseSelectionReturnType => {\n\tconst selected = useRef<Record<string, boolean>>({});\n\tconst [isSelectModeOn, setIsSelectModeOn] = useState(false);\n\tconst isAllSelected = useMemo(() => count === items.length, [count, items.length]);\n\n\tconst selectItem = useCallback(\n\t\t(id) => {\n\t\t\tif (selected.current[id]) {\n\t\t\t\tselected.current = omit(selected.current, [id]);\n\t\t\t\tsetCount((prev: number) => prev - 1);\n\t\t\t\tif (count - 1 === 0) {\n\t\t\t\t\tsetIsSelectModeOn(false);\n\t\t\t\t} else if (count === 0) {\n\t\t\t\t\tsetIsSelectModeOn(true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tselected.current = { ...selected.current, [id]: true };\n\t\t\t\tsetCount((prev: number) => prev + 1);\n\t\t\t\tsetIsSelectModeOn(true);\n\t\t\t}\n\t\t},\n\t\t[count, setCount]\n\t);\n\n\tconst deselectAll = useCallback(() => {\n\t\tselected.current = {};\n\t\tsetCount(0);\n\t\tsetIsSelectModeOn(false);\n\t}, [setCount, setIsSelectModeOn]);\n\n\tconst selectAll = useCallback(() => {\n\t\tmap(items, (item) => {\n\t\t\tif (!selected.current[item.id]) {\n\t\t\t\tselectItem(item.id);\n\t\t\t}\n\t\t});\n\t}, [items, selectItem, selected]);\n\n\tconst selectAllModeOff = useCallback(() => {\n\t\tselected.current = {};\n\t\tsetCount(0);\n\t\tsetTimeout(() => {\n\t\t\tsetIsSelectModeOn(true);\n\t\t});\n\t}, [setCount]);\n\n\treturn {\n\t\tselected: selected.current,\n\t\ttoggle: selectItem,\n\t\tdeselectAll,\n\t\tisSelectModeOn,\n\t\tsetIsSelectModeOn,\n\t\tselectAll,\n\t\tisAllSelected,\n\t\tselectAllModeOff\n\t};\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback } from 'react';\n\nimport { replaceHistory, t } from '@zextras/carbonio-shell-ui';\nimport { forEach, isArray, map } from 'lodash';\n\nimport DeleteConvConfirm from './delete-conv-modal';\nimport { errorPage } from './error-page';\nimport MoveConvMessage from './move-conv-msg';\nimport { getContentForPrint } from '../commons/print-conversation/print-conversation';\nimport { ConversationActionsDescriptors } from '../constants';\nimport { useUiUtilities } from '../hooks/use-ui-utilities';\nimport { convAction, getMsgsForPrint } from '../store/actions';\nimport { AppDispatch, StoreProvider } from '../store/redux';\nimport type {\n\tConvActionReturnType,\n\tConversation,\n\tExtraWindowCreationParams,\n\tExtraWindowsContextType,\n\tMailMessage\n} from '../types';\nimport { ConversationPreviewPanelContainer } from '../views/app/detail-panel/conversation-preview-panel-container';\n\ntype ConvActionIdsType = Array<string>;\ntype ConvActionValueType = string | boolean;\ntype DeselectAllType = () => void;\ntype CloseEditorType = () => void;\nexport type ConvActionPropType = {\n\tids: ConvActionIdsType;\n\tid: string | ConvActionIdsType;\n\tvalue: ConvActionValueType;\n\tdispatch: AppDispatch;\n\tfolderId: string;\n\tshouldReplaceHistory: boolean;\n\tdeselectAll: DeselectAllType;\n\tconversationId: string;\n\tcloseEditor: CloseEditorType;\n\tisRestore: boolean;\n\tmessage: MailMessage;\n\tdisabled: boolean;\n};\n\nexport function setConversationsFlag({\n\tids,\n\tvalue,\n\tdispatch\n}: Pick<ConvActionPropType, 'ids' | 'value' | 'dispatch'>): ConvActionReturnType {\n\tconst actDescriptor = value\n\t\t? ConversationActionsDescriptors.UNFLAG.id\n\t\t: ConversationActionsDescriptors.FLAG.id;\n\treturn {\n\t\tid: actDescriptor,\n\t\ticon: value ? 'Flag' : 'FlagOutline',\n\t\tlabel: value ? t('action.unflag', 'Add flag') : t('action.flag', 'Remove flag'),\n\t\tonClick: (): void => {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `${value ? '!' : ''}flag`,\n\t\t\t\t\tids\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport const previewConversationOnSeparatedWindow = (\n\tconversationId: string,\n\tfolderId: string,\n\tsubject: string,\n\tcreateWindow: ExtraWindowsContextType['createWindow']\n): void => {\n\tif (!createWindow) {\n\t\treturn;\n\t}\n\n\tconst createWindowParams: ExtraWindowCreationParams = {\n\t\tname: `conversation-${conversationId}`,\n\t\treturnComponent: false,\n\t\tchildren: (\n\t\t\t<ConversationPreviewPanelContainer conversationId={conversationId} folderId={folderId} />\n\t\t),\n\t\ttitle: subject,\n\t\tcloseOnUnmount: false\n\t};\n\tcreateWindow(createWindowParams);\n};\n\nexport const previewConversationOnSeparatedWindowAction = (\n\tconversationId: string,\n\tfolderId: string,\n\tsubject: string,\n\tcreateWindow: ExtraWindowsContextType['createWindow']\n): ConvActionReturnType => {\n\tconst actDescriptor = ConversationActionsDescriptors.PREVIEW_ON_SEPARATED_WINDOW;\n\treturn {\n\t\tid: actDescriptor.id,\n\t\ticon: 'ExternalLink',\n\t\tlabel: t('action.preview_on_separated_tab', 'Open in a new tab'),\n\t\tonClick: (): void => {\n\t\t\tpreviewConversationOnSeparatedWindow(conversationId, folderId, subject, createWindow);\n\t\t}\n\t};\n};\n\nexport function setMultipleConversationsFlag({\n\tids,\n\tdisabled,\n\tdispatch\n}: Pick<ConvActionPropType, 'ids' | 'disabled' | 'dispatch'>): ConvActionReturnType {\n\treturn {\n\t\tid: 'flag--multiple-conversations',\n\t\ticon: 'Flag',\n\t\tlabel: t('action.flag', 'Add flag'),\n\t\tdisabled,\n\t\tonClick: (): void => {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `flag`,\n\t\t\t\t\tids\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport function unSetMultipleConversationsFlag({\n\tids,\n\tdisabled,\n\tdispatch\n}: Pick<ConvActionPropType, 'ids' | 'disabled' | 'dispatch'>): ConvActionReturnType {\n\treturn {\n\t\tid: 'unflag-multiple-conversations',\n\t\ticon: 'FlagOutline',\n\t\tlabel: t('action.unflag', 'Remove flag'),\n\t\tdisabled,\n\t\tonClick: (): void => {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `!flag`,\n\t\t\t\t\tids\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport function setConversationsRead({\n\tids,\n\tvalue,\n\tdispatch,\n\tfolderId,\n\tshouldReplaceHistory,\n\tdeselectAll\n}: Pick<\n\tConvActionPropType,\n\t'ids' | 'dispatch' | 'value' | 'folderId' | 'shouldReplaceHistory' | 'deselectAll'\n>): ConvActionReturnType {\n\tconst actDescriptor = value\n\t\t? ConversationActionsDescriptors.MARK_AS_UNREAD.id\n\t\t: ConversationActionsDescriptors.MARK_AS_READ.id;\n\treturn {\n\t\tid: actDescriptor,\n\t\ticon: value ? 'EmailOutline' : 'EmailReadOutline',\n\t\tlabel: value\n\t\t\t? t('action.mark_as_unread', 'Mark as unread')\n\t\t\t: t('action.mark_as_read', 'Mark as read'),\n\t\tonClick: (): void => {\n\t\t\tdispatch(\n\t\t\t\tconvAction({\n\t\t\t\t\toperation: `${value ? '!' : ''}read`,\n\t\t\t\t\tids\n\t\t\t\t})\n\t\t\t).then((res) => {\n\t\t\t\tdeselectAll && deselectAll();\n\t\t\t\tif (res.type.includes('fulfilled') && shouldReplaceHistory) {\n\t\t\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}\n\nexport function printConversation({\n\tconversation\n}: {\n\tconversation: Conversation | Conversation[];\n}): ConvActionReturnType {\n\tlet messageIds: Array<string> = [];\n\n\tif (isArray(conversation) && conversation.length > 0) {\n\t\tforEach(conversation, (conv) => {\n\t\t\tforEach(conv.messages, (m) => {\n\t\t\t\tmessageIds.push(m.id);\n\t\t\t});\n\t\t});\n\t} else {\n\t\tmessageIds = map((conversation as Conversation)?.messages, (m) => m.id);\n\t}\n\n\treturn {\n\t\tid: 'print-conversations',\n\t\ticon: 'PrinterOutline',\n\t\tlabel: t('action.print', 'Print'),\n\t\tonClick: (): void => {\n\t\t\tconst printWindow = window.open('', '_blank');\n\t\t\tgetMsgsForPrint({ ids: messageIds })\n\t\t\t\t.then((res) => {\n\t\t\t\t\tconst content = getContentForPrint({\n\t\t\t\t\t\tmessages: res,\n\t\t\t\t\t\tconversations: conversation,\n\t\t\t\t\t\tisMsg: false\n\t\t\t\t\t});\n\t\t\t\t\tif (printWindow?.top) {\n\t\t\t\t\t\tprintWindow.top.document.title = 'Carbonio';\n\t\t\t\t\t\tprintWindow.document.write(content);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tif (printWindow) {\n\t\t\t\t\t\tprintWindow.document.write(errorPage);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n}\n\nexport const useSetConversationAsSpam = (): ((\n\targ: Pick<ConvActionPropType, 'ids' | 'dispatch' | 'value' | 'deselectAll'>\n) => ConvActionReturnType) => {\n\tconst { createSnackbar } = useUiUtilities();\n\treturn useCallback(\n\t\t({ ids, value, dispatch, deselectAll }) => ({\n\t\t\tid: 'spam-conversations',\n\t\t\ticon: value ? 'AlertCircleOutline' : 'AlertCircle',\n\t\t\tlabel: value\n\t\t\t\t? t('action.mark_as_non_spam', 'Not spam')\n\t\t\t\t: t('action.mark_as_spam', 'Mark as spam'),\n\t\t\tonClick: (): void => {\n\t\t\t\tlet notCanceled = true;\n\n\t\t\t\tconst infoSnackbar = (hideButton = false): void => {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: `trash-${ids}`,\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tlabel: value\n\t\t\t\t\t\t\t? t('messages.snackbar.marked_as_non_spam', 'You’ve marked this e-mail as Not Spam')\n\t\t\t\t\t\t\t: t('messages.snackbar.marked_as_spam', 'You’ve marked this e-mail as Spam'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton,\n\t\t\t\t\t\tactionLabel: t('label.undo', 'Undo'),\n\t\t\t\t\t\tonActionClick: (): void => {\n\t\t\t\t\t\t\tnotCanceled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tinfoSnackbar();\n\t\t\t\tsetTimeout((): void => {\n\t\t\t\t\tif (notCanceled) {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tconvAction({\n\t\t\t\t\t\t\t\toperation: `${value ? '!' : ''}spam`,\n\t\t\t\t\t\t\t\tids\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).then((res) => {\n\t\t\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\t\t\tdeselectAll();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\t\tkey: `trash-${ids}`,\n\t\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}, 3000);\n\t\t\t}\n\t\t}),\n\t\t[createSnackbar]\n\t);\n};\n\nexport const useMoveConversationToTrash = (): ((\n\tconversation: Pick<ConvActionPropType, 'ids' | 'dispatch' | 'deselectAll' | 'folderId'>\n) => ConvActionReturnType) => {\n\tconst { createSnackbar } = useUiUtilities();\n\n\treturn useCallback(\n\t\t({ ids, dispatch, deselectAll, folderId }) => {\n\t\t\tconst actDescriptor = ConversationActionsDescriptors.MOVE_TO_TRASH.id;\n\n\t\t\treturn {\n\t\t\t\tid: actDescriptor,\n\t\t\t\ticon: 'Trash2Outline',\n\t\t\t\tlabel: t('label.delete', 'Delete'),\n\t\t\t\tonClick: (): void => {\n\t\t\t\t\tconst restoreConversation = (): void => {\n\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\tconvAction({\n\t\t\t\t\t\t\t\toperation: `move`,\n\t\t\t\t\t\t\t\tids,\n\t\t\t\t\t\t\t\tparent: folderId\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).then((res) => {\n\t\t\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\t\t\tdeselectAll();\n\t\t\t\t\t\t\t\treplaceHistory(`/folder/${folderId}/conversation/${ids[0]}`);\n\t\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\t\ttype: 'success',\n\t\t\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\t\t\tlabel: t(\n\t\t\t\t\t\t\t\t\t\t'messages.snackbar.email_restored',\n\t\t\t\t\t\t\t\t\t\t'E-mail restored in destination folder'\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\t\tkey: `edit`,\n\t\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\t\thideButton: true,\n\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again.'),\n\t\t\t\t\t\t\t\t\tautoHideTimeout: 3000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tconvAction({\n\t\t\t\t\t\t\toperation: `trash`,\n\t\t\t\t\t\t\tids\n\t\t\t\t\t\t})\n\t\t\t\t\t).then((res) => {\n\t\t\t\t\t\tif (res.type.includes('fulfilled')) {\n\t\t\t\t\t\t\tdeselectAll();\n\t\t\t\t\t\t\treplaceHistory(`/folder/${folderId}/`);\n\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\tkey: `trash-${ids}`,\n\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\t\tactionLabel: t('label.undo', 'Undo'),\n\t\t\t\t\t\t\t\tlabel: t('snackbar.email_moved_to_trash', 'E-mail moved to Trash'),\n\t\t\t\t\t\t\t\tautoHideTimeout: 5000,\n\t\t\t\t\t\t\t\tonActionClick: (): void => restoreConversation()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\t\tkey: `trash-${ids}`,\n\t\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\t[createSnackbar]\n\t);\n};\n\nexport const useMoveConversationToFolder = (): ((\n\tconversation: Pick<\n\t\tConvActionPropType,\n\t\t'ids' | 'dispatch' | 'isRestore' | 'deselectAll' | 'folderId'\n\t>\n) => ConvActionReturnType) => {\n\tconst { createModal } = useUiUtilities();\n\treturn useCallback(\n\t\t({ ids, folderId, dispatch, isRestore, deselectAll }) => ({\n\t\t\tid: 'move-conversations',\n\t\t\ticon: isRestore ? 'RestoreOutline' : 'MoveOutline',\n\t\t\tlabel: isRestore ? t('label.restore', 'Restore') : t('label.move', 'Move'),\n\t\t\tonClick: (): void => {\n\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t{\n\t\t\t\t\t\tmaxHeight: '90vh',\n\t\t\t\t\t\tsize: 'medium',\n\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t<StoreProvider>\n\t\t\t\t\t\t\t\t<MoveConvMessage\n\t\t\t\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\t\t\t\tselectedIDs={ids}\n\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\tisMessageView={false}\n\t\t\t\t\t\t\t\t\tisRestore={isRestore}\n\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</StoreProvider>\n\t\t\t\t\t\t)\n\t\t\t\t\t},\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t}),\n\t\t[createModal]\n\t);\n};\n\nexport const useDeleteConversationPermanently = (): ((\n\tconversation: Pick<ConvActionPropType, 'ids' | 'deselectAll'>\n) => ConvActionReturnType) => {\n\tconst { createModal } = useUiUtilities();\n\n\treturn useCallback(\n\t\t({ ids, deselectAll }) => ({\n\t\t\tid: 'delete-conversations',\n\t\t\ticon: 'DeletePermanentlyOutline',\n\t\t\tlabel: t('label.delete_permanently', 'Delete permanently'),\n\t\t\tonClick: (): void => {\n\t\t\t\tconst closeModal = createModal(\n\t\t\t\t\t{\n\t\t\t\t\t\tchildren: (\n\t\t\t\t\t\t\t<StoreProvider>\n\t\t\t\t\t\t\t\t<DeleteConvConfirm\n\t\t\t\t\t\t\t\t\tselectedIDs={ids}\n\t\t\t\t\t\t\t\t\tisMessageView={false}\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tonClose={(): void => closeModal()}\n\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</StoreProvider>\n\t\t\t\t\t\t)\n\t\t\t\t\t},\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t}),\n\t\t[createModal]\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport {\n\tButton,\n\tContainer,\n\tDropdown,\n\tIconButton,\n\tRow,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport { FOLDERS, t, useTags } from '@zextras/carbonio-shell-ui';\nimport { every, filter, findIndex, includes, some } from 'lodash';\n\nimport {\n\tuseDeleteConversationPermanently,\n\tuseMoveConversationToFolder,\n\tuseMoveConversationToTrash,\n\tsetConversationsFlag,\n\tsetConversationsRead,\n\tuseSetConversationAsSpam\n} from './conversation-actions';\nimport {\n\tuseDeleteMessagePermanently,\n\tuseMoveMessageToFolder,\n\tuseMoveMsgToTrash,\n\tsetMsgFlag,\n\tsetMsgRead,\n\tuseSetMsgAsSpam\n} from './message-actions';\nimport { applyMultiTag } from './tag-actions';\nimport { getFolderParentId } from './utils';\nimport { getFolderIdParts } from '../helpers/folders';\nimport { useAppDispatch } from '../hooks/redux';\nimport { useUiUtilities } from '../hooks/use-ui-utilities';\nimport type {\n\tActionReturnType,\n\tConvActionReturnType,\n\tConversation,\n\tMailMessage,\n\tMessageActionReturnType,\n\tTagActionItemType\n} from '../types';\n\ntype MultipleSelectionActionsPanelProps = {\n\titems: Array<Partial<MailMessage> & Pick<MailMessage, 'id'>> | Array<Conversation>;\n\tselectedIds: Array<string>;\n\tdeselectAll: () => void;\n\tselectAll: () => void;\n\tisAllSelected: boolean;\n\tselectAllModeOff: () => void;\n\tsetIsSelectModeOn: (value: boolean) => void;\n\tfolderId: string;\n};\ntype MsgOrConv = (Partial<MailMessage> & Pick<MailMessage, 'id'>) | Conversation;\n\nexport const MultipleSelectionActionsPanel: FC<MultipleSelectionActionsPanelProps> = ({\n\titems,\n\tselectedIds,\n\tdeselectAll,\n\tselectAll,\n\tisAllSelected,\n\tselectAllModeOff,\n\tsetIsSelectModeOn,\n\tfolderId\n}) => {\n\tconst { createSnackbar } = useUiUtilities();\n\tconst isConversation = 'messages' in (items?.[0] || {});\n\n\tconst folderParentId = getFolderParentId({ folderId, isConversation, items });\n\n\tconst [currentFolderId] = useState(folderParentId);\n\n\t// This useEffect is required to reset the select mode when the user navigates to a different folder\n\tuseEffect(() => {\n\t\tif (folderId && currentFolderId !== folderParentId) {\n\t\t\tdeselectAll();\n\t\t\tsetIsSelectModeOn(false);\n\t\t}\n\t}, [currentFolderId, deselectAll, folderId, folderParentId, setIsSelectModeOn]);\n\n\tconst dispatch = useAppDispatch();\n\tconst ids = Object.values(selectedIds ?? []);\n\tconst selectedConversation = filter(items, (item: MsgOrConv) => ids.includes(item.id ?? '0'));\n\tconst tags = useTags();\n\tconst foldersExcludedMarkReadUnread = [FOLDERS.DRAFTS, FOLDERS.SPAM, FOLDERS.TRASH];\n\tconst foldersExcludedTrash = [FOLDERS.TRASH];\n\tconst foldersIncludedDeletePermanently = [FOLDERS.TRASH];\n\tconst foldersExcludedMoveToFolder = [FOLDERS.DRAFTS, FOLDERS.TRASH];\n\tconst foldersExcludedTags = [FOLDERS.SPAM];\n\tconst foldersExcludedMarkSpam = [FOLDERS.DRAFTS, FOLDERS.TRASH, FOLDERS.SPAM];\n\tconst foldersIncludedMarkNotSpam = [FOLDERS.SPAM] satisfies readonly string[];\n\n\tconst addFlagAction = (): ActionReturnType => {\n\t\tconst selectedItems = filter(items, (item: MsgOrConv) => ids.includes(item.id ?? '0'));\n\t\tconst action = isConversation\n\t\t\t? setConversationsFlag({ ids, value: false, dispatch })\n\t\t\t: setMsgFlag({ ids, value: false, dispatch });\n\t\treturn !some(selectedItems, ['flagged', true]) && action;\n\t};\n\n\tconst removeFlagAction = (): ActionReturnType => {\n\t\tconst selectedItems = filter(items, (item: MsgOrConv) => ids.includes(item.id ?? '0'));\n\t\tconst action = isConversation\n\t\t\t? setConversationsFlag({ ids, value: true, dispatch })\n\t\t\t: setMsgFlag({ ids, value: true, dispatch });\n\t\treturn every(selectedItems, ['flagged', true]) && action;\n\t};\n\n\tconst setMsgReadAction = (): ActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\t!includes(foldersExcludedMarkReadUnread, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? setConversationsRead({\n\t\t\t\t\tids,\n\t\t\t\t\tvalue: false,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tfolderId,\n\t\t\t\t\tdeselectAll,\n\t\t\t\t\tshouldReplaceHistory: false\n\t\t\t\t})\n\t\t\t: setMsgRead({ ids, value: false, dispatch, folderId: folderParentId });\n\t\treturn findIndex(selectedItems, ['read', false]) !== -1 && action;\n\t};\n\n\tconst setMsgUnreadAction = (): ActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\t!includes(foldersExcludedMarkReadUnread, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? setConversationsRead({\n\t\t\t\t\tids,\n\t\t\t\t\tvalue: true,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tfolderId,\n\t\t\t\t\tdeselectAll,\n\t\t\t\t\tshouldReplaceHistory: false\n\t\t\t\t})\n\t\t\t: setMsgRead({ ids, value: true, dispatch, folderId: folderParentId });\n\t\treturn selectedItems.length > 0 && every(selectedItems, ['read', true]) && action;\n\t};\n\n\tconst moveConversationToTrash = useMoveConversationToTrash();\n\tconst moveMsgToTrash = useMoveMsgToTrash();\n\tconst getMoveToTrashAction = (): false | ConvActionReturnType | MessageActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\t!includes(foldersExcludedTrash, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? moveConversationToTrash({ ids, dispatch, folderId, deselectAll })\n\t\t\t: moveMsgToTrash({ ids, dispatch, deselectAll });\n\t\treturn selectedItems.length > 0 && selectedItems.length === ids.length && action;\n\t};\n\n\tconst deleteConversationPermanently = useDeleteConversationPermanently();\n\tconst deleteMessagePermanently = useDeleteMessagePermanently();\n\tconst deletePermanentlyAction = (): ActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\tincludes(foldersIncludedDeletePermanently, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? deleteConversationPermanently({ ids, deselectAll })\n\t\t\t: deleteMessagePermanently({ ids, dispatch, deselectAll });\n\t\treturn selectedItems.length > 0 && selectedItems.length === ids.length && action;\n\t};\n\n\tconst moveConversationToFolder = useMoveConversationToFolder();\n\tconst moveMessageToFolder = useMoveMessageToFolder();\n\tconst moveToFolderAction = (): ActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\t!includes(foldersExcludedMoveToFolder, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? moveConversationToFolder({\n\t\t\t\t\tids,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tfolderId,\n\t\t\t\t\tisRestore: false,\n\t\t\t\t\tdeselectAll\n\t\t\t\t})\n\t\t\t: moveMessageToFolder({\n\t\t\t\t\tid: ids,\n\t\t\t\t\tfolderId: folderParentId,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tisRestore: false,\n\t\t\t\t\tdeselectAll\n\t\t\t\t});\n\t\treturn selectedItems.length > 0 && selectedItems.length === ids.length && action;\n\t};\n\n\tconst applyTagAction = (): false | TagActionItemType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\t!includes(foldersExcludedTags, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = applyMultiTag({\n\t\t\tids,\n\t\t\ttags,\n\t\t\tconversations: selectedConversation,\n\t\t\tfolderId: folderParentId,\n\t\t\tdeselectAll,\n\t\t\tisMessage: !isConversation\n\t\t});\n\t\treturn selectedItems.length > 0 && selectedItems.length === ids.length && action;\n\t};\n\n\tconst setConversationAsSpam = useSetConversationAsSpam();\n\tconst setMsgAsSpam = useSetMsgAsSpam();\n\tconst markMsgAsSpam = (): ActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\t!includes(foldersExcludedMarkSpam, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? setConversationAsSpam({\n\t\t\t\t\tids,\n\t\t\t\t\tvalue: false,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tdeselectAll\n\t\t\t\t})\n\t\t\t: setMsgAsSpam({ ids, value: false, dispatch, folderId: folderParentId });\n\n\t\treturn selectedItems.length > 0 && selectedItems.length === ids.length && action;\n\t};\n\n\tconst markMsgAsNotSpam = (): ActionReturnType => {\n\t\tconst selectedItems = filter(\n\t\t\titems,\n\t\t\t(item: MsgOrConv) =>\n\t\t\t\tids.includes(item.id ?? '0') &&\n\t\t\t\tincludes(foldersIncludedMarkNotSpam, getFolderIdParts(folderParentId).id ?? '0')\n\t\t);\n\t\tconst action = isConversation\n\t\t\t? setConversationAsSpam({\n\t\t\t\t\tids,\n\t\t\t\t\tvalue: true,\n\t\t\t\t\tdispatch,\n\t\t\t\t\tdeselectAll\n\t\t\t\t})\n\t\t\t: setMsgAsSpam({ ids, value: true, dispatch, folderId: folderParentId });\n\n\t\treturn selectedItems.length > 0 && selectedItems.length === ids.length && action;\n\t};\n\n\tconst messagesArrayIsNotEmpty = ids.length > 0;\n\n\tconst primaryActions = (): ActionReturnType[] => {\n\t\tif (messagesArrayIsNotEmpty)\n\t\t\treturn [\n\t\t\t\tsetMsgReadAction(),\n\t\t\t\tsetMsgUnreadAction(),\n\t\t\t\tgetMoveToTrashAction(),\n\t\t\t\tdeletePermanentlyAction()\n\t\t\t];\n\t\treturn [];\n\t};\n\n\tconst secondaryActions = (): ActionReturnType[] => {\n\t\tif (messagesArrayIsNotEmpty)\n\t\t\treturn [\n\t\t\t\tsetMsgReadAction(),\n\t\t\t\tsetMsgUnreadAction(),\n\t\t\t\taddFlagAction(),\n\t\t\t\tremoveFlagAction(),\n\t\t\t\tmoveToFolderAction(),\n\t\t\t\tapplyTagAction(),\n\t\t\t\tmarkMsgAsSpam(),\n\t\t\t\tmarkMsgAsNotSpam()\n\t\t\t];\n\t\treturn [];\n\t};\n\n\tconst primaryActionsArray = primaryActions()?.reduce((acc, action) => {\n\t\tif (action)\n\t\t\tacc.push(\n\t\t\t\t<div key={action.id}>\n\t\t\t\t\t<Tooltip label={'label' in action ? action.label : ''} maxWidth=\"100%\">\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tdata-testid={`primary-multi-action-button-${action.id}`}\n\t\t\t\t\t\t\ticon={'icon' in action ? action.icon : ''}\n\t\t\t\t\t\t\ticonColor=\"primary\"\n\t\t\t\t\t\t\tonClick={(ev: KeyboardEvent | SyntheticEvent<HTMLElement, Event>): void => {\n\t\t\t\t\t\t\t\tif (ev) ev.preventDefault();\n\t\t\t\t\t\t\t\taction.onClick && action.onClick(ev);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t</div>\n\t\t\t);\n\t\treturn acc;\n\t}, [] as Array<ReactElement>);\n\n\tconst secondaryActionsArray: Array<Exclude<ActionReturnType, false> & { label: string }> =\n\t\tsecondaryActions()?.reduce(\n\t\t\t(acc, action) => {\n\t\t\t\tif (action)\n\t\t\t\t\tacc.push({\n\t\t\t\t\t\tid: 'label' in action ? action.label : action.id,\n\t\t\t\t\t\ticon: 'icon' in action ? action.icon : '',\n\t\t\t\t\t\tlabel: 'label' in action ? action.label : '',\n\t\t\t\t\t\tonClick: (ev?: KeyboardEvent | SyntheticEvent<HTMLElement, Event>): void => {\n\t\t\t\t\t\t\tif (ev) ev.preventDefault();\n\t\t\t\t\t\t\taction.onClick && action.onClick(ev);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcustomComponent: action.customComponent,\n\t\t\t\t\t\titems: action.items\n\t\t\t\t\t});\n\t\t\t\treturn acc;\n\t\t\t},\n\t\t\t[] as Array<Exclude<ActionReturnType, false> & { label: string }>\n\t\t);\n\n\tconst arrowBackOnClick = useCallback(() => {\n\t\tdeselectAll();\n\t\tsetIsSelectModeOn(false);\n\t}, [deselectAll, setIsSelectModeOn]);\n\n\tconst selectAllOnClick = useCallback(() => {\n\t\tselectAll();\n\t\tcreateSnackbar({\n\t\t\tkey: `selected-${ids}`,\n\t\t\treplace: true,\n\t\t\ttype: 'info',\n\t\t\tlabel: t('label.all_items_selected', 'All visible items have been selected'),\n\t\t\tautoHideTimeout: 5000,\n\t\t\thideButton: true\n\t\t});\n\t}, [selectAll, createSnackbar, ids]);\n\n\tconst actionsIsNotEmpty = primaryActionsArray.length > 0 || secondaryActionsArray.length > 0;\n\n\tconst iconButtonTooltip = t('label.exit_selection_mode', 'Exit selection mode');\n\n\treturn (\n\t\t<Container\n\t\t\tbackground=\"gray5\"\n\t\t\theight=\"3rem\"\n\t\t\torientation=\"horizontal\"\n\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\tmainAlignment=\"flex-start\"\n\t\t\twidth=\"100%\"\n\t\t>\n\t\t\t<Row\n\t\t\t\theight=\"100%\"\n\t\t\t\twidth=\"fill\"\n\t\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\t\tmainAlignment=\"space-between\"\n\t\t\t\ttakeAvailableSpace\n\t\t\t>\n\t\t\t\t<Row mainAlignment=\"flex-start\" width=\"fit\" padding={{ right: 'medium' }}>\n\t\t\t\t\t<Tooltip label={iconButtonTooltip}>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticon=\"ArrowBack\"\n\t\t\t\t\t\t\ticonColor=\"primary\"\n\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\tonClick={arrowBackOnClick}\n\t\t\t\t\t\t\tdata-testid=\"action-button-deselect-all\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"ghost\"\n\t\t\t\t\t\tlabel={\n\t\t\t\t\t\t\tisAllSelected\n\t\t\t\t\t\t\t\t? t('label.deselect_all', 'DESELECT all')\n\t\t\t\t\t\t\t\t: t('label.select_all', 'SELECT all')\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={isAllSelected ? selectAllModeOff : selectAllOnClick}\n\t\t\t\t\t/>\n\t\t\t\t</Row>\n\t\t\t\t{actionsIsNotEmpty && (\n\t\t\t\t\t<Row mainAlignment=\"flex-end\" width=\"fit\">\n\t\t\t\t\t\t{primaryActionsArray}\n\n\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\tplacement=\"right-end\"\n\t\t\t\t\t\t\tdata-testid=\"secondary-actions-dropdown\"\n\t\t\t\t\t\t\titems={secondaryActionsArray}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t\ticonColor=\"primary\"\n\t\t\t\t\t\t\t\ticon=\"MoreVertical\"\n\t\t\t\t\t\t\t\tdata-testid=\"secondary-actions-open-button\"\n\t\t\t\t\t\t\t\tonClick={(): null => null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t</Row>\n\t\t\t\t)}\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useCallback } from 'react';\n\nimport { CreateSnackbarFn } from '@zextras/carbonio-design-system';\nimport { FOLDERS, Tags, useIntegratedFunction } from '@zextras/carbonio-shell-ui';\nimport { TFunction } from 'i18next';\n\nimport {\n\tuseMoveConversationToTrash,\n\tpreviewConversationOnSeparatedWindowAction,\n\tprintConversation,\n\tsetConversationsFlag,\n\tsetConversationsRead,\n\tuseDeleteConversationPermanently,\n\tuseSetConversationAsSpam,\n\tuseMoveConversationToFolder\n} from './conversation-actions';\nimport {\n\tuseCreateAppointment,\n\tdownloadEml,\n\teditAsNewMsg,\n\tforwardMsg,\n\tuseMoveMsgToTrash,\n\tpreviewMessageOnSeparatedWindow,\n\tprintMsg,\n\treplyAllMsg,\n\treplyMsg,\n\tsendDraftFromPreview,\n\tsetMsgFlag,\n\tsetMsgRead,\n\tshowOriginalMsg,\n\tuseDeleteMessagePermanently,\n\tuseSetMsgAsSpam,\n\tuseMoveMessageToFolder,\n\tuseRedirectMsg,\n\tuseEditDraft\n} from './message-actions';\nimport { applyTag } from './tag-actions';\nimport { updateEditorWithSmartLinks } from './utils';\nimport { EditViewActions } from '../constants';\nimport { getFolderIdParts } from '../helpers/folders';\nimport { AppDispatch } from '../store/redux';\nimport { GenerateEditorParams } from '../store/zustand/editor/editor-generators';\nimport { useEditorsStore } from '../store/zustand/editor/store';\nimport type {\n\tActionReturnType,\n\tAddEditorParams,\n\tConversation,\n\tExtraWindowsContextType,\n\tMailMessage,\n\tMailsEditorV2,\n\tMessageAction\n} from '../types';\n\n/**\n * get the action to be executed when the user clicks on the \"Mark as read/unread\" button\n * @param isConversation true if the item is a conversation\n * @param id the id of the item\n * @param item the item itself\n * @param dispatch the dispatch function\n * @param folderId the id of the folder where the item is located\n * @param deselectAll the function to deselect all the items\n * @param foldersExcludedMarkReadUnread the list of folders where the \"Mark as read/unread\" button is disabled\n * @returns {function(): ActionReturnType} the action to be executed when the user clicks on the \"Mark as read/unread\" button\n */\nexport function getReadUnreadAction({\n\tisConversation,\n\tid,\n\titem,\n\tdispatch,\n\tfolderId,\n\tdeselectAll,\n\tfoldersExcludedMarkReadUnread\n}: {\n\tisConversation: boolean;\n\tid: string;\n\titem: MailMessage | Conversation;\n\tdispatch: AppDispatch;\n\tfolderId: string;\n\tdeselectAll: () => void;\n\tfoldersExcludedMarkReadUnread: string[];\n}): ActionReturnType {\n\tconst action = isConversation\n\t\t? setConversationsRead({\n\t\t\t\tids: [id],\n\t\t\t\tvalue: item.read,\n\t\t\t\tdispatch,\n\t\t\t\tfolderId,\n\t\t\t\tdeselectAll,\n\t\t\t\tshouldReplaceHistory: false\n\t\t\t})\n\t\t: setMsgRead({ ids: [id], value: item.read, dispatch, folderId });\n\treturn !foldersExcludedMarkReadUnread.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport function getReplyAction(\n\tisConversation: boolean,\n\tisSingleMessageConversation: boolean,\n\tfirstConversationMessageId: string,\n\tfolderId: string,\n\tid: string,\n\tfolderExcludedReply: string[]\n): ActionReturnType {\n\tconst action = isConversation\n\t\t? isSingleMessageConversation && replyMsg({ id: firstConversationMessageId })\n\t\t: replyMsg({ id });\n\treturn !folderExcludedReply.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport function getReplyAllAction({\n\tisConversation,\n\tisSingleMessageConversation,\n\tfirstConversationMessageId,\n\tfolderId,\n\tid,\n\tfolderExcludedReplyAll\n}: {\n\tisConversation: boolean;\n\tisSingleMessageConversation: boolean;\n\tfirstConversationMessageId: string;\n\tfolderId: string;\n\tid: string;\n\tfolderExcludedReplyAll: string[];\n}): ActionReturnType {\n\tconst action = isConversation\n\t\t? isSingleMessageConversation && replyAllMsg({ id: firstConversationMessageId })\n\t\t: replyAllMsg({ id });\n\treturn !folderExcludedReplyAll.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport function getForwardAction({\n\tisConversation,\n\tisSingleMessageConversation,\n\tfirstConversationMessageId,\n\tfolderId,\n\tid,\n\tfolderExcludedForward\n}: {\n\tisConversation: boolean;\n\tisSingleMessageConversation: boolean;\n\tfirstConversationMessageId: string;\n\tfolderId: string;\n\tid: string;\n\tfolderExcludedForward: string[];\n}): ActionReturnType {\n\tconst action = isConversation\n\t\t? isSingleMessageConversation && forwardMsg({ id: firstConversationMessageId })\n\t\t: forwardMsg({ id });\n\treturn !folderExcludedForward.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport const useMoveToTrashAction = (): ((arg: {\n\tisConversation: boolean;\n\tid: string;\n\tdispatch: AppDispatch;\n\tfolderId: string;\n\tdeselectAll: () => void;\n\tfoldersExcludedTrash: string[];\n}) => ActionReturnType) => {\n\tconst moveConversationToTrash = useMoveConversationToTrash();\n\tconst moveMsgToTrash = useMoveMsgToTrash();\n\treturn useCallback(\n\t\t({ isConversation, id, dispatch, folderId, deselectAll, foldersExcludedTrash }) => {\n\t\t\tconst action = isConversation\n\t\t\t\t? moveConversationToTrash({ ids: [id], dispatch, folderId, deselectAll })\n\t\t\t\t: moveMsgToTrash({ ids: [id], dispatch, deselectAll });\n\t\t\treturn !foldersExcludedTrash.includes(getFolderIdParts(folderId).id ?? '0') && action;\n\t\t},\n\t\t[moveConversationToTrash, moveMsgToTrash]\n\t);\n};\n\nexport const useDeletePermanentlyAction = (): ((arg: {\n\tisConversation: boolean;\n\tid: string;\n\tdeselectAll: () => void;\n\tdispatch: AppDispatch;\n\tfoldersIncludedDeletePermanently: string[];\n\tfolderId: string;\n}) => ActionReturnType) => {\n\tconst deleteConversationPermanently = useDeleteConversationPermanently();\n\tconst deleteMessagePermanently = useDeleteMessagePermanently();\n\treturn useCallback(\n\t\t({ isConversation, id, deselectAll, dispatch, foldersIncludedDeletePermanently, folderId }) => {\n\t\t\tconst action = isConversation\n\t\t\t\t? deleteConversationPermanently({ ids: [id], deselectAll })\n\t\t\t\t: deleteMessagePermanently({ ids: [id], dispatch, deselectAll });\n\t\t\treturn (\n\t\t\t\tfoldersIncludedDeletePermanently.includes(getFolderIdParts(folderId).id ?? '0') && action\n\t\t\t);\n\t\t},\n\t\t[deleteConversationPermanently, deleteMessagePermanently]\n\t);\n};\n\nexport function getAddRemoveFlagAction({\n\tisConversation,\n\tid,\n\titem,\n\tdispatch\n}: {\n\tisConversation: boolean;\n\tid: string;\n\titem: MailMessage | Conversation;\n\tdispatch: AppDispatch;\n}): ActionReturnType {\n\treturn isConversation\n\t\t? setConversationsFlag({ ids: [id], value: item.flagged, dispatch })\n\t\t: setMsgFlag({ ids: [id], value: item.flagged, dispatch });\n}\n\nexport function getSendDraftAction({\n\titem,\n\tdispatch,\n\tfolderIncludedSendDraft,\n\tfolderId,\n\tgenerateEditor,\n\taddEditor,\n\tcreateSnackbar,\n\tt\n}: {\n\titem: MailMessage;\n\tdispatch: AppDispatch;\n\tfolderIncludedSendDraft: string[];\n\tfolderId: string;\n\tgenerateEditor: (params: GenerateEditorParams) => MailsEditorV2 | null;\n\taddEditor: ({ id, editor }: AddEditorParams) => void;\n\tcreateSnackbar: CreateSnackbarFn;\n\tt: TFunction;\n}): ActionReturnType {\n\tif (!folderIncludedSendDraft.includes(getFolderIdParts(folderId).id ?? '0')) {\n\t\treturn false;\n\t}\n\n\tconst generateEditorFunction = async (): Promise<MailsEditorV2> => {\n\t\tconst editor = generateEditor({\n\t\t\taction: EditViewActions.EDIT_AS_DRAFT,\n\t\t\tid: item.id,\n\t\t\tmessagesStoreDispatch: dispatch,\n\t\t\tmessage: item,\n\t\t\tcompositionData: undefined\n\t\t});\n\t\tif (!editor) {\n\t\t\tthrow new Error('No editor provided');\n\t\t}\n\t\taddEditor({ id: editor.id, editor });\n\t\tconst { savedAttachments } = editor;\n\t\tconst hasSmartLinks =\n\t\t\tsavedAttachments.filter((attachment) => attachment.requiresSmartLinkConversion).length > 0;\n\t\tif (hasSmartLinks)\n\t\t\tawait updateEditorWithSmartLinks({\n\t\t\t\tcreateSnackbar,\n\t\t\t\tt,\n\t\t\t\teditorId: editor.id\n\t\t\t});\n\n\t\treturn useEditorsStore.getState().editors[editor.id];\n\t};\n\n\treturn sendDraftFromPreview({ generateEditorFunction, dispatch });\n}\n\nexport const useMarkRemoveSpam = (): ((arg: {\n\tisConversation: boolean;\n\tid: string;\n\tfolderId: string;\n\tdispatch: AppDispatch;\n\tdeselectAll: () => void;\n\tfoldersExcludedMarkUnmarkSpam: string[];\n}) => ActionReturnType) => {\n\tconst setConversationAsSpam = useSetConversationAsSpam();\n\tconst setMsgAsSpam = useSetMsgAsSpam();\n\treturn useCallback(\n\t\t({ isConversation, id, folderId, dispatch, deselectAll, foldersExcludedMarkUnmarkSpam }) => {\n\t\t\tconst action = isConversation\n\t\t\t\t? setConversationAsSpam({\n\t\t\t\t\t\tids: [id],\n\t\t\t\t\t\tvalue: getFolderIdParts(folderId).id === FOLDERS.SPAM,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tdeselectAll\n\t\t\t\t\t})\n\t\t\t\t: setMsgAsSpam({\n\t\t\t\t\t\tids: [id],\n\t\t\t\t\t\tvalue: getFolderIdParts(folderId).id === FOLDERS.SPAM,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tfolderId\n\t\t\t\t\t});\n\t\t\treturn (\n\t\t\t\t!foldersExcludedMarkUnmarkSpam.includes(getFolderIdParts(folderId).id ?? '0') && action\n\t\t\t);\n\t\t},\n\t\t[setConversationAsSpam, setMsgAsSpam]\n\t);\n};\n\nexport function getPreviewOnSeparatedWindowAction({\n\tisConversation,\n\tid,\n\tfolderId,\n\tsubject,\n\tcreateWindow,\n\tmessageActions\n}: {\n\tisConversation: boolean;\n\tid: string;\n\tfolderId: string;\n\tsubject: string;\n\tcreateWindow: ExtraWindowsContextType['createWindow'];\n\tmessageActions: Array<MessageAction>;\n}): ActionReturnType {\n\treturn isConversation\n\t\t? previewConversationOnSeparatedWindowAction(id, folderId, subject, createWindow)\n\t\t: previewMessageOnSeparatedWindow(id, folderId, subject, createWindow, messageActions);\n}\n\nexport function getApplyTagAction({\n\ttags,\n\titem,\n\tisConversation,\n\tfoldersExcludedTags,\n\tfolderId\n}: {\n\ttags: Tags;\n\titem: MailMessage | Conversation;\n\tisConversation: boolean;\n\tfoldersExcludedTags: string[];\n\tfolderId: string;\n}): ActionReturnType {\n\tconst action = applyTag({ tags, conversation: item, isMessage: !isConversation });\n\treturn (\n\t\t!foldersExcludedTags.includes(getFolderIdParts(folderId).id ?? '0') &&\n\t\t(action as ActionReturnType)\n\t);\n}\n\nexport const useMoveToFolderAction = (): ((arg: {\n\tisConversation: boolean;\n\tid: string;\n\tdispatch: AppDispatch;\n\tfolderId: string;\n\tdeselectAll: () => void;\n}) => ActionReturnType) => {\n\tconst moveConversationToFolder = useMoveConversationToFolder();\n\tconst moveMessageToFolder = useMoveMessageToFolder();\n\treturn useCallback(\n\t\t({ isConversation, id, dispatch, folderId, deselectAll }) =>\n\t\t\tisConversation\n\t\t\t\t? moveConversationToFolder({\n\t\t\t\t\t\tids: [id],\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\tisRestore: getFolderIdParts(folderId).id === FOLDERS.TRASH,\n\t\t\t\t\t\tdeselectAll\n\t\t\t\t\t})\n\t\t\t\t: moveMessageToFolder({\n\t\t\t\t\t\tid: [id],\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\tisRestore: getFolderIdParts(folderId).id === FOLDERS.TRASH,\n\t\t\t\t\t\tdeselectAll\n\t\t\t\t\t}),\n\t\t[moveConversationToFolder, moveMessageToFolder]\n\t);\n};\n\nexport function getPrintAction({\n\tisConversation,\n\titem,\n\tfolderExcludedPrintMessage,\n\tfolderId\n}: {\n\tisConversation: boolean;\n\titem: MailMessage | Conversation;\n\tfolderExcludedPrintMessage: string[];\n\tfolderId: string;\n}): ActionReturnType {\n\tconst action = isConversation\n\t\t? printConversation({\n\t\t\t\tconversation: [item as Conversation]\n\t\t\t})\n\t\t: printMsg({ message: item as MailMessage });\n\treturn !folderExcludedPrintMessage.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport const useRedirectAction = (): ((arg: {\n\tisConversation: boolean;\n\tid: string;\n\tfolderExcludedRedirect: string[];\n\tfolderId: string;\n}) => ActionReturnType) => {\n\tconst redirectMsg = useRedirectMsg();\n\treturn useCallback(\n\t\t({ isConversation, id, folderExcludedRedirect, folderId }) => {\n\t\t\tconst action = isConversation ? false : redirectMsg({ id });\n\t\t\treturn !folderExcludedRedirect.includes(getFolderIdParts(folderId).id ?? '0') && action;\n\t\t},\n\t\t[redirectMsg]\n\t);\n};\n\nexport const useEditDraftAction = (): ((arg: {\n\tisConversation: boolean;\n\tid: string;\n\tfolderId: string;\n\tfolderIncludeEditDraft: string[];\n}) => ActionReturnType) => {\n\tconst editDraft = useEditDraft();\n\treturn useCallback(\n\t\t({ isConversation, id, folderId, folderIncludeEditDraft }) => {\n\t\t\tconst action = isConversation ? false : editDraft({ id, folderId });\n\t\t\treturn folderIncludeEditDraft.includes(getFolderIdParts(folderId).id ?? '0') && action;\n\t\t},\n\t\t[editDraft]\n\t);\n};\n\nexport function getEditAsNewAction({\n\tisConversation,\n\tid,\n\tfolderId,\n\tfolderExcludedEditAsNew\n}: {\n\tisConversation: boolean;\n\tid: string;\n\tfolderId: string;\n\tfolderExcludedEditAsNew: string[];\n}): ActionReturnType {\n\tconst action = isConversation ? false : editAsNewMsg({ id });\n\treturn !folderExcludedEditAsNew.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport function getShowOriginalAction({\n\tid,\n\tfolderExcludedShowOriginal,\n\tfolderId\n}: {\n\tisConversation: boolean;\n\tid: string;\n\tfolderExcludedShowOriginal: string[];\n\tfolderId: string;\n}): ActionReturnType {\n\tconst action = showOriginalMsg({ id });\n\n\treturn !folderExcludedShowOriginal.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport function getDownloadEmlAction({\n\tid,\n\tfolderId,\n\tfolderExcludedDownloadEML,\n\tisConversation\n}: {\n\tid: string;\n\tfolderId: string;\n\tfolderExcludedDownloadEML: string[];\n\tisConversation: boolean;\n}): ActionReturnType {\n\tconst action = isConversation ? false : downloadEml({ id });\n\n\treturn !folderExcludedDownloadEML.includes(getFolderIdParts(folderId).id ?? '0') && action;\n}\n\nexport const useCreateAppointmentAction = (): (({\n\titem,\n\tfolderId,\n\tfolderExcludedCreateAppointment,\n\tisConversation,\n\topenAppointmentComposer,\n\tisAvailable\n}: {\n\titem: MailMessage | Conversation;\n\tfolderId: string;\n\tfolderExcludedCreateAppointment: string[];\n\tisConversation: boolean;\n\topenAppointmentComposer: ReturnType<typeof useIntegratedFunction>[0];\n\tisAvailable: boolean;\n}) => ActionReturnType) => {\n\tconst createAppointment = useCreateAppointment();\n\n\treturn useCallback(\n\t\t({\n\t\t\titem,\n\t\t\tfolderId,\n\t\t\tfolderExcludedCreateAppointment,\n\t\t\tisConversation,\n\t\t\topenAppointmentComposer,\n\t\t\tisAvailable\n\t\t}: {\n\t\t\titem: MailMessage | Conversation;\n\t\t\tfolderId: string;\n\t\t\tfolderExcludedCreateAppointment: string[];\n\t\t\tisConversation: boolean;\n\t\t\topenAppointmentComposer: ReturnType<typeof useIntegratedFunction>[0];\n\t\t\tisAvailable: boolean;\n\t\t}): ActionReturnType => {\n\t\t\tconst action =\n\t\t\t\tisConversation || !isAvailable\n\t\t\t\t\t? false\n\t\t\t\t\t: createAppointment({ item: item as MailMessage, openAppointmentComposer });\n\n\t\t\treturn (\n\t\t\t\t!folderExcludedCreateAppointment.includes(getFolderIdParts(folderId).id ?? '0') && action\n\t\t\t);\n\t\t},\n\t\t[createAppointment]\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useSnackbar } from '@zextras/carbonio-design-system';\nimport { FOLDERS, useIntegratedFunction, useTags } from '@zextras/carbonio-shell-ui';\nimport { filter } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n\tgetAddRemoveFlagAction,\n\tgetApplyTagAction,\n\tuseDeletePermanentlyAction,\n\tuseCreateAppointmentAction,\n\tgetDownloadEmlAction,\n\tgetEditAsNewAction,\n\tuseEditDraftAction,\n\tgetForwardAction,\n\tuseMarkRemoveSpam,\n\tuseMoveToFolderAction,\n\tuseMoveToTrashAction,\n\tgetPreviewOnSeparatedWindowAction,\n\tgetPrintAction,\n\tgetReadUnreadAction,\n\tuseRedirectAction,\n\tgetReplyAction,\n\tgetReplyAllAction,\n\tgetSendDraftAction,\n\tgetShowOriginalAction\n} from './get-msg-conv-actions-functions';\nimport { isTrash } from '../carbonio-ui-commons/helpers/folders';\nimport { getFolderIdParts, getParentFolderId, isDraft } from '../helpers/folders';\nimport { isConversation, isSingleMessageConversation } from '../helpers/messages';\nimport { useAppDispatch } from '../hooks/redux';\nimport { addEditor } from '../store/zustand/editor';\nimport { generateEditor } from '../store/zustand/editor/editor-generators';\nimport type { ActionReturnType, Conversation, MailMessage, MessageAction } from '../types';\nimport { useExtraWindowsManager } from '../views/app/extra-windows/extra-window-manager';\n\ntype useMsgConvActionsProps = {\n\titem: MailMessage | Conversation;\n\tdeselectAll: () => void;\n\tmessageActionsForExtraWindow: Array<MessageAction>;\n};\n\nexport type MsgConvActionsReturnType = [\n\tArray<Exclude<ActionReturnType, false>>,\n\tArray<Exclude<ActionReturnType, false>>\n];\n\nexport function useMsgConvActions({\n\titem,\n\tdeselectAll,\n\tmessageActionsForExtraWindow\n}: useMsgConvActionsProps): MsgConvActionsReturnType {\n\tconst getDeletePermanentlyAction = useDeletePermanentlyAction();\n\tconst getEditDraftAction = useEditDraftAction();\n\tconst getMarkRemoveSpam = useMarkRemoveSpam();\n\tconst getMoveToFolderAction = useMoveToFolderAction();\n\tconst getMoveToTrashAction = useMoveToTrashAction();\n\tconst getRedirectAction = useRedirectAction();\n\tconst getCreateAppointmentAction = useCreateAppointmentAction();\n\n\tconst isConv = isConversation(item);\n\tconst folderId = getParentFolderId(item);\n\tconst dispatch = useAppDispatch();\n\tconst tags = useTags();\n\tconst createSnackbar = useSnackbar();\n\tconst { t } = useTranslation();\n\tconst { createWindow } = useExtraWindowsManager();\n\tconst [openAppointmentComposer, isAvailable] = useIntegratedFunction('create_appointment');\n\tif (!folderId) {\n\t\treturn [[], []];\n\t}\n\n\tconst firstConversationMessage = isConv\n\t\t? filter(item?.messages, (msg) => {\n\t\t\t\tconst folderIdParts = getFolderIdParts(msg.parent).id ?? '';\n\t\t\t\treturn !isTrash(folderIdParts) && !isDraft(folderIdParts);\n\t\t\t})?.[0] ?? {}\n\t\t: item;\n\tconst isSingleMsgConv = isSingleMessageConversation(item);\n\tconst { id } = item;\n\n\t/**\n\t * Folders where the actions are enabled or disabled\n\t */\n\tconst foldersExcludedMarkReadUnread = [FOLDERS.DRAFTS];\n\tconst foldersExcludedTrash = [FOLDERS.TRASH];\n\tconst foldersIncludedDeletePermanently = [FOLDERS.TRASH, FOLDERS.SPAM];\n\tconst foldersExcludedTags = [FOLDERS.SPAM];\n\tconst foldersExcludedMarkUnmarkSpam = [FOLDERS.DRAFTS];\n\tconst folderExcludedPrintMessage = [FOLDERS.DRAFTS, FOLDERS.TRASH];\n\tconst folderExcludedShowOriginal = [FOLDERS.DRAFTS, FOLDERS.TRASH];\n\tconst folderIncludeEditDraft = [FOLDERS.DRAFTS];\n\tconst folderExcludedReply = [FOLDERS.DRAFTS, FOLDERS.SPAM];\n\tconst folderExcludedReplyAll = [FOLDERS.DRAFTS, FOLDERS.SPAM];\n\tconst folderExcludedForward = [FOLDERS.DRAFTS, FOLDERS.SPAM];\n\tconst folderExcludedEditAsNew = [FOLDERS.DRAFTS, FOLDERS.TRASH];\n\tconst folderIncludedSendDraft = [FOLDERS.DRAFTS];\n\tconst folderExcludedRedirect = [FOLDERS.DRAFTS, FOLDERS.TRASH];\n\tconst folderExcludedDownloadEML = [FOLDERS.DRAFTS];\n\tconst folderExcludedCreateAppointment = [FOLDERS.DRAFTS, FOLDERS.SPAM];\n\n\tconst addRemoveFlagAction = getAddRemoveFlagAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\titem,\n\t\tdispatch\n\t});\n\n\tconst msgReadUnreadAction = getReadUnreadAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\titem,\n\t\tdispatch,\n\t\tfolderId,\n\t\tdeselectAll,\n\t\tfoldersExcludedMarkReadUnread\n\t});\n\n\tconst moveToTrashAction = getMoveToTrashAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tdispatch,\n\t\tfolderId: firstConversationMessage.parent,\n\t\tdeselectAll,\n\t\tfoldersExcludedTrash\n\t});\n\n\tconst deletePermanentlyAction = getDeletePermanentlyAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tdeselectAll,\n\t\tdispatch,\n\t\tfoldersIncludedDeletePermanently,\n\t\tfolderId: firstConversationMessage.parent\n\t});\n\n\tconst moveToFolderAction = getMoveToFolderAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tdispatch,\n\t\tfolderId: firstConversationMessage.parent,\n\t\tdeselectAll\n\t});\n\n\tconst printAction = getPrintAction({\n\t\tisConversation: isConv,\n\t\titem,\n\t\tfolderExcludedPrintMessage,\n\t\tfolderId\n\t});\n\n\tconst applyTagAction = getApplyTagAction({\n\t\ttags,\n\t\titem,\n\t\tisConversation: isConv,\n\t\tfoldersExcludedTags,\n\t\tfolderId\n\t});\n\n\tconst markRemoveSpam = getMarkRemoveSpam({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tfolderId,\n\t\tdispatch,\n\t\tdeselectAll,\n\t\tfoldersExcludedMarkUnmarkSpam\n\t});\n\n\tconst showOriginalAction = getShowOriginalAction({\n\t\tisConversation: isConv,\n\t\tid: firstConversationMessage.id,\n\t\tfolderExcludedShowOriginal,\n\t\tfolderId: firstConversationMessage.parent\n\t});\n\n\tconst editDraftAction = getEditDraftAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tfolderId,\n\t\tfolderIncludeEditDraft\n\t});\n\n\tconst replyAction = getReplyAction(\n\t\tisConv,\n\t\tisSingleMsgConv,\n\t\tfirstConversationMessage.id,\n\t\tfolderId,\n\t\tid,\n\t\tfolderExcludedReply\n\t);\n\n\tconst replyAllAction = getReplyAllAction({\n\t\tisConversation: isConv,\n\t\tisSingleMessageConversation: isSingleMsgConv,\n\t\tfirstConversationMessageId: firstConversationMessage.id,\n\t\tfolderId,\n\t\tid,\n\t\tfolderExcludedReplyAll\n\t});\n\n\tconst forwardAction = getForwardAction({\n\t\tisConversation: isConv,\n\t\tisSingleMessageConversation: isSingleMsgConv,\n\t\tfirstConversationMessageId: firstConversationMessage.id,\n\t\tfolderId,\n\t\tid,\n\t\tfolderExcludedForward\n\t});\n\n\tconst editAsNewAction = getEditAsNewAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tfolderId,\n\t\tfolderExcludedEditAsNew\n\t});\n\n\tconst sendDraftAction = isConversation(item)\n\t\t? false\n\t\t: getSendDraftAction({\n\t\t\t\titem,\n\t\t\t\tdispatch,\n\t\t\t\tfolderIncludedSendDraft,\n\t\t\t\tfolderId,\n\t\t\t\tgenerateEditor,\n\t\t\t\taddEditor,\n\t\t\t\tcreateSnackbar,\n\t\t\t\tt\n\t\t\t});\n\n\tconst redirectAction = getRedirectAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tfolderExcludedRedirect,\n\t\tfolderId\n\t});\n\n\tconst previewOnSeparatedWindow = getPreviewOnSeparatedWindowAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tfolderId,\n\t\tsubject: item.subject,\n\t\tcreateWindow,\n\t\tmessageActions: messageActionsForExtraWindow\n\t});\n\n\tconst downloadEmlAction = getDownloadEmlAction({\n\t\tisConversation: isConv,\n\t\tid,\n\t\tfolderId,\n\t\tfolderExcludedDownloadEML\n\t});\n\n\tconst createAppointmentAction = getCreateAppointmentAction({\n\t\tisConversation: isConv,\n\t\titem,\n\t\tfolderId,\n\t\tfolderExcludedCreateAppointment,\n\t\topenAppointmentComposer,\n\t\tisAvailable\n\t});\n\n\t/**\n\t * Primary actions are the ones that are shown when the user hovers over a message\n\t * @returns an array of arrays of actions\n\t */\n\tconst primaryActions: Array<Exclude<ActionReturnType, false>> = [\n\t\treplyAction,\n\t\treplyAllAction,\n\t\tforwardAction,\n\t\tmoveToTrashAction,\n\t\tdeletePermanentlyAction,\n\t\tmsgReadUnreadAction,\n\t\taddRemoveFlagAction\n\t].reduce((acc: Array<Exclude<ActionReturnType, false>>, action) => {\n\t\tif (action) {\n\t\t\tacc.push(action);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\t/**\n\t * Secondary actions are the ones that are shown when the user right-clicks on the message\n\t * @returns an array of arrays of actions\n\t */\n\tconst secondaryActions: Array<Exclude<ActionReturnType, false>> = [\n\t\treplyAction,\n\t\treplyAllAction,\n\t\tforwardAction,\n\t\tsendDraftAction,\n\t\tmoveToTrashAction,\n\t\tdeletePermanentlyAction,\n\t\tmsgReadUnreadAction,\n\t\taddRemoveFlagAction,\n\t\tmarkRemoveSpam,\n\t\tapplyTagAction,\n\t\tmoveToFolderAction,\n\t\tcreateAppointmentAction,\n\t\tprintAction,\n\t\tpreviewOnSeparatedWindow,\n\t\tredirectAction,\n\t\teditDraftAction,\n\t\teditAsNewAction,\n\t\tshowOriginalAction,\n\t\tdownloadEmlAction\n\t].reduce((acc: Array<Exclude<ActionReturnType, false>>, action) => {\n\t\tif (action) {\n\t\t\tacc.push(action);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\treturn [primaryActions, secondaryActions];\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\n\nimport { Padding } from '@zextras/carbonio-design-system';\n\nimport MailPreview from './preview/mail-preview';\nimport { useAppSelector } from '../../../hooks/redux';\nimport { useMessageActions } from '../../../hooks/use-message-actions';\nimport { selectMessage } from '../../../store/messages-slice';\nimport { ConvMessage, MailsStateType } from '../../../types';\n\nexport type ConversationMessagePreviewProps = {\n\tconvMessage: ConvMessage;\n\tisExpanded: boolean;\n\tisAlone: boolean;\n\tisInsideExtraWindow: boolean;\n};\n\nexport const ConversationMessagePreview: FC<ConversationMessagePreviewProps> = ({\n\tconvMessage,\n\tisExpanded,\n\tisAlone,\n\tisInsideExtraWindow\n}) => {\n\tconst message = useAppSelector((state: MailsStateType) => selectMessage(state, convMessage.id));\n\tconst messageActions = useMessageActions(message, isAlone);\n\treturn (\n\t\t<Padding bottom=\"medium\" width=\"100%\" data-testid={`ConversationMessagePreview-${message.id}`}>\n\t\t\t<MailPreview\n\t\t\t\tmessage={message}\n\t\t\t\texpanded={isExpanded}\n\t\t\t\tisAlone={isAlone}\n\t\t\t\tmessageActions={messageActions}\n\t\t\t\tisMessageView={false}\n\t\t\t\tisInsideExtraWindow={isInsideExtraWindow}\n\t\t\t/>\n\t\t</Padding>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ReactElement, useCallback, useMemo } from 'react';\n\nimport { Container, Shimmer } from '@zextras/carbonio-design-system';\nimport { map } from 'lodash';\n\nimport { ConversationMessagePreview } from './conversation-message-preview';\nimport { API_REQUEST_STATUS } from '../../../constants';\nimport { useAppSelector } from '../../../hooks/redux';\nimport { selectCurrentFolderExpandedStatus } from '../../../store/conversations-slice';\nimport type { Conversation } from '../../../types';\n\nexport const ConversationPreviewPanel = ({\n\tconversation,\n\tisInsideExtraWindow,\n\tconvSortOrder\n}: {\n\tconversation: Conversation;\n\tisInsideExtraWindow: boolean;\n\tconvSortOrder: string;\n}): ReactElement => {\n\tconst conversationStatus = useAppSelector(selectCurrentFolderExpandedStatus)[conversation.id];\n\n\tconst isExpanded = useCallback(\n\t\t(index: number): boolean => {\n\t\t\tif (convSortOrder === 'dateAsc') {\n\t\t\t\treturn index === conversation.messages.length - 1;\n\t\t\t}\n\t\t\treturn index === 0;\n\t\t},\n\t\t[convSortOrder, conversation.messages.length]\n\t);\n\n\tconst sortSign = useMemo(() => (convSortOrder === 'dateDesc' ? -1 : 1), [convSortOrder]);\n\n\tconst messages = conversation.messages.slice().sort((a, b) => sortSign * (a.date - b.date));\n\n\treturn (\n\t\t<Container\n\t\t\tstyle={{ overflowY: 'auto' }}\n\t\t\theight=\"fill\"\n\t\t\tbackground=\"gray5\"\n\t\t\tpadding={{ horizontal: 'large', bottom: 'small', top: 'large' }}\n\t\t\tmainAlignment=\"flex-start\"\n\t\t>\n\t\t\t<Container height=\"fit\" mainAlignment=\"flex-start\" background=\"gray5\">\n\t\t\t\t{conversation && conversationStatus === API_REQUEST_STATUS.fulfilled ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{map(messages, (message, index) =>\n\t\t\t\t\t\t\tmessage ? (\n\t\t\t\t\t\t\t\t<ConversationMessagePreview\n\t\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\t\tconvMessage={message}\n\t\t\t\t\t\t\t\t\tisExpanded={isExpanded(index)}\n\t\t\t\t\t\t\t\t\tisAlone={conversation.messages?.length === 1}\n\t\t\t\t\t\t\t\t\tisInsideExtraWindow={isInsideExtraWindow}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<Shimmer.Logo size=\"large\" />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<></>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useEffect, useMemo } from 'react';\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport { FOLDERS, useTags, useUserSettings } from '@zextras/carbonio-shell-ui';\nimport { filter } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { ConversationPreviewPanel } from './conversation-preview-panel';\nimport PreviewPanelHeader from './preview/preview-panel-header';\nimport { API_REQUEST_STATUS } from '../../../constants';\nimport { getFolderIdParts } from '../../../helpers/folders';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/redux';\nimport { getConv, searchConv } from '../../../store/actions';\nimport {\n\tselectConversation,\n\tselectConversationExpandedStatus\n} from '../../../store/conversations-slice';\nimport type { MailsStateType } from '../../../types';\nimport { useExtraWindow } from '../extra-windows/use-extra-window';\n\ntype ConversationPreviewPanelProps = {\n\tconversationId?: string;\n\tfolderId?: string;\n};\n\nconst useConversationPreviewPanelParameters = (\n\tprops: ConversationPreviewPanelProps\n): { conversationId: string; folderId: string } => {\n\tconst params = useParams<{ conversationId: string; folderId: string }>();\n\treturn {\n\t\tconversationId: props.conversationId ?? params.conversationId,\n\t\tfolderId: props.folderId ?? params.folderId\n\t};\n};\n\nexport const ConversationPreviewPanelContainer: FC<ConversationPreviewPanelProps> = (props) => {\n\tconst { conversationId, folderId } = useConversationPreviewPanelParameters(props);\n\tconst tagsFromStore = useTags();\n\tconst { isInsideExtraWindow } = useExtraWindow();\n\tconst dispatch = useAppDispatch();\n\tconst conversationsStatus = useAppSelector((state: MailsStateType) =>\n\t\tselectConversationExpandedStatus(state, conversationId)\n\t);\n\n\tconst conversation = useAppSelector(selectConversation(conversationId));\n\tconst settings = useUserSettings();\n\tconst convSortOrder = settings.prefs.zimbraPrefConversationOrder as string;\n\tuseEffect(() => {\n\t\tif (!conversation) {\n\t\t\tdispatch(getConv({ conversationId }));\n\t\t}\n\t}, [conversation, dispatch, conversationId]);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(conversationsStatus !== API_REQUEST_STATUS.fulfilled &&\n\t\t\t\tconversationsStatus !== API_REQUEST_STATUS.pending) ||\n\t\t\t!conversationsStatus\n\t\t) {\n\t\t\tdispatch(searchConv({ conversationId, fetch: 'all', folderId, tags: tagsFromStore }));\n\t\t}\n\t}, [conversationId, conversationsStatus, dispatch, folderId, tagsFromStore]);\n\n\tconst showPreviewPanel = useMemo(\n\t\t(): boolean | undefined =>\n\t\t\tgetFolderIdParts(folderId).id === FOLDERS.TRASH\n\t\t\t\t? conversation && conversation?.messages?.length > 0\n\t\t\t\t: filter(conversation?.messages, (m) => getFolderIdParts(m.parent).id !== FOLDERS.TRASH)\n\t\t\t\t\t\t.length > 0,\n\t\t[conversation, folderId]\n\t);\n\n\treturn (\n\t\t<Container orientation=\"vertical\" mainAlignment=\"flex-start\" crossAlignment=\"flex-start\">\n\t\t\t{showPreviewPanel && (\n\t\t\t\t<>\n\t\t\t\t\t{!isInsideExtraWindow && <PreviewPanelHeader item={conversation} folderId={folderId} />}\n\t\t\t\t\t<ConversationPreviewPanel\n\t\t\t\t\t\tconversation={conversation}\n\t\t\t\t\t\tisInsideExtraWindow={isInsideExtraWindow}\n\t\t\t\t\t\tconvSortOrder={convSortOrder}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\n\nimport { useAppContext } from '@zextras/carbonio-shell-ui';\nimport { useParams } from 'react-router-dom';\n\nimport { MessagePreviewPanel } from './message-preview-panel';\nimport { useAppSelector } from '../../../hooks/redux';\nimport { useMessageActions } from '../../../hooks/use-message-actions';\nimport { useSelection } from '../../../hooks/use-selection';\nimport { selectMessage } from '../../../store/messages-slice';\nimport { AppContext, MailsStateType } from '../../../types';\nimport { useMsgConvActions } from '../../../ui-actions/use-msg-conv-actions';\n\nexport const MessagePreviewPanelContainer: FC = () => {\n\tconst { folderId, messageId } = useParams<{ folderId: string; messageId: string }>();\n\tconst message = useAppSelector((state: MailsStateType) => selectMessage(state, messageId));\n\tconst { setCount } = useAppContext<AppContext>();\n\tconst { deselectAll } = useSelection({ currentFolderId: folderId, setCount, count: 0 });\n\n\tconst messageActionsForExtraWindow = useMessageActions(message, true);\n\tconst messageActions = useMsgConvActions({\n\t\titem: message,\n\t\tdeselectAll,\n\t\tmessageActionsForExtraWindow\n\t});\n\treturn (\n\t\t<MessagePreviewPanel\n\t\t\tfolderId={folderId}\n\t\t\tmessageId={messageId}\n\t\t\tmessageActions={messageActions}\n\t\t/>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, RefObject, memo, useEffect, useMemo } from 'react';\n\nimport { Container, Divider, Padding, Text } from '@zextras/carbonio-design-system';\nimport { find, map, noop, reduce } from 'lodash';\nimport styled from 'styled-components';\n\nimport { ConversationListItemComponent } from './conversation-list-item-component';\nimport { CustomList } from '../../../../carbonio-ui-commons/components/list/list';\nimport { useFolder, useRoot } from '../../../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport type { Conversation } from '../../../../types';\nimport { MultipleSelectionActionsPanel } from '../../../../ui-actions/multiple-selection-actions-panel';\nimport ShimmerList from '../../../search/shimmer-list';\nimport { Breadcrumbs } from '../parts/breadcrumbs';\nimport { getFolderPath } from '../parts/utils/utils';\n\nconst DragImageContainer = styled.div`\n\tposition: absolute;\n\ttop: -312.5rem;\n\tleft: -312.5rem;\n\ttransform: translate(-100%, -100%);\n\twidth: 35vw;\n`;\n\nconst DragItems: FC<{\n\tconversations: Conversation[];\n\tdraggedIds: Record<string, boolean> | undefined;\n}> = ({ conversations, draggedIds }) => {\n\tconst items = reduce(\n\t\tdraggedIds,\n\t\t(acc: Conversation[], v, k) => {\n\t\t\tconst obj = find(conversations, ['id', k]);\n\t\t\tif (obj) {\n\t\t\t\treturn [...acc, obj];\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t[]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{map(items, (item) => (\n\t\t\t\t<ConversationListItemComponent\n\t\t\t\t\titem={item}\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tdraggedIds={draggedIds}\n\t\t\t\t\tactiveItemId={item.id}\n\t\t\t\t\tselected={false}\n\t\t\t\t\tselecting={false}\n\t\t\t\t\ttoggle={noop}\n\t\t\t\t\tselectedIds={[]}\n\t\t\t\t\tdeselectAll={noop}\n\t\t\t\t\tfolderId=\"\"\n\t\t\t\t\tsetDraggedIds={noop}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport type ConversationListComponentProps = {\n\t// the text to display in the side panel\n\tdisplayerTitle: string | null;\n\t// the list of conversations to display\n\tlistItems: React.JSX.Element[];\n\t// the function to call when the list is scrolled to the bottom\n\tloadMore?: () => void;\n\t// the total number of conversations in the list\n\ttotalConversations: number;\n\t// true if the call has been fulfilled\n\tconversationsLoadingCompleted: boolean;\n\t// the ids of the selected conversations\n\tselectedIds: string[];\n\t// the id of the current folder\n\tfolderId: string;\n\t// the conversations to display\n\tconversations: Array<Conversation>;\n\t// the ids of the conversations being dragged\n\tdraggedIds?: Record<string, boolean>;\n\t// the function to call when the user starts dragging a conversation\n\tsetDraggedIds?: (ids: Record<string, boolean>) => void;\n\t// true if the component is in the search module\n\tisSearchModule?: boolean;\n\t// true if the user is in select mode\n\tisSelectModeOn: boolean;\n\t// the selected conversations\n\tselected: Record<string, boolean>;\n\t// the function to call when the user deselects all conversations\n\tdeselectAll: () => void;\n\t// the function to call when the user selects all conversations\n\tselectAll: () => void;\n\t// true if all conversations are selected\n\tisAllSelected: boolean;\n\t// the function to call when the user deselects all conversations\n\tselectAllModeOff: () => void;\n\t// the function to call when the user toggles select mode\n\tsetIsSelectModeOn: (ev: boolean | ((prevState: boolean) => boolean)) => void;\n\t// the reference to the dragged item\n\tdragImageRef?: RefObject<HTMLInputElement>;\n\tlistRef?: React.RefObject<HTMLDivElement>;\n\thasMore?: boolean;\n};\n\nexport const ConversationListComponent: FC<ConversationListComponentProps> = memo(\n\tfunction ConversationListComponent({\n\t\tdisplayerTitle,\n\t\tisSearchModule,\n\t\tisSelectModeOn,\n\t\tfolderId,\n\t\tconversations,\n\t\tselected,\n\t\tdeselectAll,\n\t\tselectAll,\n\t\tisAllSelected,\n\t\tselectAllModeOff,\n\t\tsetIsSelectModeOn,\n\t\tconversationsLoadingCompleted,\n\t\tdraggedIds,\n\t\tsetDraggedIds,\n\t\tloadMore = noop,\n\t\tlistItems,\n\t\ttotalConversations,\n\t\tdragImageRef,\n\t\tlistRef,\n\t\thasMore\n\t}) {\n\t\tuseEffect(() => {\n\t\t\tsetDraggedIds && setDraggedIds(selected);\n\t\t}, [selected, setDraggedIds]);\n\n\t\tconst folder = useFolder(folderId);\n\t\tconst root = useRoot(folder?.id ?? '');\n\n\t\tconst folderPath = useMemo(\n\t\t\t() => getFolderPath(folder, root, isSearchModule),\n\t\t\t[root, folder, isSearchModule]\n\t\t);\n\n\t\tconst showBreadcrumbs = useMemo(\n\t\t\t() =>\n\t\t\t\t!isSearchModule ||\n\t\t\t\ttypeof isSearchModule === 'undefined' ||\n\t\t\t\t(isSearchModule && totalConversations > 0),\n\t\t\t[isSearchModule, totalConversations]\n\t\t);\n\n\t\tconst selectedIds = useMemo(() => Object.keys(selected), [selected]);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{isSelectModeOn ? (\n\t\t\t\t\t<MultipleSelectionActionsPanel\n\t\t\t\t\t\titems={conversations}\n\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\tselectedIds={selectedIds}\n\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\tselectAll={selectAll}\n\t\t\t\t\t\tisAllSelected={isAllSelected}\n\t\t\t\t\t\tselectAllModeOff={selectAllModeOff}\n\t\t\t\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\tshowBreadcrumbs && (\n\t\t\t\t\t\t<Breadcrumbs\n\t\t\t\t\t\t\tfolderPath={folderPath}\n\t\t\t\t\t\t\titemsCount={totalConversations}\n\t\t\t\t\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\t\t\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\t\tisSearchModule={isSearchModule}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t\t{conversationsLoadingCompleted ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Divider color=\"gray2\" />\n\t\t\t\t\t\t{totalConversations > 0 || hasMore ? (\n\t\t\t\t\t\t\t<CustomList\n\t\t\t\t\t\t\t\tonListBottom={(): void => {\n\t\t\t\t\t\t\t\t\tloadMore && loadMore();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tdata-testid={`conversation-list-${folderId}`}\n\t\t\t\t\t\t\t\tref={listRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{listItems}\n\t\t\t\t\t\t\t</CustomList>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t<Padding top=\"medium\">\n\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center', paddingTop: '2rem' }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{displayerTitle}\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<DragImageContainer ref={dragImageRef}>\n\t\t\t\t\t\t\t<DragItems conversations={conversations} draggedIds={draggedIds} />\n\t\t\t\t\t\t</DragImageContainer>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<ShimmerList count={totalConversations} delay={500} />\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, memo, useMemo } from 'react';\n\nimport { Button, Container, ListV2 } from '@zextras/carbonio-design-system';\nimport { useAppContext } from '@zextras/carbonio-shell-ui';\nimport { map, noop } from 'lodash';\n\nimport { CustomListItem } from '../../../../carbonio-ui-commons/components/list/list-item';\nimport { API_REQUEST_STATUS } from '../../../../constants';\nimport { useSelection } from '../../../../hooks/use-selection';\nimport type { AppContext, ConversationMessagesListProps } from '../../../../types';\nimport { MessageListItem } from '../messages/message-list-item';\nimport { DragItemWrapper } from '../parts/drag-item-wrapper';\n\nexport const ConversationMessagesList: FC<ConversationMessagesListProps> = memo(\n\tfunction ConversationMessagesList({\n\t\tactive,\n\t\tconversationStatus,\n\t\tmessages,\n\t\tfolderId,\n\t\tlength,\n\t\tisSearchModule,\n\t\tdragImageRef,\n\t\tsetDraggedIds = noop\n\t}) {\n\t\tconst { setCount, count } = useAppContext<AppContext>();\n\n\t\tconst { selected, toggle, deselectAll, isSelectModeOn } = useSelection({\n\t\t\tcurrentFolderId: folderId,\n\t\t\tsetCount,\n\t\t\tcount,\n\t\t\titems: messages\n\t\t});\n\n\t\tconst listItems = useMemo(\n\t\t\t() =>\n\t\t\t\tmap(messages, (message) => {\n\t\t\t\t\tconst isActive = active === message.id || active === message.conversation;\n\t\t\t\t\tconst isSelected = selected[message.id];\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\t\tselected={false}\n\t\t\t\t\t\t\tactive={isActive}\n\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\tbackground={'transparent'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{(visible: boolean): React.JSX.Element =>\n\t\t\t\t\t\t\t\tvisible ? (\n\t\t\t\t\t\t\t\t\t<DragItemWrapper\n\t\t\t\t\t\t\t\t\t\titem={message}\n\t\t\t\t\t\t\t\t\t\tselectedIds={[]}\n\t\t\t\t\t\t\t\t\t\tselectedItems={{}}\n\t\t\t\t\t\t\t\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\t\t\t\t\t\t\t\tdragImageRef={dragImageRef}\n\t\t\t\t\t\t\t\t\t\tdragAndDropIsDisabled={!!isSearchModule}\n\t\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<MessageListItem\n\t\t\t\t\t\t\t\t\t\t\titem={message}\n\t\t\t\t\t\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\t\t\t\t\t\tselecting={isSelectModeOn}\n\t\t\t\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\t\t\t\t\tactive={isActive}\n\t\t\t\t\t\t\t\t\t\t\tisConvChildren\n\t\t\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t\t\t\tcurrentFolderId={folderId}\n\t\t\t\t\t\t\t\t\t\t\tisSearchModule={isSearchModule}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</DragItemWrapper>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<div style={{ height: '4rem' }} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</CustomListItem>\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t[\n\t\t\t\tactive,\n\t\t\t\tdeselectAll,\n\t\t\t\tdragImageRef,\n\t\t\t\tfolderId,\n\t\t\t\tisSearchModule,\n\t\t\t\tisSelectModeOn,\n\t\t\t\tmessages,\n\t\t\t\tselected,\n\t\t\t\tsetDraggedIds,\n\t\t\t\ttoggle\n\t\t\t]\n\t\t);\n\n\t\tif (conversationStatus !== API_REQUEST_STATUS.fulfilled) {\n\t\t\treturn (\n\t\t\t\t<Container height={64 * length}>\n\t\t\t\t\t<Button loading disabled label=\"\" type=\"ghost\" onClick={noop} />\n\t\t\t\t</Container>\n\t\t\t);\n\t\t}\n\n\t\treturn <ListV2 style={{ paddingBottom: '0.25rem' }}>{listItems}</ListV2>;\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Icon, Padding, Row, Text } from '@zextras/carbonio-design-system';\nimport { Tag } from '@zextras/carbonio-shell-ui';\nimport React, { FC, useMemo } from 'react';\nimport { getTimeLabel } from '../../../../commons/utils';\nimport type { Conversation } from '../../../../types';\nimport { useTagExist } from '../../../../ui-actions/tag-actions';\n\ntype RowInfoProps = {\n\titem: Conversation;\n\ttags: Array<Tag>;\n\tisSearchModule?: boolean;\n\tallMessagesInTrash?: boolean;\n};\n\nexport const RowInfo: FC<RowInfoProps> = ({ item, tags, isSearchModule, allMessagesInTrash }) => {\n\tconst date = useMemo(() => getTimeLabel(item.date), [item.date]);\n\n\tconst tagIcon = useMemo(() => (tags?.length > 1 ? 'TagsMoreOutline' : 'Tag'), [tags]);\n\tconst tagIconColor = useMemo(() => (tags?.length === 1 ? tags?.[0]?.color : undefined), [tags]);\n\n\tconst isTagInStore = useTagExist(tags);\n\tconst showTagIcon = useMemo(\n\t\t() => item.tags && item.tags.length !== 0 && item.tags?.[0] !== '' && isTagInStore,\n\t\t[isTagInStore, item.tags]\n\t);\n\n\treturn (\n\t\t<Row>\n\t\t\t{allMessagesInTrash && isSearchModule && (\n\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t<Icon data-testid=\"TrashIcon\" icon=\"Trash2Outline\" />\n\t\t\t\t</Padding>\n\t\t\t)}\n\t\t\t{showTagIcon && (\n\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t<Icon data-testid=\"TagIcon\" icon={tagIcon} color={`${tagIconColor}`} />\n\t\t\t\t</Padding>\n\t\t\t)}\n\t\t\t{item.hasAttachment && (\n\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t<Icon data-testid=\"AttachmentIcon\" icon=\"AttachOutline\" />\n\t\t\t\t</Padding>\n\t\t\t)}\n\t\t\t{item.flagged && (\n\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t<Icon data-testid=\"FlagIcon\" color=\"error\" icon=\"Flag\" />\n\t\t\t\t</Padding>\n\t\t\t)}\n\t\t\t<Padding left=\"small\" data-testid=\"DateLabel\">\n\t\t\t\t<Text size=\"extrasmall\">{date}</Text>\n\t\t\t</Padding>\n\t\t</Row>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, memo, useCallback, useMemo, useState } from 'react';\n\nimport {\n\tBadge,\n\tContainer,\n\tContainerProps,\n\tIcon,\n\tIconButton,\n\tPadding,\n\tRow,\n\tText,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport {\n\tFOLDERS,\n\tTag,\n\tZIMBRA_STANDARD_COLORS,\n\tpushHistory,\n\tt,\n\tuseTags,\n\tuseUserAccounts,\n\tuseUserSettings\n} from '@zextras/carbonio-shell-ui';\nimport { filter, find, forEach, includes, isEmpty, reduce, trimStart, uniqBy } from 'lodash';\nimport styled from 'styled-components';\n\nimport { ConversationMessagesList } from './conversation-messages-list';\nimport { getFolderParentId } from './utils';\nimport { participantToString } from '../../../../commons/utils';\nimport { API_REQUEST_STATUS } from '../../../../constants';\nimport { getFolderIdParts } from '../../../../helpers/folders';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/redux';\nimport { searchConv } from '../../../../store/actions';\nimport { selectConversationExpandedStatus } from '../../../../store/conversations-slice';\nimport { selectMessages } from '../../../../store/messages-slice';\nimport type {\n\tConvMessage,\n\tConversationListItemProps,\n\tIncompleteMessage,\n\tMailsStateType,\n\tTextReadValuesProps\n} from '../../../../types';\nimport {\n\tpreviewConversationOnSeparatedWindowAction,\n\tsetConversationsRead\n} from '../../../../ui-actions/conversation-actions';\nimport { useGlobalExtraWindowManager } from '../../extra-windows/global-extra-window-manager';\nimport { ItemAvatar } from '../parts/item-avatar';\nimport { ListItemActionWrapper } from '../parts/list-item-actions-wrapper';\nimport { RowInfo } from '../parts/row-info';\nimport { SenderName } from '../parts/sender-name';\n\nconst CollapseElement = styled(Container)<ContainerProps & { open: boolean }>`\n\tdisplay: ${({ open }): string => (open ? 'block' : 'none')};\n`;\n\nexport const ConversationListItem: FC<ConversationListItemProps> = memo(\n\tfunction ConversationListItem({\n\t\titem,\n\t\tselected,\n\t\tselecting,\n\t\ttoggle,\n\t\tactive,\n\t\tisSearchModule,\n\t\tactiveItemId,\n\t\tdragImageRef,\n\t\tdeselectAll,\n\t\tfolderId,\n\t\tsetDraggedIds\n\t}) {\n\t\tconst dispatch = useAppDispatch();\n\t\tconst [open, setOpen] = useState(false);\n\t\tconst accounts = useUserAccounts();\n\t\tconst messages = useAppSelector(selectMessages);\n\t\tconst isConversation = 'messages' in (item || {});\n\t\tconst { createWindow } = useGlobalExtraWindowManager();\n\n\t\tconst folderParent = getFolderParentId({ folderId: folderId ?? '', isConversation, item });\n\n\t\tconst conversationStatus = useAppSelector((state: MailsStateType) =>\n\t\t\tselectConversationExpandedStatus(state, item.id)\n\t\t);\n\t\tconst tagsFromStore = useTags();\n\t\tconst tags = useMemo(\n\t\t\t() =>\n\t\t\t\tuniqBy(\n\t\t\t\t\treduce(\n\t\t\t\t\t\ttagsFromStore,\n\t\t\t\t\t\t(acc: Array<Tag>, v) => {\n\t\t\t\t\t\t\tif (includes(item.tags, v.id)) {\n\t\t\t\t\t\t\t\tacc.push({\n\t\t\t\t\t\t\t\t\t...v,\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\tcolor: ZIMBRA_STANDARD_COLORS[v.color || 0].hex\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (item.tags?.length > 0 && !includes(item.tags, v.id)) {\n\t\t\t\t\t\t\t\tforEach(\n\t\t\t\t\t\t\t\t\tfilter(item.tags, (tn) => tn.includes('nil:')),\n\t\t\t\t\t\t\t\t\t(tagNotInList) => {\n\t\t\t\t\t\t\t\t\t\tacc.push({\n\t\t\t\t\t\t\t\t\t\t\tid: tagNotInList,\n\t\t\t\t\t\t\t\t\t\t\tname: tagNotInList.split(':')[1],\n\t\t\t\t\t\t\t\t\t\t\tcolor: 1\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[]\n\t\t\t\t\t),\n\t\t\t\t\t'id'\n\t\t\t\t),\n\t\t\t[item.tags, tagsFromStore]\n\t\t);\n\n\t\tconst sortBy = useUserSettings()?.prefs?.zimbraPrefConversationOrder || 'dateDesc';\n\t\tconst zimbraPrefMarkMsgRead = useUserSettings()?.prefs?.zimbraPrefMarkMsgRead !== '-1';\n\t\tconst participantsString = useMemo(\n\t\t\t() =>\n\t\t\t\treduce(\n\t\t\t\t\tuniqBy(item.participants, (em) => em.address),\n\t\t\t\t\t(acc, part) => trimStart(`${acc}, ${participantToString(part, accounts)}`, ', '),\n\t\t\t\t\t''\n\t\t\t\t),\n\t\t\t[item.participants, accounts]\n\t\t);\n\n\t\tconst toggleOpen = useCallback(\n\t\t\t(e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tsetOpen((currentlyOpen) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!currentlyOpen &&\n\t\t\t\t\t\tconversationStatus !== API_REQUEST_STATUS.fulfilled &&\n\t\t\t\t\t\tconversationStatus !== API_REQUEST_STATUS.pending\n\t\t\t\t\t) {\n\t\t\t\t\t\tdispatch(searchConv({ folderId: folderParent, conversationId: item.id, fetch: 'all' }));\n\t\t\t\t\t}\n\t\t\t\t\treturn !currentlyOpen;\n\t\t\t\t});\n\t\t\t},\n\t\t\t[conversationStatus, dispatch, folderParent, item.id]\n\t\t);\n\n\t\tconst _onClick = useCallback(\n\t\t\t(e) => {\n\t\t\t\tif (!e.isDefaultPrevented()) {\n\t\t\t\t\tif (item?.read === false && zimbraPrefMarkMsgRead) {\n\t\t\t\t\t\tsetConversationsRead({\n\t\t\t\t\t\t\tids: [item.id],\n\t\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t\tfolderId: folderParent,\n\t\t\t\t\t\t\tdeselectAll,\n\t\t\t\t\t\t\tshouldReplaceHistory: false\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t}).onClick();\n\t\t\t\t\t}\n\t\t\t\t\tpushHistory(`/folder/${folderParent}/conversation/${item.id}`);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[item?.read, item.id, zimbraPrefMarkMsgRead, folderParent, dispatch, deselectAll]\n\t\t);\n\n\t\tconst _onDoubleClick = useCallback(\n\t\t\t(e) => {\n\t\t\t\tif (e.isDefaultPrevented()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { id, isDraft } = item.messages[0];\n\t\t\t\tif (isDraft) {\n\t\t\t\t\tpushHistory(`/folder/${folderParent}/edit/${id}?action=editAsDraft`);\n\t\t\t\t} else {\n\t\t\t\t\tpreviewConversationOnSeparatedWindowAction(\n\t\t\t\t\t\titem.id,\n\t\t\t\t\t\tfolderParent,\n\t\t\t\t\t\titem.subject,\n\t\t\t\t\t\tcreateWindow\n\t\t\t\t\t).onClick();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t[createWindow, folderParent, item.id, item.messages, item.subject]\n\t\t);\n\n\t\tconst toggleExpandButtonLabel = useMemo(\n\t\t\t() => (open ? t('label.hide', 'Hide') : t('label.expand', 'Expand')),\n\t\t\t[open]\n\t\t);\n\t\tconst subject = useMemo(\n\t\t\t() => item.subject || t('label.no_subject_with_tags', '<No Subject>'),\n\t\t\t[item.subject]\n\t\t);\n\t\tconst subFragmentTooltipLabel = useMemo(\n\t\t\t() => (!isEmpty(item.fragment) ? item.fragment : subject),\n\t\t\t[subject, item.fragment]\n\t\t);\n\t\tconst sortSign = useMemo(() => (sortBy === 'dateDesc' ? -1 : 1), [sortBy]);\n\n\t\t// this is the array of all the messages of this conversation to render in this folder\n\t\tconst messagesToRender = useMemo(\n\t\t\t() =>\n\t\t\t\tuniqBy(\n\t\t\t\t\treduce<ConvMessage, IncompleteMessage[]>(\n\t\t\t\t\t\titem.messages,\n\t\t\t\t\t\t(acc, v) => {\n\t\t\t\t\t\t\tconst msg = find(messages, ['id', v.id]);\n\n\t\t\t\t\t\t\tif (msg) {\n\t\t\t\t\t\t\t\t// in trash, we show all messages of the conversation even if only one is deleted\n\t\t\t\t\t\t\t\tif (getFolderIdParts(folderParent).id === FOLDERS.TRASH) {\n\t\t\t\t\t\t\t\t\treturn [...acc, msg];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// all other messages are valid and must be showed in the conversation\n\t\t\t\t\t\t\t\treturn [...acc, msg];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[]\n\t\t\t\t\t).sort((a, b) => (a.date && b.date ? sortSign * (a.date - b.date) : 1)),\n\t\t\t\t\t'id'\n\t\t\t\t),\n\t\t\t[item, messages, folderParent, sortSign]\n\t\t);\n\n\t\t/**\n\t\t * This is the number of messages to display in the conversation badge.\n\t\t * In search module we check if the user has enabled the option to show trashed and/or spam messages\n\t\t * @returns {number}\n\t\t */\n\t\tconst getmsgToDisplayCount = useCallback((): number => item.messagesInConversation, [item]);\n\n\t\tconst textReadValues: TextReadValuesProps = useMemo(() => {\n\t\t\tif (typeof item.read === 'undefined')\n\t\t\t\treturn { color: 'text', weight: 'regular', badge: 'read' };\n\t\t\treturn item.read\n\t\t\t\t? { color: 'text', weight: 'regular', badge: 'read' }\n\t\t\t\t: { color: 'primary', weight: 'bold', badge: 'unread' };\n\t\t}, [item.read]);\n\n\t\tconst renderBadge = useMemo(() => {\n\t\t\tif (item.messagesInConversation === 1) return textReadValues.badge === 'unread';\n\t\t\tif (item.messagesInConversation > 0) return true;\n\t\t\tif (item?.messages?.length === 1) {\n\t\t\t\treturn textReadValues.badge === 'unread';\n\t\t\t}\n\t\t\treturn item?.messages?.length > 0;\n\t\t}, [item?.messages?.length, item.messagesInConversation, textReadValues.badge]);\n\n\t\treturn (\n\t\t\t<Container mainAlignment=\"flex-start\" data-testid={`ConversationListItem-${item.id}`}>\n\t\t\t\t<ListItemActionWrapper\n\t\t\t\t\titem={item}\n\t\t\t\t\tactive={active}\n\t\t\t\t\tonClick={_onClick}\n\t\t\t\t\tonDoubleClick={_onDoubleClick}\n\t\t\t\t\thoverTooltipLabel={participantsString}\n\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ alignSelf: 'center' }}\n\t\t\t\t\t\tdata-testid={`conversation-list-item-avatar-${item.id}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ItemAvatar\n\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tselecting={selecting}\n\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\tfolderId={folderParent}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Row\n\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\t\twrap=\"wrap\"\n\t\t\t\t\t\tpadding={{ left: 'small', top: 'small', bottom: 'small', right: 'large' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Container orientation=\"horizontal\" height=\"fit\" width=\"fill\">\n\t\t\t\t\t\t\t<SenderName item={item} textValues={textReadValues} />\n\t\t\t\t\t\t\t<RowInfo item={item} tags={tags} />\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Container orientation=\"horizontal\" height=\"fit\" width=\"fill\" crossAlignment=\"center\">\n\t\t\t\t\t\t\t{renderBadge && (\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t<Padding right=\"extrasmall\">\n\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\tdata-testid={`conversation-messages-count-${item.id}`}\n\t\t\t\t\t\t\t\t\t\t\tvalue={getmsgToDisplayCount()}\n\t\t\t\t\t\t\t\t\t\t\ttype={textReadValues.badge}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t<Tooltip label={subFragmentTooltipLabel} overflow=\"break-word\" maxWidth=\"60vw\">\n\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\twrap=\"nowrap\"\n\t\t\t\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\t\t\tcrossAlignment=\"baseline\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\tdata-testid=\"Subject\"\n\t\t\t\t\t\t\t\t\t\tweight={textReadValues.weight}\n\t\t\t\t\t\t\t\t\t\tcolor={item.subject ? 'text' : 'secondary'}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{subject}\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t{item.urgent && <Icon data-testid=\"UrgentIcon\" icon=\"ArrowUpward\" color=\"error\" />}\n\t\t\t\t\t\t\t\t{item.messagesInConversation > 1 && (\n\t\t\t\t\t\t\t\t\t<Tooltip label={toggleExpandButtonLabel}>\n\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\tdata-testid=\"ToggleExpand\"\n\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\ticon={open ? 'ArrowIosUpward' : 'ArrowIosDownward'}\n\t\t\t\t\t\t\t\t\t\t\tonClick={toggleOpen}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Row>\n\t\t\t\t</ListItemActionWrapper>\n\t\t\t\t{open && (\n\t\t\t\t\t<CollapseElement\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\tdata-testid=\"ConversationExpander\"\n\t\t\t\t\t\tpadding={{ left: 'extralarge' }}\n\t\t\t\t\t\theight=\"auto\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<ConversationMessagesList\n\t\t\t\t\t\t\tactive={activeItemId}\n\t\t\t\t\t\t\tlength={item.messagesInConversation}\n\t\t\t\t\t\t\tmessages={messagesToRender}\n\t\t\t\t\t\t\tconversationStatus={conversationStatus}\n\t\t\t\t\t\t\tfolderId={folderParent}\n\t\t\t\t\t\t\tdragImageRef={dragImageRef}\n\t\t\t\t\t\t\tisSearchModule={isSearchModule}\n\t\t\t\t\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</CollapseElement>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t);\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport type { Conversation } from '../../../../types';\n\nexport function getFolderParentId({\n\tfolderId,\n\tisConversation,\n\titem\n}: {\n\tfolderId: string | undefined;\n\tisConversation: boolean;\n\titem: Conversation;\n}): string {\n\tif (folderId) return folderId;\n\tif (isConversation) return item?.messages?.[0]?.parent;\n\treturn item?.parent;\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, RefObject } from 'react';\n\nimport { ConversationListItem } from './conversation-list-item';\nimport type { Conversation } from '../../../../types';\nimport { DragItemWrapper } from '../parts/drag-item-wrapper';\n\ntype ConversationListItemComponentProps = {\n\titem: Conversation;\n\tactiveItemId: string;\n\tselected: boolean;\n\tselecting: boolean;\n\ttoggle: (id: string) => void;\n\tactive?: boolean;\n\tsetDraggedIds: (ids: Record<string, boolean>) => void;\n\tdraggedIds?: Record<string, boolean>;\n\tselectedItems?: Record<string, boolean>;\n\tdragImageRef?: RefObject<HTMLInputElement>;\n\tisSearchModule?: boolean;\n\tselectedIds?: string[];\n\tdeselectAll: () => void;\n\tfolderId: string;\n\tvisible?: boolean;\n};\n\nexport const ConversationListItemComponent: FC<ConversationListItemComponentProps> = ({\n\tactiveItemId,\n\titem,\n\tselected,\n\tselecting,\n\ttoggle,\n\tactive,\n\tsetDraggedIds,\n\tdraggedIds,\n\tselectedItems = {},\n\tdragImageRef,\n\tisSearchModule,\n\tselectedIds = [],\n\tdeselectAll,\n\tfolderId,\n\tvisible\n}) => (\n\t<DragItemWrapper\n\t\titem={item}\n\t\tselectedIds={selectedIds}\n\t\tselectedItems={selectedItems}\n\t\tsetDraggedIds={setDraggedIds}\n\t\tdragImageRef={dragImageRef}\n\t\tdragAndDropIsDisabled={!!isSearchModule}\n\t\tdeselectAll={deselectAll}\n\t>\n\t\t<ConversationListItem\n\t\t\tactiveItemId={activeItemId}\n\t\t\titem={item}\n\t\t\tselected={selected}\n\t\t\tselecting={selecting}\n\t\t\ttoggle={toggle}\n\t\t\tactive={active}\n\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\tdraggedIds={draggedIds}\n\t\t\tselectedItems={selectedItems}\n\t\t\tdragImageRef={dragImageRef}\n\t\t\tisSearchModule={isSearchModule}\n\t\t\tisConvChildren\n\t\t\tdeselectAll={deselectAll}\n\t\t\tfolderId={folderId}\n\t\t\tvisible={visible}\n\t\t/>\n\t</DragItemWrapper>\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, memo, useCallback, useEffect, useMemo } from 'react';\n\nimport { Container, Padding, Text } from '@zextras/carbonio-design-system';\nimport { find, map, noop, reduce } from 'lodash';\nimport styled from 'styled-components';\n\nimport { MessageListItem } from './message-list-item';\nimport { CustomList } from '../../../../carbonio-ui-commons/components/list/list';\nimport { useFolder, useRoot } from '../../../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport type { IncompleteMessage, MailMessage, MessageListItemProps } from '../../../../types';\nimport { MultipleSelectionActionsPanel } from '../../../../ui-actions/multiple-selection-actions-panel';\nimport ShimmerList from '../../../search/shimmer-list';\nimport { Breadcrumbs } from '../parts/breadcrumbs';\nimport { getFolderPath } from '../parts/utils/utils';\n\nconst DragImageContainer = styled.div`\n\tposition: absolute;\n\ttop: -312.5rem;\n\tleft: -312.5rem;\n\ttransform: translate(-100%, -100%);\n\twidth: 35vw;\n`;\n\nconst DragItems: FC<{\n\tmessages: IncompleteMessage[];\n\tdraggedIds: Record<string, boolean>;\n\tfolderId: string;\n}> = ({ messages, draggedIds, folderId }) => {\n\tconst items = reduce<typeof draggedIds, MessageListItemProps['item'][]>(\n\t\tdraggedIds,\n\t\t(acc, v, k) => {\n\t\t\tconst obj = find(messages, ['id', k]);\n\t\t\tif (obj) {\n\t\t\t\treturn [...acc, obj];\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t[]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{map(items, (item) => (\n\t\t\t\t<MessageListItem\n\t\t\t\t\titem={item}\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tisConvChildren={false}\n\t\t\t\t\ttoggle={noop}\n\t\t\t\t\tselected={false}\n\t\t\t\t\tselecting={false}\n\t\t\t\t\tvisible={false}\n\t\t\t\t\tdeselectAll={noop}\n\t\t\t\t\tcurrentFolderId={folderId}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport type MessageListComponentProps = {\n\t// the text to display in the side panel\n\tdisplayerTitle: string | null;\n\t// the list of messages to display\n\tlistItems: React.JSX.Element[];\n\t// the function to call when the list is scrolled to the bottom\n\tloadMore?: () => void;\n\t// the total number of messages in the list\n\ttotalMessages: number;\n\t// true if the call has been fulfilled\n\tmessagesLoadingCompleted: boolean;\n\t// the ids of the selected messages\n\tselectedIds: string[];\n\t// the id of the current folder\n\tfolderId: string;\n\t// the messages to display\n\tmessages: MailMessage[];\n\t// the ids of the messages being dragged\n\tdraggedIds?: Record<string, boolean>;\n\t// the function to call when the user starts dragging a message\n\tsetDraggedIds: (ids: Record<string, boolean>) => void;\n\t// true if the component is in the search module\n\tisSearchModule?: boolean;\n\t// true if the user is in select mode\n\tisSelectModeOn: boolean;\n\t// the selected messages\n\tselected: Record<string, boolean>;\n\t// the function to call when the user deselects all messages\n\tdeselectAll: () => void;\n\t// the function to call when the user selects all messages\n\tselectAll: () => void;\n\t// true if all messages are selected\n\tisAllSelected: boolean;\n\t// the function to call when the user deselects all messages\n\tselectAllModeOff: () => void;\n\t// the function to call when the user toggles select mode\n\tsetIsSelectModeOn: (ev: boolean | ((prevState: boolean) => boolean)) => void;\n\t// the ref to the item being dragged\n\tdragImageRef?: React.RefObject<HTMLInputElement>;\n\tlistRef?: React.RefObject<HTMLDivElement>;\n\thasMore?: boolean;\n};\n\nexport const MessageListComponent: FC<MessageListComponentProps> = memo(\n\tfunction MessageListComponent({\n\t\tdisplayerTitle,\n\t\tlistItems,\n\t\tloadMore = noop,\n\t\ttotalMessages,\n\t\tmessagesLoadingCompleted,\n\t\tselectedIds,\n\t\tfolderId,\n\t\tmessages,\n\t\tdraggedIds,\n\t\tsetDraggedIds,\n\t\tisSearchModule,\n\t\tisSelectModeOn,\n\t\tselected,\n\t\tdeselectAll,\n\t\tselectAll,\n\t\tisAllSelected,\n\t\tselectAllModeOff,\n\t\tsetIsSelectModeOn,\n\t\tdragImageRef,\n\t\thasMore,\n\t\tlistRef\n\t}) {\n\t\tuseEffect(() => {\n\t\t\tsetDraggedIds && setDraggedIds(selected);\n\t\t}, [selected, setDraggedIds]);\n\n\t\tconst folder = useFolder(folderId);\n\t\tconst root = useRoot(folder?.id ?? '');\n\t\tconst showBreadcrumbs = useMemo(\n\t\t\t() =>\n\t\t\t\t!isSearchModule ||\n\t\t\t\ttypeof isSearchModule === 'undefined' ||\n\t\t\t\t(isSearchModule && totalMessages > 0),\n\t\t\t[isSearchModule, totalMessages]\n\t\t);\n\n\t\tconst folderPath = useMemo(\n\t\t\t() => getFolderPath(folder, root, isSearchModule),\n\t\t\t[root, folder, isSearchModule]\n\t\t);\n\n\t\tconst onListBottom = useCallback((): void => {\n\t\t\tloadMore && loadMore();\n\t\t}, [loadMore]);\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{isSelectModeOn ? (\n\t\t\t\t\t<MultipleSelectionActionsPanel\n\t\t\t\t\t\titems={messages}\n\t\t\t\t\t\tselectedIds={selectedIds}\n\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\tselectAll={selectAll}\n\t\t\t\t\t\tisAllSelected={isAllSelected}\n\t\t\t\t\t\tselectAllModeOff={selectAllModeOff}\n\t\t\t\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\tshowBreadcrumbs && (\n\t\t\t\t\t\t<Breadcrumbs\n\t\t\t\t\t\t\tfolderPath={folderPath}\n\t\t\t\t\t\t\titemsCount={totalMessages}\n\t\t\t\t\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\t\t\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\t\tisSearchModule={isSearchModule}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t\t{messagesLoadingCompleted ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{totalMessages > 0 || hasMore ? (\n\t\t\t\t\t\t\t<CustomList\n\t\t\t\t\t\t\t\tonListBottom={onListBottom}\n\t\t\t\t\t\t\t\tdata-testid={`message-list-${folderId}`}\n\t\t\t\t\t\t\t\tref={listRef}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{listItems}\n\t\t\t\t\t\t\t</CustomList>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t<Padding top=\"medium\">\n\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center', paddingTop: '2rem' }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{displayerTitle}\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<DragImageContainer ref={dragImageRef}>\n\t\t\t\t\t\t\t<DragItems messages={messages} draggedIds={draggedIds ?? {}} folderId={folderId} />\n\t\t\t\t\t\t</DragImageContainer>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<ShimmerList count={totalMessages} />\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, memo } from 'react';\n\nimport { noop } from 'lodash';\n\nimport { MessageListItem } from './message-list-item';\nimport type { IncompleteMessage } from '../../../../types';\nimport { DragItemWrapper } from '../parts/drag-item-wrapper';\n\nexport type ListItemComponentProps = {\n\tmessage: IncompleteMessage;\n\tselected: Record<string, boolean>;\n\tisSelected: boolean;\n\tactive: boolean;\n\ttoggle: (id: string) => void;\n\tisSelectModeOn: boolean;\n\tdragImageRef?: React.MutableRefObject<HTMLDivElement | null>;\n\tdraggedIds?: Record<string, boolean>;\n\tisSearchModule?: boolean;\n\tdeselectAll: () => void;\n\tvisible: boolean;\n\tsetDraggedIds?: (ids: Record<string, boolean>) => void;\n\tcurrentFolderId?: string;\n};\n\nexport const MessageListItemComponent: FC<ListItemComponentProps & { clicker?: boolean }> = memo(\n\tfunction MessageListItemComponent({\n\t\tmessage,\n\t\tselected,\n\t\tisSelected,\n\t\tactive,\n\t\ttoggle,\n\t\tisSelectModeOn,\n\t\tdragImageRef,\n\t\tisSearchModule,\n\t\tdeselectAll,\n\t\tvisible,\n\t\tsetDraggedIds = noop,\n\t\tcurrentFolderId\n\t}) {\n\t\treturn (\n\t\t\t<DragItemWrapper\n\t\t\t\titem={message}\n\t\t\t\tselectedIds={[]}\n\t\t\t\tselectedItems={selected}\n\t\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\t\tdragImageRef={dragImageRef}\n\t\t\t\tdragAndDropIsDisabled={!!isSearchModule}\n\t\t\t\tdeselectAll={deselectAll}\n\t\t\t>\n\t\t\t\t<MessageListItem\n\t\t\t\t\titem={message}\n\t\t\t\t\tselected={isSelected}\n\t\t\t\t\tselecting={isSelectModeOn}\n\t\t\t\t\tisConvChildren={false}\n\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\tactive={active}\n\t\t\t\t\tvisible={visible}\n\t\t\t\t\tisSearchModule={isSearchModule}\n\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\tcurrentFolderId={currentFolderId}\n\t\t\t\t/>\n\t\t\t</DragItemWrapper>\n\t\t);\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, memo, useCallback, useMemo } from 'react';\n\nimport {\n\tBadge,\n\tContainer,\n\tIcon,\n\tPadding,\n\tRow,\n\tText,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport {\n\tTag,\n\tZIMBRA_STANDARD_COLORS,\n\taddBoard,\n\treplaceHistory,\n\tt,\n\tuseTags,\n\tuseUserAccounts,\n\tuseUserSettings\n} from '@zextras/carbonio-shell-ui';\nimport { find, includes, isEmpty, noop, reduce } from 'lodash';\nimport moment from 'moment';\n\nimport { useFolder } from '../../../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport { getTimeLabel, participantToString } from '../../../../commons/utils';\nimport { EditViewActions, MAILS_ROUTE } from '../../../../constants';\nimport { useAppDispatch } from '../../../../hooks/redux';\nimport { useMessageActions } from '../../../../hooks/use-message-actions';\nimport type { BoardContext, MessageListItemProps, TextReadValuesType } from '../../../../types';\nimport {\n\tpreviewMessageOnSeparatedWindow,\n\tsetMsgRead\n} from '../../../../ui-actions/message-actions';\nimport { useTagExist } from '../../../../ui-actions/tag-actions';\nimport { getFolderTranslatedName } from '../../../sidebar/utils';\nimport { useGlobalExtraWindowManager } from '../../extra-windows/global-extra-window-manager';\nimport { ItemAvatar } from '../parts/item-avatar';\nimport { ListItemActionWrapper } from '../parts/list-item-actions-wrapper';\nimport { SenderName } from '../parts/sender-name';\n\nexport const MessageListItem: FC<MessageListItemProps & { clicker?: (value: boolean) => void }> =\n\tmemo(function MessageListItem({\n\t\titem,\n\t\tselected,\n\t\tselecting,\n\t\ttoggle,\n\t\tisConvChildren,\n\t\tactive,\n\t\tisSearchModule,\n\t\tdeselectAll,\n\t\tcurrentFolderId,\n\t\tclicker = () => {}\n\t}) {\n\t\tconst firstChildFolderId = currentFolderId ?? item.parent;\n\n\t\tconst dispatch = useAppDispatch();\n\t\tconst zimbraPrefMarkMsgRead = useUserSettings()?.prefs?.zimbraPrefMarkMsgRead !== '-1';\n\t\tconst { createWindow } = useGlobalExtraWindowManager();\n\t\tconst messageActions = useMessageActions(item, true);\n\n\t\tconst onClick = useCallback(\n\t\t\t(e) => {\n\t\t\t\tif (!e.isDefaultPrevented()) {\n\t\t\t\t\tif (item.read === false && zimbraPrefMarkMsgRead) {\n\t\t\t\t\t\tsetMsgRead({ ids: [item.id], value: false, dispatch }).onClick(e);\n\t\t\t\t\t}\n\t\t\t\t\treplaceHistory(`/folder/${firstChildFolderId}/message/${item.id}`);\n\t\t\t\t\tclicker(true);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[item.read, item.id, zimbraPrefMarkMsgRead, firstChildFolderId, dispatch, clicker]\n\t\t);\n\t\tconst onDoubleClick = useCallback(\n\t\t\t(e) => {\n\t\t\t\tif (!e.isDefaultPrevented()) {\n\t\t\t\t\tconst { id, isDraft } = item;\n\t\t\t\t\tif (isDraft) {\n\t\t\t\t\t\taddBoard<BoardContext>({\n\t\t\t\t\t\t\turl: `${MAILS_ROUTE}/edit?action=${EditViewActions.EDIT_AS_DRAFT}&id=${id}`,\n\t\t\t\t\t\t\ttitle: ''\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpreviewMessageOnSeparatedWindow(\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tfirstChildFolderId,\n\t\t\t\t\t\t\titem.subject,\n\t\t\t\t\t\t\tcreateWindow,\n\t\t\t\t\t\t\tmessageActions\n\t\t\t\t\t\t).onClick();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t[createWindow, firstChildFolderId, item, messageActions]\n\t\t);\n\n\t\tconst accounts = useUserAccounts();\n\t\tconst tagsFromStore = useTags();\n\t\tconst messageFolder = useFolder(item.parent);\n\t\tconst [date] = useMemo(() => {\n\t\t\tif (item) {\n\t\t\t\tconst sender = find(item.participants, ['type', 'f']);\n\t\t\t\treturn [getTimeLabel(item.date), participantToString(sender, accounts)];\n\t\t\t}\n\t\t\treturn ['.', '.', '', ''];\n\t\t}, [item, accounts]);\n\n\t\tconst [showIcon, icon, iconTooltip, iconId, color] = useMemo(() => {\n\t\t\tif (!item) return [false, '', '', '', ''];\n\t\t\tif (item.isSentByMe && !item.isDraft && !item.isReplied && !item.isForwarded) {\n\t\t\t\treturn [true, 'PaperPlaneOutline', t('label.sent', 'Sent'), 'SentIcon', 'secondary'];\n\t\t\t}\n\t\t\tif (item.isDraft) {\n\t\t\t\treturn [true, 'FileOutline', t('label.draft', 'Draft'), 'DraftIcon', 'secondary'];\n\t\t\t}\n\t\t\tif (item.isReplied) {\n\t\t\t\treturn [true, 'UndoOutline', t('label.replied', 'Replied'), 'RepliedIcon', 'secondary'];\n\t\t\t}\n\t\t\tif (\n\t\t\t\titem.read === false &&\n\t\t\t\t!item.isReplied &&\n\t\t\t\t!item.isDraft &&\n\t\t\t\t!item.isSentByMe &&\n\t\t\t\t!item.isForwarded\n\t\t\t) {\n\t\t\t\treturn [true, 'EmailOutline', t('search.unread', 'Unread'), 'UnreadIcon', 'primary'];\n\t\t\t}\n\t\t\tif (\n\t\t\t\titem.read !== false &&\n\t\t\t\t!item.isReplied &&\n\t\t\t\t!item.isDraft &&\n\t\t\t\t!item.isSentByMe &&\n\t\t\t\t!item.isForwarded\n\t\t\t) {\n\t\t\t\treturn [true, 'EmailReadOutline', t('label.read', 'Read'), 'ReadIcon', 'secondary'];\n\t\t\t}\n\t\t\tif (item.isForwarded) {\n\t\t\t\treturn [true, 'Forward', t('label.forwarded', 'Forwarded'), 'ForwardedIcon', 'secondary'];\n\t\t\t}\n\t\t\treturn [false, '', '', '', ''];\n\t\t}, [item]);\n\n\t\tconst tags = useMemo(\n\t\t\t() =>\n\t\t\t\treduce(\n\t\t\t\t\ttagsFromStore,\n\t\t\t\t\t(acc, v) => {\n\t\t\t\t\t\tif (includes(item.tags, v.id))\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tacc.push({ ...v, color: ZIMBRA_STANDARD_COLORS[v.color ?? '0'].hex });\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t},\n\t\t\t\t\t[] as Array<Tag & { color: string }>\n\t\t\t\t),\n\t\t\t[item.tags, tagsFromStore]\n\t\t);\n\n\t\tconst fragmentLabel = useMemo(\n\t\t\t() => (isConvChildren ? item.fragment : ` - ${item.fragment}`),\n\t\t\t[item.fragment, isConvChildren]\n\t\t);\n\t\tconst textReadValues = useMemo<TextReadValuesType>(() => {\n\t\t\tif (typeof item.read === 'undefined')\n\t\t\t\treturn { color: 'text', weight: 'regular', badge: 'read' };\n\t\t\treturn item.read\n\t\t\t\t? { color: 'text', weight: 'regular', badge: 'read' }\n\t\t\t\t: { color: 'primary', weight: 'bold', badge: 'unread' };\n\t\t}, [item.read]);\n\n\t\tconst isTagInStore = useTagExist(tags);\n\t\tconst showTagIcon = useMemo(\n\t\t\t() => item.tags && item.tags.length !== 0 && item.tags?.[0] !== '' && isTagInStore,\n\t\t\t[isTagInStore, item.tags]\n\t\t);\n\t\tconst tagIcon = useMemo(() => (tags.length > 1 ? 'TagsMoreOutline' : 'Tag'), [tags]);\n\t\tconst tagIconColor = useMemo(() => (tags.length === 1 ? tags[0].color : undefined), [tags]);\n\t\tconst subject = useMemo(\n\t\t\t() => item.subject || t('label.no_subject_with_tags', '<No Subject>'),\n\t\t\t[item.subject]\n\t\t);\n\t\tconst subFragmentTooltipLabel = useMemo(\n\t\t\t() => (!isEmpty(item.fragment) ? item.fragment : subject),\n\t\t\t[subject, item.fragment]\n\t\t);\n\n\t\tconst scheduledTime = useMemo(\n\t\t\t() =>\n\t\t\t\tt('message.schedule_time', {\n\t\t\t\t\tdate: moment(item?.autoSendTime).format('DD/MM/YYYY'),\n\t\t\t\t\ttime: moment(item?.autoSendTime).format('HH:mm'),\n\t\t\t\t\tdefaultValue: 'for {{date}} at {{time}}'\n\t\t\t\t}),\n\t\t\t[item?.autoSendTime]\n\t\t);\n\n\t\tconst onToggle = useMemo(() => (isConvChildren ? noop : toggle), [isConvChildren, toggle]);\n\n\t\treturn (\n\t\t\t<Container mainAlignment=\"flex-start\" data-testid={`MessageListItem-${item.id}`}>\n\t\t\t\t<ListItemActionWrapper\n\t\t\t\t\titem={item}\n\t\t\t\t\tactive={active}\n\t\t\t\t\tonClick={onClick}\n\t\t\t\t\tonDoubleClick={onDoubleClick}\n\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t>\n\t\t\t\t\t<div style={{ alignSelf: 'center' }} data-testid={`message-list-item-avatar-${item.id}`}>\n\t\t\t\t\t\t<ItemAvatar\n\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tselecting={selecting}\n\t\t\t\t\t\t\ttoggle={onToggle}\n\t\t\t\t\t\t\tfolderId={firstChildFolderId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Padding horizontal=\"extrasmall\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Row\n\t\t\t\t\t\twrap=\"wrap\"\n\t\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\tpadding={{ left: 'small', top: 'small', bottom: 'small', right: 'large' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Container orientation=\"horizontal\" height=\"fit\" width=\"fill\">\n\t\t\t\t\t\t\t<SenderName item={item} textValues={textReadValues} isSearchModule={isSearchModule} />\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t{showTagIcon && (\n\t\t\t\t\t\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t\t\t\t\t\t<Icon data-testid=\"TagIcon\" icon={tagIcon} color={tagIconColor} />\n\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{item.hasAttachment && (\n\t\t\t\t\t\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t\t\t\t\t\t<Icon data-testid=\"AttachmentIcon\" icon=\"AttachOutline\" />\n\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{item.flagged && (\n\t\t\t\t\t\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t\t\t\t\t\t<Icon data-testid=\"FlagIcon\" color=\"error\" icon=\"Flag\" />\n\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t\t\t\t\t{item?.isScheduled ? (\n\t\t\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t\t\t<Padding right=\"extrasmall\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Icon data-testid={iconId} icon=\"SendDelayedOutline\" color=\"primary\" />\n\t\t\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t\t\t\t<Text data-testid=\"DelayedMailLabel\" size=\"extrasmall\" color=\"primary\">\n\t\t\t\t\t\t\t\t\t\t\t\t{t('label.send_scheduled', 'Send Scheduled')}\n\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<Text data-testid=\"DateLabel\" size=\"extrasmall\">\n\t\t\t\t\t\t\t\t\t\t\t{date}\n\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Container orientation=\"horizontal\" height=\"fit\" width=\"fill\" crossAlignment=\"center\">\n\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\twrap=\"nowrap\"\n\t\t\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\t\tcrossAlignment=\"center\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{showIcon && (\n\t\t\t\t\t\t\t\t\t<Tooltip label={iconTooltip} placement=\"bottom\">\n\t\t\t\t\t\t\t\t\t\t<Padding right=\"extrasmall\">\n\t\t\t\t\t\t\t\t\t\t\t<Icon data-testid={iconId} icon={icon} color={color} />\n\t\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<Tooltip label={subFragmentTooltipLabel} overflow=\"break-word\" maxWidth=\"60vw\">\n\t\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\t\twrap=\"nowrap\"\n\t\t\t\t\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\t\t\t\tcrossAlignment=\"baseline\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{!isConvChildren && (\n\t\t\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\t\t\tdata-testid=\"Subject\"\n\t\t\t\t\t\t\t\t\t\t\t\tweight={textReadValues.weight}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor={item.subject ? 'text' : 'secondary'}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{subject}\n\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t\t\t{!isEmpty(item.fragment) && (\n\t\t\t\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\t\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\t\t\t\t\t\t\tpadding={{ left: 'extrasmall' }}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata-testid=\"Fragment\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tweight={textReadValues.weight}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{fragmentLabel}\n\t\t\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t{item.urgent && (\n\t\t\t\t\t\t\t\t\t<Padding left=\"extrasmall\">\n\t\t\t\t\t\t\t\t\t\t<Icon data-testid=\"UrgentIcon\" icon=\"ArrowUpward\" color=\"error\" />\n\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t{item?.isScheduled && (\n\t\t\t\t\t\t\t\t\t<Tooltip label={scheduledTime}>\n\t\t\t\t\t\t\t\t\t\t<Text data-testid=\"DelayedMailLabel\" size=\"extrasmall\" color=\"primary\">\n\t\t\t\t\t\t\t\t\t\t\t{scheduledTime}\n\t\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{((messageFolder && messageFolder.id !== firstChildFolderId) || isSearchModule) && (\n\t\t\t\t\t\t\t\t\t<Padding left=\"small\">\n\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\tdata-testid=\"FolderBadge\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={getFolderTranslatedName({\n\t\t\t\t\t\t\t\t\t\t\t\tfolderId: firstChildFolderId,\n\t\t\t\t\t\t\t\t\t\t\t\tfolderName: messageFolder?.name ?? ''\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\ttype={textReadValues.badge}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Padding>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Row>\n\t\t\t\t</ListItemActionWrapper>\n\t\t\t</Container>\n\t\t);\n\t});\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { Dropdown, DropdownItem, IconButton, Tooltip } from '@zextras/carbonio-design-system';\nimport {\n\tFOLDERS,\n\tt,\n\tuseUserSettings,\n\tuseAppContext,\n\treplaceHistory\n} from '@zextras/carbonio-shell-ui';\nimport { noop } from 'lodash';\n\nimport { getTooltipLabel } from './utils/utils';\nimport { SORTING_DIRECTION, SORTING_OPTIONS, SORT_ICONS } from '../../../../constants';\nimport { parseMessageSortingOptions, updateSortingSettings } from '../../../../helpers/sorting';\nimport { useAppDispatch } from '../../../../hooks/redux';\nimport { search } from '../../../../store/actions';\nimport { AppContext } from '../../../../types';\n\nexport const SortingComponent: FC<{ folderId?: string }> = ({ folderId }) => {\n\tconst buttonRef = useRef<HTMLDivElement>(null);\n\tconst { prefs } = useUserSettings();\n\n\tconst prefSortOrder = useMemo(\n\t\t() => prefs?.zimbraPrefSortOrder,\n\t\t[prefs?.zimbraPrefSortOrder]\n\t) as string;\n\tconst { sortType, sortDirection } = parseMessageSortingOptions(folderId, prefSortOrder);\n\n\tconst dispatch = useAppDispatch();\n\tconst [sortDirectionState, setSortDirectionState] = useState(sortDirection);\n\n\tconst iconButtonIconProps = useMemo(\n\t\t() =>\n\t\t\tsortDirectionState === SORTING_DIRECTION.ASCENDING\n\t\t\t\t? SORT_ICONS.ASCENDING\n\t\t\t\t: SORT_ICONS.DESCENDING,\n\t\t[sortDirectionState]\n\t);\n\tconst [sortingTypeState, setSortingTypeState] = useState(sortType);\n\tuseEffect(() => {\n\t\tsetSortDirectionState(sortDirection);\n\t\tsetSortingTypeState(sortType);\n\t}, [sortDirection, sortType]);\n\n\tconst tooltipLabel = useMemo(\n\t\t() => getTooltipLabel(sortingTypeState, sortDirectionState),\n\t\t[sortDirectionState, sortingTypeState]\n\t);\n\n\tconst { isMessageView } = useAppContext<AppContext>();\n\tconst performSearch = useCallback(\n\t\t(sortBy: string): void => {\n\t\t\tdispatch(\n\t\t\t\tsearch({\n\t\t\t\t\tfolderId,\n\t\t\t\t\tlimit: 100,\n\t\t\t\t\tsortBy,\n\t\t\t\t\ttypes: isMessageView ? 'message' : 'conversation'\n\t\t\t\t})\n\t\t\t);\n\t\t},\n\t\t[dispatch, folderId, isMessageView]\n\t);\n\n\tconst switchAscendingOrDescendingOrder = useCallback(() => {\n\t\tsetSortDirectionState((prev) =>\n\t\t\tprev === SORTING_DIRECTION.ASCENDING\n\t\t\t\t? SORTING_DIRECTION.DESCENDING\n\t\t\t\t: SORTING_DIRECTION.ASCENDING\n\t\t);\n\t\tconst newSortDirection =\n\t\t\tsortDirectionState === SORTING_DIRECTION.ASCENDING\n\t\t\t\t? SORTING_DIRECTION.DESCENDING\n\t\t\t\t: SORTING_DIRECTION.ASCENDING;\n\t\tconst sortBy = `${sortingTypeState}${newSortDirection}`;\n\t\tperformSearch(sortBy);\n\t\tupdateSortingSettings({\n\t\t\tprefSortOrder,\n\t\t\tsortingTypeValue: sortingTypeState,\n\t\t\tsortingDirection: newSortDirection,\n\t\t\tfolderId\n\t\t});\n\n\t\treplaceHistory(`/folder/${folderId}`);\n\t}, [folderId, performSearch, prefSortOrder, sortDirectionState, sortingTypeState]);\n\n\tconst selectSortingType = useCallback(\n\t\t(sortingTypeValue) => {\n\t\t\tsetSortingTypeState(sortingTypeValue);\n\t\t\tperformSearch(`${sortingTypeValue}${sortDirectionState}`);\n\t\t\tupdateSortingSettings({\n\t\t\t\tprefSortOrder,\n\t\t\t\tsortingTypeValue,\n\t\t\t\tsortingDirection: sortDirectionState,\n\t\t\t\tfolderId\n\t\t\t});\n\n\t\t\treplaceHistory(`/folder/${folderId}`);\n\t\t},\n\t\t[folderId, performSearch, prefSortOrder, sortDirectionState]\n\t);\n\n\tconst sortUnread = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.unread.value);\n\t}, [selectSortingType]);\n\n\tconst sortTo = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.to.value);\n\t}, [selectSortingType]);\n\n\tconst sortFlagged = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.flagged.value);\n\t}, [selectSortingType]);\n\n\tconst sortDate = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.date.value);\n\t}, [selectSortingType]);\n\n\tconst sortFrom = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.from.value);\n\t}, [selectSortingType]);\n\n\tconst sortSubject = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.subject.value);\n\t}, [selectSortingType]);\n\n\tconst sortAttachment = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.attachment.value);\n\t}, [selectSortingType]);\n\n\tconst sortImportant = useCallback(() => {\n\t\tselectSortingType(SORTING_OPTIONS.important.value);\n\t}, [selectSortingType]);\n\n\tconst items: Array<DropdownItem> = [\n\t\t{\n\t\t\tid: 'activity-1',\n\t\t\tlabel:\n\t\t\t\tsortDirectionState === SORTING_DIRECTION.ASCENDING\n\t\t\t\t\t? t('sorting_dropdown.descendingOrder', 'Descending order')\n\t\t\t\t\t: t('sorting_dropdown.ascendingOrder', 'Ascending order'),\n\t\t\tonClick: switchAscendingOrDescendingOrder,\n\t\t\ticon:\n\t\t\t\tsortDirectionState === SORTING_DIRECTION.DESCENDING\n\t\t\t\t\t? SORT_ICONS.ASCENDING\n\t\t\t\t\t: SORT_ICONS.DESCENDING\n\t\t},\n\t\t{\n\t\t\tid: `${SORTING_OPTIONS.unread.value}-id`,\n\t\t\tlabel: t('sorting_dropdown.unread', 'Unread'),\n\t\t\tselected: sortingTypeState === SORTING_OPTIONS.unread.value,\n\t\t\tonClick: sortUnread,\n\t\t\ticon: sortingTypeState === SORTING_OPTIONS.unread.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t},\n\t\t{\n\t\t\tid: `${SORTING_OPTIONS.important.value}-id`,\n\t\t\tlabel: t('sorting_dropdown.important', 'Important'),\n\t\t\tselected: sortingTypeState === SORTING_OPTIONS.important.value,\n\t\t\tonClick: sortImportant,\n\t\t\ticon:\n\t\t\t\tsortingTypeState === SORTING_OPTIONS.important.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t},\n\t\t{\n\t\t\tid: `${SORTING_OPTIONS.flagged.value}-id`,\n\t\t\tlabel: t('sorting_dropdown.flagged', 'Flagged'),\n\t\t\tselected: sortingTypeState === SORTING_OPTIONS.flagged.value,\n\t\t\tonClick: sortFlagged,\n\t\t\ticon: sortingTypeState === SORTING_OPTIONS.flagged.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t},\n\t\t{\n\t\t\tid: `${SORTING_OPTIONS.attachment.value}-id`,\n\t\t\tlabel: t('sorting_dropdown.attachment', 'Attachment'),\n\t\t\tselected: sortingTypeState === SORTING_OPTIONS.attachment.value,\n\t\t\tonClick: sortAttachment,\n\t\t\ticon:\n\t\t\t\tsortingTypeState === SORTING_OPTIONS.attachment.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t},\n\t\t...(folderId !== FOLDERS.SENT\n\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: `${SORTING_OPTIONS.from.value}-id`,\n\t\t\t\t\t\tlabel: t('sorting_dropdown.from', 'From'),\n\t\t\t\t\t\tselected: sortingTypeState === SORTING_OPTIONS.from.value,\n\t\t\t\t\t\tonClick: sortFrom,\n\t\t\t\t\t\ticon:\n\t\t\t\t\t\t\tsortingTypeState === SORTING_OPTIONS.from.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t: []),\n\t\t...(folderId === FOLDERS.SENT\n\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: `${SORTING_OPTIONS.to.value}-id`,\n\t\t\t\t\t\tlabel: t('sorting_dropdown.to', 'To'),\n\t\t\t\t\t\tselected: sortingTypeState === SORTING_OPTIONS.to.value,\n\t\t\t\t\t\tonClick: sortTo,\n\t\t\t\t\t\ticon: sortingTypeState === SORTING_OPTIONS.to.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t: []),\n\t\t{\n\t\t\tid: `${SORTING_OPTIONS.date.value}-id`,\n\t\t\tlabel: t('sorting_dropdown.date', 'Date'),\n\t\t\tselected: sortingTypeState === SORTING_OPTIONS.date.value,\n\t\t\tonClick: sortDate,\n\t\t\ticon: sortingTypeState === SORTING_OPTIONS.date.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t},\n\t\t{\n\t\t\tid: `${SORTING_OPTIONS.subject.value}-id`,\n\t\t\tlabel: t('sorting_dropdown.subject', 'Subject'),\n\t\t\tselected: sortingTypeState === SORTING_OPTIONS.subject.value,\n\t\t\tonClick: sortSubject,\n\t\t\ticon: sortingTypeState === SORTING_OPTIONS.subject.value ? 'RadioButtonOn' : 'RadioButtonOff'\n\t\t}\n\t];\n\treturn (\n\t\t<Tooltip label={tooltipLabel} placement=\"top\">\n\t\t\t<Dropdown\n\t\t\t\titems={items}\n\t\t\t\tmultiple\n\t\t\t\titemPaddingBetween=\"large\"\n\t\t\t\titemIconSize=\"large\"\n\t\t\t\tselectedBackgroundColor=\"highlight\"\n\t\t\t\tdata-testid=\"sorting-dropdown\"\n\t\t\t>\n\t\t\t\t<IconButton icon={iconButtonIconProps} size=\"large\" ref={buttonRef} onClick={noop} />\n\t\t\t</Dropdown>\n\t\t</Tooltip>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport {\n\tContainer,\n\tIconCheckbox,\n\tPadding,\n\tRow,\n\tText,\n\tTooltip\n} from '@zextras/carbonio-design-system';\nimport { t } from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\n\nimport { SortingComponent } from './sorting-component';\nimport { getFolderPathForBreadcrumb } from '../../../../helpers/folders';\n\nconst SelectIconCheckbox = styled(IconCheckbox)`\n\tsvg {\n\t\tcolor: ${(props): string => props.theme.palette.primary.regular};\n\t}\n`;\n\nexport const Breadcrumbs: FC<{\n\titemsCount: number;\n\tisSelectModeOn: boolean;\n\tsetIsSelectModeOn: (ev: boolean | ((prevState: boolean) => boolean)) => void;\n\tfolderPath: string;\n\tfolderId?: string;\n\tisSearchModule?: boolean;\n}> = ({ itemsCount, isSelectModeOn, setIsSelectModeOn, folderPath, folderId, isSearchModule }) => {\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\tconst folderPathLastPartRef = useRef<HTMLDivElement>(null);\n\n\tconst [availableWidth, setAvailableWidth] = useState('0');\n\n\tuseLayoutEffect(() => {\n\t\tconst calculateAvailableWidth = (): void => {\n\t\t\tif (containerRef && containerRef.current) {\n\t\t\t\tsetAvailableWidth(\n\t\t\t\t\t`${\n\t\t\t\t\t\t((containerRef?.current?.offsetWidth ?? 0) -\n\t\t\t\t\t\t\t(folderPathLastPartRef?.current?.offsetWidth ?? 0) -\n\t\t\t\t\t\t\t120) /\n\t\t\t\t\t\t16\n\t\t\t\t\t}rem`\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('resize', calculateAvailableWidth);\n\t\treturn (): void => window.removeEventListener('resize', calculateAvailableWidth);\n\t}, [containerRef.current?.offsetWidth]);\n\n\tuseEffect(() => {\n\t\tif (containerRef?.current && folderPathLastPartRef?.current) {\n\t\t\tsetAvailableWidth(\n\t\t\t\t`${\n\t\t\t\t\t((containerRef?.current?.offsetWidth ?? 0) -\n\t\t\t\t\t\t(folderPathLastPartRef?.current?.offsetWidth ?? 0) -\n\t\t\t\t\t\t120) /\n\t\t\t\t\t16\n\t\t\t\t}rem`\n\t\t\t);\n\t\t}\n\t}, []);\n\n\tconst iconCheckboxLabel = useMemo(\n\t\t() => t('label.activate_selection_mode', 'Activate selection mode'),\n\t\t[]\n\t);\n\n\tconst { folderPathFirstPart, folderPathLastPart } = getFolderPathForBreadcrumb(folderPath);\n\n\treturn (\n\t\t<Container\n\t\t\tbackground=\"gray5\"\n\t\t\tmainAlignment=\"flex-start\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\theight=\"3rem\"\n\t\t\tref={containerRef}\n\t\t>\n\t\t\t<Row\n\t\t\t\theight=\"100%\"\n\t\t\t\twidth=\"fill\"\n\t\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\t\tmainAlignment=\"space-between\"\n\t\t\t\ttakeAvailableSpace\n\t\t\t>\n\t\t\t\t<Row mainAlignment=\"flex-start\" padding={{ right: 'medium' }} takeAvailableSpace>\n\t\t\t\t\t<Tooltip label={iconCheckboxLabel} maxWidth=\"100%\">\n\t\t\t\t\t\t<SelectIconCheckbox\n\t\t\t\t\t\t\tborderRadius=\"regular\"\n\t\t\t\t\t\t\ticon=\"CheckmarkSquare\"\n\t\t\t\t\t\t\tdefaultChecked={isSelectModeOn}\n\t\t\t\t\t\t\tsize=\"regular\"\n\t\t\t\t\t\t\tonChange={(): null => null}\n\t\t\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\t\t\tsetIsSelectModeOn((prev: boolean) => !prev);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t\t<Row maxWidth={availableWidth} mainAlignment=\"flex-start\">\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\t\t\tstyle={{ marginLeft: '0.5rem' }}\n\t\t\t\t\t\t\tdata-testid=\"BreadcrumbPath\"\n\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{folderPathFirstPart}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Text\n\t\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\t\tstyle={{ marginLeft: '0.5rem' }}\n\t\t\t\t\t\tdata-testid=\"BreadcrumbPath\"\n\t\t\t\t\t\tref={folderPathLastPartRef}\n\t\t\t\t\t>\n\t\t\t\t\t\t{folderPathLastPart}\n\t\t\t\t\t</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Text size=\"extrasmall\" data-testid=\"BreadcrumbCount\">\n\t\t\t\t\t{itemsCount > 100 ? '100+' : itemsCount}\n\t\t\t\t</Text>\n\t\t\t\t<Padding right=\"large\" />\n\t\t\t\t{!isSearchModule && <SortingComponent folderId={folderId} />}\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { FC } from 'react';\n\nimport { Drag } from '@zextras/carbonio-design-system';\nimport { useAppContext } from '@zextras/carbonio-shell-ui';\n\nimport type { AppContext, DragItemWrapperProps, MsgListDraggableItemType } from '../../../../types';\n\ntype DragCheckProps = {\n\te: React.DragEvent;\n\tid: string;\n\tdragImageRef?: React.RefObject<HTMLElement>;\n\tselectedItems: Record<string, boolean>;\n\tsetDraggedIds: (ids: Record<string, boolean>) => void;\n};\n\nconst dragCheck = ({ e, id, dragImageRef, selectedItems, setDraggedIds }: DragCheckProps): void => {\n\tif (dragImageRef && dragImageRef?.current) {\n\t\te.dataTransfer.setDragImage(dragImageRef.current, 0, 0);\n\t}\n\tif (selectedItems && selectedItems[id]) {\n\t\tsetDraggedIds && setDraggedIds(selectedItems);\n\t} else {\n\t\tsetDraggedIds && setDraggedIds({ [id]: true });\n\t}\n};\n\ntype DraggableItemProps = {\n\tdragImageRef?: React.RefObject<HTMLElement>;\n\tselectedItems: Record<string, boolean>;\n\tsetDraggedIds: (ids: Record<string, boolean>) => void;\n\titem: MsgListDraggableItemType['item'];\n\tfolderId: string;\n\tisMessageView: boolean;\n\tselectedIds: string[];\n};\nconst DraggableItem: FC<DraggableItemProps> = ({\n\titem,\n\tfolderId,\n\tisMessageView,\n\tselectedIds,\n\tselectedItems,\n\tsetDraggedIds,\n\tchildren\n}) =>\n\tisMessageView ? (\n\t\t<Drag\n\t\t\ttype=\"message\"\n\t\t\tdata={{ ...item, parentFolderId: folderId, selectedIDs: selectedIds }}\n\t\t\tstyle={{ display: 'block' }}\n\t\t\tonDragStart={(e): void => dragCheck({ e, id: item.id, selectedItems, setDraggedIds })}\n\t\t>\n\t\t\t{children}\n\t\t</Drag>\n\t) : (\n\t\t<>{children}</>\n\t);\n\nexport const DragItemWrapper: FC<DragItemWrapperProps> = ({\n\titem,\n\tselectedItems,\n\tsetDraggedIds,\n\tdragImageRef,\n\tchildren,\n\tdragAndDropIsDisabled,\n\tdeselectAll\n}) => {\n\tconst folderId = item.parent;\n\tconst { isMessageView } = useAppContext<AppContext>();\n\n\tconst ids = Object.keys(selectedItems ?? []);\n\n\treturn dragAndDropIsDisabled ? (\n\t\t<>{children}</>\n\t) : (\n\t\t<Drag\n\t\t\ttype=\"message\"\n\t\t\tdata={{ ...item, parentFolderId: folderId, selectedIDs: ids, deselectAll }}\n\t\t\tstyle={{ display: 'block' }}\n\t\t\tonDragStart={(e): void =>\n\t\t\t\tdragCheck({ e, id: item.id, selectedItems, setDraggedIds, dragImageRef })\n\t\t\t}\n\t\t\tdata-testid=\"MailItemContainer\"\n\t\t>\n\t\t\t<DraggableItem\n\t\t\t\titem={item}\n\t\t\t\tfolderId={folderId}\n\t\t\t\tisMessageView={isMessageView}\n\t\t\t\tselectedIds={ids}\n\t\t\t\tselectedItems={selectedItems}\n\t\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</DraggableItem>\n\t\t</Drag>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport styled, { DefaultTheme } from 'styled-components';\n\ntype BackgroundAndThemeProps = {\n\tbackground: keyof DefaultTheme['palette'];\n\ttheme: DefaultTheme;\n};\n\nexport const HoverBarContainer = styled(Container)<{ background: keyof DefaultTheme['palette'] }>`\n\ttop: 0;\n\tright: 0;\n\tdisplay: none;\n\tposition: absolute;\n\tbackground: linear-gradient(\n\t\tto right,\n\t\ttransparent,\n\t\t${({ background, theme }: BackgroundAndThemeProps): string => theme.palette[background].hover}\n\t);\n\twidth: calc(100% - 4rem);\n\theight: 45%;\n\n\t& > * {\n\t\tmargin-top: ${({ theme }): string => theme.sizes.padding.small};\n\t\tmargin-right: ${({ theme }): string => theme.sizes.padding.small};\n\t}\n`;\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport styled, { DefaultTheme } from 'styled-components';\n\nimport { HoverBarContainer } from './hover-bar-container';\n\nexport const HoverContainer = styled(Container).attrs(() => ({\n\tbackground: 'transparent'\n}))<{ $hoverBackground: keyof DefaultTheme['palette'] }>`\n\twidth: 100%;\n\tposition: relative;\n\tcursor: pointer;\n\ttext-decoration: none;\n\n\t&:hover {\n\t\tbackground: ${({ $hoverBackground, theme }): string => theme.palette[$hoverBackground].hover};\n\n\t\t& ${HoverBarContainer} {\n\t\t\tdisplay: flex;\n\t\t}\n\t}\n`;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Tooltip } from '@zextras/carbonio-design-system';\nimport React, { ReactElement } from 'react';\n\ntype TooltipWrapperProps = {\n\tchildren: ReactElement;\n\tenabled: boolean;\n\tlabel: string;\n\tmaxWidth?: string;\n};\n\nexport const TooltipWrapper = ({\n\tchildren,\n\tenabled,\n\tlabel,\n\tmaxWidth\n}: TooltipWrapperProps): ReactElement =>\n\tenabled ? (\n\t\t<Tooltip label={label} disabled={!enabled} maxWidth={maxWidth}>\n\t\t\t{children}\n\t\t</Tooltip>\n\t) : (\n\t\tchildren\n\t);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, SyntheticEvent, useCallback, useMemo } from 'react';\n\nimport { Avatar, Container } from '@zextras/carbonio-design-system';\nimport { FOLDERS, t } from '@zextras/carbonio-shell-ui';\nimport styled from 'styled-components';\n\nimport { TooltipWrapper } from './tooltip-wrapper';\nimport { ParticipantRole } from '../../../../carbonio-ui-commons/constants/participants';\nimport { getFolderIdParts } from '../../../../helpers/folders';\nimport type { ItemAvatarType, Participant } from '../../../../types';\n\nconst AvatarElement = styled(Avatar)`\n\twidth: 2.625rem !important;\n\theight: 2.625rem !important;\n\tmin-width: 2.625rem !important;\n\tmin-height: 2.625rem !important;\n\tp {\n\t\tfont-size: 0.875rem;\n\t}\n`;\n\nexport const ItemAvatar: FC<ItemAvatarType> = ({ item, selected, selecting, toggle, folderId }) => {\n\tconst targetParticipants =\n\t\tgetFolderIdParts(folderId).id === FOLDERS.SPAM ? ParticipantRole.TO : ParticipantRole.FROM;\n\tconst [avatarLabel, avatarEmail] = useMemo(() => {\n\t\tlet sender = item?.participants?.find((p: Participant) => p.type === targetParticipants);\n\t\tif (!sender) [sender] = item.participants ?? [];\n\t\treturn [sender?.fullName || sender?.name || sender?.address || '.', sender?.address];\n\t}, [item.participants, targetParticipants]);\n\n\tconst conversationSelect = useCallback(\n\t\t(id) => (ev: SyntheticEvent) => {\n\t\t\tev.preventDefault();\n\t\t\ttoggle && toggle(id);\n\t\t},\n\t\t[toggle]\n\t);\n\n\tconst activateSelectionMode = t('label.activate_selection_mode', 'Activate selection mode');\n\n\treturn (\n\t\t<Container\n\t\t\tmainAlignment=\"center\"\n\t\t\tcrossAlignment=\"center\"\n\t\t\tdata-testid={`AvatarContainer`}\n\t\t\tpadding={{ all: 'small' }}\n\t\t>\n\t\t\t<TooltipWrapper label={activateSelectionMode} enabled={!selecting} maxWidth=\"100%\">\n\t\t\t\t<AvatarElement\n\t\t\t\t\tselecting={selecting}\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tlabel={avatarLabel}\n\t\t\t\t\tcolorLabel={avatarEmail}\n\t\t\t\t\tonClick={conversationSelect(item.id)}\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t/>\n\t\t\t</TooltipWrapper>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, SyntheticEvent, useCallback } from 'react';\n\nimport { Dropdown, IconButton, Tooltip } from '@zextras/carbonio-design-system';\n\nimport { HoverBarContainer } from './hover-bar-container';\nimport { HoverContainer } from './hover-container';\nimport { MessageActionsDescriptors } from '../../../../constants';\nimport { isConversation } from '../../../../helpers/messages';\nimport { useMessageActions } from '../../../../hooks/use-message-actions';\nimport type {\n\tConvActionReturnType,\n\tConversation,\n\tListItemActionWrapperProps,\n\tMailMessage,\n\tMessageAction,\n\tMessageActionReturnType,\n\tTagActionItemType\n} from '../../../../types';\nimport { useMsgConvActions } from '../../../../ui-actions/use-msg-conv-actions';\n\nconst HoverActionComponent = ({\n\taction\n}: {\n\taction: MessageActionReturnType | ConvActionReturnType | TagActionItemType;\n\titem: Conversation | MailMessage;\n}): ReactElement => {\n\tconst label = 'label' in action ? action.label : '';\n\tconst icon = 'icon' in action ? action.icon : '';\n\tconst onClick = useCallback(\n\t\t(ev?: KeyboardEvent | SyntheticEvent<HTMLElement, Event>): void => {\n\t\t\tev?.stopPropagation();\n\t\t\taction.onClick && action.onClick(ev);\n\t\t},\n\t\t[action]\n\t);\n\treturn (\n\t\t<Tooltip label={label}>\n\t\t\t<IconButton key={action.id} icon={icon} onClick={onClick} size=\"small\" />\n\t\t</Tooltip>\n\t);\n};\n\nexport const ListItemActionWrapper: FC<ListItemActionWrapperProps> = ({\n\tchildren,\n\tonClick,\n\tonDoubleClick,\n\titem,\n\tactive,\n\tdeselectAll\n}) => {\n\tconst messageActions = useMessageActions(isConversation(item) ? undefined : item, true);\n\n\tconst [hoverActions, dropdownActions] = useMsgConvActions({\n\t\titem,\n\t\tdeselectAll,\n\t\tmessageActionsForExtraWindow: messageActions\n\t});\n\tconst finalDropdownActions = dropdownActions.filter(\n\t\t(action: MessageAction) => action.id !== MessageActionsDescriptors.CREATE_APPOINTMENT.id\n\t);\n\n\tconst dropdownActionsItems = finalDropdownActions.map((action) => ({\n\t\t...action,\n\t\tonClick: (ev: KeyboardEvent | React.SyntheticEvent<HTMLElement, Event>): void => {\n\t\t\taction.onClick && action.onClick(ev);\n\t\t},\n\t\tlabel: 'label' in action ? action.label : ''\n\t}));\n\n\treturn (\n\t\t<Dropdown\n\t\t\tcontextMenu\n\t\t\titems={dropdownActionsItems}\n\t\t\tdisplay=\"block\"\n\t\t\tstyle={{ width: '100%', height: '4rem' }}\n\t\t\tdata-testid={`secondary-actions-menu-${item.id}`}\n\t\t>\n\t\t\t<HoverContainer\n\t\t\t\tdata-testid={`hover-container-${item.id}`}\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\tcrossAlignment=\"unset\"\n\t\t\t\tonClick={onClick}\n\t\t\t\tonDoubleClick={onDoubleClick}\n\t\t\t\t$hoverBackground={active ? 'highlight' : 'gray6'}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t\t<HoverBarContainer\n\t\t\t\t\torientation=\"horizontal\"\n\t\t\t\t\tmainAlignment=\"flex-end\"\n\t\t\t\t\tcrossAlignment=\"center\"\n\t\t\t\t\tbackground={active ? 'highlight' : 'gray6'}\n\t\t\t\t\tdata-testid={`primary-actions-bar-${item.id}`}\n\t\t\t\t>\n\t\t\t\t\t{hoverActions.map((action, index) => (\n\t\t\t\t\t\t<HoverActionComponent key={action.id ?? index} action={action} item={item} />\n\t\t\t\t\t))}\n\t\t\t\t</HoverBarContainer>\n\t\t\t</HoverContainer>\n\t\t</Dropdown>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useMemo } from 'react';\n\nimport { Padding, Row, Text, Tooltip } from '@zextras/carbonio-design-system';\nimport { FOLDERS, t, useUserAccount } from '@zextras/carbonio-shell-ui';\nimport { filter, findIndex, reduce, trimStart, uniqBy } from 'lodash';\n\nimport { ParticipantRole } from '../../../../carbonio-ui-commons/constants/participants';\nimport { participantToString } from '../../../../commons/utils';\nimport { getFolderIdParts } from '../../../../helpers/folders';\nimport type { SenderNameProps } from '../../../../types';\n\n// TODO since it renders also the recipients we should rename it to ParticipantsName\nexport const SenderName: FC<SenderNameProps> = ({ item, textValues, isSearchModule = false }) => {\n\tconst account = useUserAccount();\n\tconst folderId = getFolderIdParts(item.parent).id;\n\tconst participantsString = useMemo(() => {\n\t\tconst participants = filter(item.participants, (p) => {\n\t\t\tif (folderId === FOLDERS.INBOX) return p.type === ParticipantRole.FROM; // inbox\n\t\t\tif (folderId === FOLDERS.SENT && !isSearchModule) return p.type === ParticipantRole.TO; // sent\n\t\t\tif (isSearchModule) return p.type === ParticipantRole.FROM; // search module\n\t\t\treturn true; // keep all\n\t\t});\n\t\tconst meIndex = findIndex(participants, ['address', account?.name]);\n\t\tif (meIndex >= 0) {\n\t\t\t// swap index me will be at first\n\t\t\tconst activeParticipant = participants[0];\n\t\t\tparticipants[0] = participants[meIndex];\n\t\t\tparticipants[meIndex] = activeParticipant;\n\t\t}\n\n\t\treturn reduce(\n\t\t\tuniqBy(participants, (em) => em.address),\n\t\t\t(acc, part) => trimStart(`${acc}, ${participantToString(part, [account])}`, ', '),\n\t\t\t''\n\t\t);\n\t}, [account, folderId, isSearchModule, item.participants]);\n\n\treturn (\n\t\t<Row wrap=\"nowrap\" takeAvailableSpace mainAlignment=\"flex-start\">\n\t\t\t{!isSearchModule && folderId === FOLDERS.DRAFTS && (\n\t\t\t\t<Padding right=\"small\">\n\t\t\t\t\t<Text color=\"error\">{t('label.draft_folder', '[DRAFT]')}</Text>\n\t\t\t\t</Padding>\n\t\t\t)}\n\t\t\t<Tooltip label={participantsString} overflow=\"break-word\" maxWidth=\"60vw\">\n\t\t\t\t<Text\n\t\t\t\t\tdata-testid=\"participants-name-label\"\n\t\t\t\t\tcolor={textValues?.color}\n\t\t\t\t\tweight={textValues?.weight}\n\t\t\t\t>\n\t\t\t\t\t{participantsString}\n\t\t\t\t</Text>\n\t\t\t</Tooltip>\n\t\t</Row>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { t } from '@zextras/carbonio-shell-ui';\n\nimport { SORTING_DIRECTION, SORTING_OPTIONS } from '../../../../../constants';\nimport { Folder } from '../../../../../types';\nimport { getFolderTranslatedName } from '../../../../sidebar/utils';\n\nexport function getTooltipLabel(sortingType: string, sortingDirection: string): string {\n\tconst sortingString = `${sortingType}${sortingDirection}`;\n\tswitch (sortingString) {\n\t\tcase `${SORTING_OPTIONS.to.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.toAscending', 'Ascending order by To');\n\t\tcase `${SORTING_OPTIONS.date.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.dateAscending', 'Ascending order by Date');\n\t\tcase `${SORTING_OPTIONS.from.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.fromAscending', 'Ascending order by From');\n\t\tcase `${SORTING_OPTIONS.size.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.dateAscending', 'Ascending order by Size');\n\t\tcase `${SORTING_OPTIONS.unread.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.unreadAscending', 'Ascending order by Unread');\n\t\tcase `${SORTING_OPTIONS.flagged.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.flaggedAscending', 'Ascending order by Flagged');\n\t\tcase `${SORTING_OPTIONS.subject.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.subjectAscending', 'Ascending order by Subject');\n\t\tcase `${SORTING_OPTIONS.important.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.importantAscending', 'Ascending order by Important');\n\t\tcase `${SORTING_OPTIONS.attachment.value}${SORTING_DIRECTION.ASCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.attachmentAscending', 'Ascending order by Attachment');\n\t\tcase `${SORTING_OPTIONS.to.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.toDescending', 'Descending order by To');\n\t\tcase `${SORTING_OPTIONS.date.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.dateDescending', 'Descending order by Date');\n\t\tcase `${SORTING_OPTIONS.from.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.fromDescending', 'Descending order by From');\n\t\tcase `${SORTING_OPTIONS.size.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.sizeDescending', 'Descending order by Size');\n\t\tcase `${SORTING_OPTIONS.unread.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.unreadDescending', 'Descending order by Unread');\n\t\tcase `${SORTING_OPTIONS.flagged.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.flaggedDescending', 'Descending order by Flagged');\n\t\tcase `${SORTING_OPTIONS.subject.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.subjectDescending', 'Descending order by Subject');\n\t\tcase `${SORTING_OPTIONS.important.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.importantDescending', 'Descending order by Important');\n\t\tcase `${SORTING_OPTIONS.attachment.value}${SORTING_DIRECTION.DESCENDING}`:\n\t\t\treturn t('sortingDropdown.tooltip.attachmentDescending', 'Descending order by Attachment');\n\t\tdefault:\n\t\t\treturn '';\n\t}\n}\n\nexport const getFolderPath = (\n\tfolder: Folder | undefined,\n\troot: Folder | undefined,\n\tisSearchModule = false\n): string => {\n\tif (isSearchModule) {\n\t\treturn '';\n\t}\n\treturn (\n\t\tfolder?.absFolderPath\n\t\t\t?.split('/')\n\t\t\t?.map((p, idx) =>\n\t\t\t\tgetFolderTranslatedName({\n\t\t\t\t\tfolderId: idx === 1 ? root?.id : folder?.id,\n\t\t\t\t\tfolderName: p\n\t\t\t\t})\n\t\t\t)\n\t\t\t.join(' / ') ?? ''\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\nimport { Shimmer, Container } from '@zextras/carbonio-design-system';\nimport { times } from 'lodash';\nimport styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n\t0% { opacity: 0 }\n  100% { opacity: 1 }\n`;\n\nconst Wrapper = styled(Container)`\n\topacity: 0;\n\tanimation-name: ${fadeIn};\n\tanimation-timing-function: ease-in;\n\tanimation-fill-mode: forwards;\n\toverflow: hidden;\n`;\n\nconst ShimmerList: FC<{\n\tcount?: number;\n\tdelay?: number;\n\ttransitionDuration?: number;\n}> = ({ count = 0, delay = 0, transitionDuration = 800 }) => {\n\tconst itemCount = count > 33 ? 33 : count;\n\n\treturn (\n\t\t<Wrapper\n\t\t\theight=\"fill\"\n\t\t\tstyle={{ animationDelay: `${delay}ms`, animationDuration: `${transitionDuration}ms` }}\n\t\t>\n\t\t\t{times(itemCount, (index) => (\n\t\t\t\t<Shimmer.ListItem type={1} key={index} />\n\t\t\t))}\n\t\t</Wrapper>\n\t);\n};\n\nexport default ShimmerList;\n"],"names":["CustomListItemHelper","styled","ListItem","withConfig","displayName","componentId","CustomListItem","attrs","background","active","activeBackground","selected","selectedBackground","theme","$baseBackgroundColor","getColor","$focusBackgroundColor","CustomList","ListV2","fallbackSortOrder","sortType","sortDirection","sortOrder","remainingFoldersSortOrder","remainingSortOptions","parseMessageSortingOptions","folderId","prefSortOrder","splitString","sortingFolders","split","sortOrderOfFolder","find","item","substring","lastIndexOf","concat","filter","join","includes","SORTING_OPTIONS","size","value","updateSortingSettings","sortingTypeValue","sortingDirection","changes","prefs","zimbraPrefSortOrder","editSettings","secondString","indexOf","sortingString","replacedString","inputStringA","inputStringB","replaceStr","RegExp","test","replace","modifySettingString","useMessageActions","message","isAlone","useParams","dispatch","useAppDispatch","setCount","useAppContext","deselectAll","useSelection","currentFolderId","count","isInsideExtraWindow","useExtraWindow","createWindow","useGlobalExtraWindowManager","openAppointmentComposer","isAvailable","useIntegratedFunction","getDraftsActions","useDraftActions","editDraft","useEditDraft","moveMsgToTrash","useMoveMsgToTrash","useCallback","tags","actions","push","sendDraft","id","ids","conversationId","conversation","closeEditor","setMsgFlag","flagged","applyTag","isMessage","getDefaultActions","useDefaultActions","moveMessageToFolder","useMoveMessageToFolder","redirectMsg","useRedirectMsg","setMsgAsSpam","useSetMsgAsSpam","createAppointment","useCreateAppointment","replyMsg","replyAllMsg","forwardMsg","setMsgRead","read","shouldReplaceHistory","isRestore","printMsg","editAsNewMsg","showOriginalMsg","downloadEml","getTrashActions","useTrashActions","deleteMessagePermanently","useDeleteMessagePermanently","getSpamActions","useSpamActions","deleteMsg","useDeleteMsg","systemFolders","useMemo","FOLDERS","INBOX","SENT","DRAFTS","TRASH","SPAM","useTags","EXTRA_WINDOW_ACTION_ID","getFolderIdParts","parent","previewMessageOnSeparatedWindow","subject","items","useRef","isSelectModeOn","setIsSelectModeOn","useState","isAllSelected","length","selectItem","current","omit","prev","selectAll","map","selectAllModeOff","setTimeout","toggle","setConversationsFlag","ConversationActionsDescriptors","UNFLAG","FLAG","icon","label","t","onClick","convAction","operation","previewConversationOnSeparatedWindowAction","PREVIEW_ON_SEPARATED_WINDOW","previewConversationOnSeparatedWindow","name","returnComponent","children","React","ConversationPreviewPanelContainer","title","closeOnUnmount","setConversationsRead","MARK_AS_UNREAD","MARK_AS_READ","then","res","type","replaceHistory","printConversation","messageIds","isArray","forEach","conv","messages","m","printWindow","window","open","getMsgsForPrint","content","getContentForPrint","conversations","isMsg","top","document","write","catch","errorPage","useSetConversationAsSpam","createSnackbar","useUiUtilities","notCanceled","infoSnackbar","hideButton","key","autoHideTimeout","actionLabel","onActionClick","useMoveConversationToTrash","MOVE_TO_TRASH","useMoveConversationToFolder","createModal","closeModal","maxHeight","StoreProvider","MoveConvMessage","selectedIDs","onClose","isMessageView","useDeleteConversationPermanently","DeleteConvConfirm","MultipleSelectionActionsPanel","selectedIds","isConversation","folderParentId","getFolderParentId","useEffect","Object","values","selectedConversation","foldersExcludedMarkReadUnread","foldersExcludedTrash","foldersIncludedDeletePermanently","foldersExcludedMoveToFolder","foldersExcludedTags","foldersExcludedMarkSpam","foldersIncludedMarkNotSpam","setMsgReadAction","selectedItems","action","findIndex","setMsgUnreadAction","every","moveConversationToTrash","deleteConversationPermanently","moveConversationToFolder","setConversationAsSpam","messagesArrayIsNotEmpty","primaryActionsArray","getMoveToTrashAction","deletePermanentlyAction","reduce","acc","Tooltip","maxWidth","IconButton","iconColor","ev","preventDefault","secondaryActionsArray","addFlagAction","some","removeFlagAction","moveToFolderAction","applyTagAction","applyMultiTag","markMsgAsSpam","markMsgAsNotSpam","customComponent","arrowBackOnClick","selectAllOnClick","actionsIsNotEmpty","iconButtonTooltip","Container","height","orientation","padding","all","mainAlignment","width","Row","takeAvailableSpace","right","Button","color","Dropdown","placement","useMoveToTrashAction","useDeletePermanentlyAction","useMarkRemoveSpam","foldersExcludedMarkUnmarkSpam","useMoveToFolderAction","useRedirectAction","folderExcludedRedirect","useEditDraftAction","folderIncludeEditDraft","useCreateAppointmentAction","folderExcludedCreateAppointment","useMsgConvActions","messageActionsForExtraWindow","getDeletePermanentlyAction","getEditDraftAction","getMarkRemoveSpam","getMoveToFolderAction","getRedirectAction","getCreateAppointmentAction","isConv","getParentFolderId","useSnackbar","useTranslation","useExtraWindowsManager","firstConversationMessage","msg","folderIdParts","isTrash","isDraft","isSingleMsgConv","isSingleMessageConversation","folderExcludedPrintMessage","folderExcludedShowOriginal","folderExcludedReply","folderExcludedReplyAll","folderExcludedForward","folderExcludedEditAsNew","folderIncludedSendDraft","folderExcludedDownloadEML","addRemoveFlagAction","getAddRemoveFlagAction","msgReadUnreadAction","getReadUnreadAction","moveToTrashAction","printAction","getPrintAction","getApplyTagAction","markRemoveSpam","showOriginalAction","getShowOriginalAction","editDraftAction","replyAction","firstConversationMessageId","getReplyAction","replyAllAction","getReplyAllAction","forwardAction","getForwardAction","editAsNewAction","getEditAsNewAction","sendDraftAction","generateEditor","addEditor","sendDraftFromPreview","generateEditorFunction","async","editor","EditViewActions","EDIT_AS_DRAFT","messagesStoreDispatch","compositionData","undefined","Error","savedAttachments","attachment","requiresSmartLinkConversion","updateEditorWithSmartLinks","editorId","useEditorsStore","getState","editors","getSendDraftAction","redirectAction","previewOnSeparatedWindow","messageActions","getPreviewOnSeparatedWindowAction","downloadEmlAction","getDownloadEmlAction","createAppointmentAction","ConversationMessagePreview","convMessage","isExpanded","useAppSelector","state","selectMessage","Padding","bottom","MailPreview","expanded","ConversationPreviewPanel","convSortOrder","conversationStatus","selectCurrentFolderExpandedStatus","index","sortSign","slice","sort","a","b","date","style","overflowY","horizontal","API_REQUEST_STATUS","fulfilled","Shimmer","Logo","props","params","useConversationPreviewPanelParameters","tagsFromStore","conversationsStatus","selectConversationExpandedStatus","selectConversation","useUserSettings","zimbraPrefConversationOrder","getConv","pending","searchConv","fetch","showPreviewPanel","crossAlignment","PreviewPanelHeader","MessagePreviewPanelContainer","messageId","MessagePreviewPanel","DragImageContainer","DragItems","draggedIds","v","k","obj","ConversationListItemComponent","activeItemId","selecting","noop","setDraggedIds","ConversationListComponent","memo","displayerTitle","isSearchModule","conversationsLoadingCompleted","loadMore","listItems","totalConversations","dragImageRef","listRef","hasMore","folder","useFolder","root","useRoot","folderPath","getFolderPath","showBreadcrumbs","keys","Breadcrumbs","itemsCount","Divider","onListBottom","ref","Text","overflow","whiteSpace","textAlign","paddingTop","ShimmerList","delay","ConversationMessagesList","isActive","isSelected","visible","DragItemWrapper","dragAndDropIsDisabled","MessageListItem","isConvChildren","loading","disabled","paddingBottom","RowInfo","allMessagesInTrash","getTimeLabel","tagIcon","tagIconColor","isTagInStore","useTagExist","showTagIcon","left","Icon","hasAttachment","CollapseElement","ConversationListItem","setOpen","accounts","useUserAccounts","selectMessages","folderParent","uniqBy","ZIMBRA_STANDARD_COLORS","hex","tn","tagNotInList","sortBy","zimbraPrefMarkMsgRead","participantsString","participants","em","address","part","trimStart","participantToString","toggleOpen","e","currentlyOpen","_onClick","isDefaultPrevented","pushHistory","_onDoubleClick","toggleExpandButtonLabel","subFragmentTooltipLabel","isEmpty","fragment","messagesToRender","getmsgToDisplayCount","messagesInConversation","textReadValues","weight","badge","renderBadge","ListItemActionWrapper","onDoubleClick","hoverTooltipLabel","alignSelf","ItemAvatar","wrap","SenderName","textValues","Badge","urgent","MessageListComponent","totalMessages","messagesLoadingCompleted","MessageListItemComponent","clicker","firstChildFolderId","addBoard","url","MAILS_ROUTE","messageFolder","sender","showIcon","iconTooltip","iconId","isSentByMe","isReplied","isForwarded","fragmentLabel","scheduledTime","moment","autoSendTime","format","time","defaultValue","onToggle","isScheduled","getFolderTranslatedName","folderName","SortingComponent","buttonRef","sortDirectionState","setSortDirectionState","iconButtonIconProps","SORTING_DIRECTION","ASCENDING","SORT_ICONS","DESCENDING","sortingTypeState","setSortingTypeState","tooltipLabel","getTooltipLabel","performSearch","search","limit","types","switchAscendingOrDescendingOrder","newSortDirection","selectSortingType","sortUnread","unread","sortTo","to","sortFlagged","sortDate","sortFrom","from","sortSubject","sortAttachment","sortImportant","important","multiple","itemPaddingBetween","itemIconSize","selectedBackgroundColor","SelectIconCheckbox","IconCheckbox","palette","primary","regular","containerRef","folderPathLastPartRef","availableWidth","setAvailableWidth","useLayoutEffect","calculateAvailableWidth","offsetWidth","addEventListener","removeEventListener","iconCheckboxLabel","folderPathFirstPart","folderPathLastPart","getFolderPathForBreadcrumb","borderRadius","defaultChecked","onChange","marginLeft","dragCheck","dataTransfer","setDragImage","DraggableItem","Drag","data","parentFolderId","display","onDragStart","HoverBarContainer","hover","sizes","small","HoverContainer","$hoverBackground","TooltipWrapper","enabled","AvatarElement","Avatar","targetParticipants","ParticipantRole","TO","FROM","avatarLabel","avatarEmail","p","fullName","conversationSelect","activateSelectionMode","colorLabel","HoverActionComponent","stopPropagation","hoverActions","dropdownActions","dropdownActionsItems","MessageActionsDescriptors","CREATE_APPOINTMENT","contextMenu","account","useUserAccount","meIndex","activeParticipant","sortingType","absFolderPath","idx","fadeIn","keyframes","Wrapper","transitionDuration","itemCount","animationDelay","animationDuration","times"],"sourceRoot":""}