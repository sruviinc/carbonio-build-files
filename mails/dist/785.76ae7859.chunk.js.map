{"version":3,"file":"785.76ae7859.chunk.js","mappings":"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","sources":["webpack://carbonio-mails-ui/./node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) &&\n            get(_fields, name)._f &&\n            get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    _updateIsValidating([name], true);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    _updateIsValidating([name]);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? []\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","Controller","render","methods","shouldUnregister","isArrayField","array","_name","_subjects","values","updateValue","_formValues","_getWatch","_removeUnmounted","useWatch","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_updateFormState","state","_updateValid","useFormState","_registerProps","register","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","ref","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","useController","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","shouldRenderByError","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","currentError","currentRef","restOfErrorTree","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","useForm","_formControl","_values"],"sourceRoot":""}