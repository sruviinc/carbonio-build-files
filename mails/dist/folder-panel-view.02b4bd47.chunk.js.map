{"version":3,"file":"folder-panel-view.02b4bd47.chunk.js","mappings":"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","sources":["webpack://carbonio-mails-ui/./src/views/app/detail-panel/selection-interactive.tsx","webpack://carbonio-mails-ui/./src/views/app/detail-panel/utils.ts","webpack://carbonio-mails-ui/./src/views/app/detail-panel.tsx","webpack://carbonio-mails-ui/./src/hooks/keyboard-shortcuts.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel/conversations/conversation-list.tsx","webpack://carbonio-mails-ui/./src/hooks/use-conversation-list.ts","webpack://carbonio-mails-ui/./src/hooks/use-message-list.ts","webpack://carbonio-mails-ui/./src/views/app/folder-panel/messages/message-list.tsx","webpack://carbonio-mails-ui/./src/views/app/folder-panel.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n\nimport { Container, Padding, Text } from '@zextras/carbonio-design-system';\nimport { FOLDERS, t } from '@zextras/carbonio-shell-ui';\nimport { useParams } from 'react-router-dom';\n\nimport {\n\tDraftMessages,\n\tEmptyFieldMessages,\n\tEmptyListMessages,\n\tSentMessages,\n\tSpamMessages,\n\tTrashMessages\n} from './utils';\nimport { getFolderIdParts } from '../../../helpers/folders';\nimport { useAppSelector } from '../../../hooks/redux';\nimport { selectConversationsArray } from '../../../store/conversations-slice';\n\nconst generateListRandomNumber = (): number => Math.floor(Math.random() * 3);\nconst generateFieldRandomNumber = (): number => Math.floor(Math.random() * 5);\n\nexport const SelectionInteractive: FC<{ count: number }> = ({ count }) => {\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst conversations = useAppSelector(selectConversationsArray);\n\tconst emptyListMessages = useMemo(() => EmptyListMessages(), []);\n\tconst emptyFieldMessages = useMemo(() => EmptyFieldMessages(), []);\n\tconst spamMessages = useMemo(() => SpamMessages(), []);\n\tconst sentMessages = useMemo(() => SentMessages(), []);\n\tconst draftMessages = useMemo(() => DraftMessages(), []);\n\tconst trashMessages = useMemo(() => TrashMessages(), []);\n\n\tconst [randomListIndex, setRandomListIndex] = useState(0);\n\tconst [randomFieldIndex, setRandomFieldIndex] = useState(0);\n\tuseEffect(() => {\n\t\tconst random = generateListRandomNumber();\n\t\tsetRandomListIndex(random);\n\t}, [folderId]);\n\tuseEffect(() => {\n\t\tconst random = generateFieldRandomNumber();\n\t\tsetRandomFieldIndex(random);\n\t}, [folderId]);\n\n\tconst displayerMessage = useMemo(() => {\n\t\tif (getFolderIdParts(folderId).id === FOLDERS.SPAM) {\n\t\t\treturn conversations?.length > 0 ? spamMessages[1] : spamMessages[0];\n\t\t}\n\t\tif (getFolderIdParts(folderId).id === FOLDERS.SENT) {\n\t\t\treturn conversations?.length > 0 ? sentMessages[1] : sentMessages[0];\n\t\t}\n\t\tif (getFolderIdParts(folderId).id === FOLDERS.DRAFTS) {\n\t\t\treturn conversations?.length > 0 ? draftMessages[1] : draftMessages[0];\n\t\t}\n\t\tif (getFolderIdParts(folderId).id === FOLDERS.TRASH) {\n\t\t\treturn conversations?.length > 0 ? trashMessages[1] : trashMessages[0];\n\t\t}\n\t\treturn conversations && conversations.length > 0\n\t\t\t? emptyFieldMessages[randomFieldIndex]\n\t\t\t: emptyListMessages[randomListIndex];\n\t}, [\n\t\tconversations,\n\t\temptyListMessages,\n\t\temptyFieldMessages,\n\t\trandomListIndex,\n\t\trandomFieldIndex,\n\t\tfolderId,\n\t\tspamMessages,\n\t\tsentMessages,\n\t\tdraftMessages,\n\t\ttrashMessages\n\t]);\n\n\tconst textContentTitle = useMemo(\n\t\t() =>\n\t\t\tcount > 0\n\t\t\t\t? t('label.mail_selected', {\n\t\t\t\t\t\tcount,\n\t\t\t\t\t\tdefaultValue_one: '{{count}} e-mail selected',\n\t\t\t\t\t\tdefaultValue_other: '{{count}} e-mails selected'\n\t\t\t\t\t})\n\t\t\t\t: displayerMessage?.title,\n\t\t[count, displayerMessage?.title]\n\t);\n\tconst textContentSubtitle = useMemo(\n\t\t() => (count > 0 ? null : displayerMessage?.description),\n\t\t[count, displayerMessage?.description]\n\t);\n\n\treturn (\n\t\t<Container background=\"gray5\" data-testid=\"selection-interactive\">\n\t\t\t<Padding all=\"medium\">\n\t\t\t\t<Text\n\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\tweight=\"bold\"\n\t\t\t\t\tsize=\"large\"\n\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center' }}\n\t\t\t\t>\n\t\t\t\t\t{textContentTitle}\n\t\t\t\t</Text>\n\t\t\t</Padding>\n\t\t\t<Text\n\t\t\t\tsize=\"small\"\n\t\t\t\tcolor=\"gray1\"\n\t\t\t\toverflow=\"break-word\"\n\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center' }}\n\t\t\t>\n\t\t\t\t{textContentSubtitle}\n\t\t\t</Text>\n\t\t</Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { t } from '@zextras/carbonio-shell-ui';\n\ntype ReturnType = Array<{ title: string; description: string }>;\nexport const EmptyListMessages = (): ReturnType => [\n\t{\n\t\ttitle: t('displayer.title1', 'Compose a new e-mail by clicking the \"NEW\"button'),\n\t\tdescription: ''\n\t},\n\t{\n\t\ttitle: t('displayer.title2', 'Click the “NEW” button'),\n\t\tdescription: t(\n\t\t\t'displayer.description2',\n\t\t\t'Send documents, images and more by composing a new e-mail.'\n\t\t)\n\t},\n\t{\n\t\ttitle: t('displayer.title3', 'Stay in touch with other users.'),\n\t\tdescription: t('displayer.title1', 'Compose a new e-mail by clicking the \"NEW\" button')\n\t}\n];\n\nexport const EmptyFieldMessages = (): ReturnType => [\n\t{\n\t\ttitle: t('displayer.title4', 'Select an e-mail to read it'),\n\t\tdescription: t('displayer.description4', 'You can flag it, reply or forward it to other users.')\n\t},\n\t{\n\t\ttitle: t('displayer.title4', 'Select an e-mail to read it'),\n\t\tdescription: t(\n\t\t\t'displayer.description5',\n\t\t\t'Check out what other users want to talk with you about.'\n\t\t)\n\t},\n\t{\n\t\ttitle: t('displayer.title4', 'Select an e-mail to read it'),\n\t\tdescription: t('displayer.description6', 'Reply to this e-mail or forward it to other users.')\n\t},\n\t{\n\t\ttitle: t('displayer.title3', 'Stay in touch with other users'),\n\t\tdescription: t('displayer.description7', 'Select an e-mail to reply.')\n\t},\n\t{\n\t\ttitle: t('displayer.title8', 'Select an e-mail to read or delete it.'),\n\t\tdescription: ''\n\t}\n];\n\nexport const SpamMessages = (): ReturnType => [\n\t{\n\t\ttitle: t(\n\t\t\t'displayer.spam_title1',\n\t\t\t'How lucky! There are no spam e-mails you have to worry about'\n\t\t),\n\t\tdescription: ''\n\t},\n\t{\n\t\ttitle: t('displayer.spam_title2', 'Click the trash icon to delete a spam e-mail.'),\n\t\tdescription: ''\n\t}\n];\n\nexport const SentMessages = (): ReturnType => [\n\t{\n\t\ttitle: t('displayer.title3', 'Stay in touch with other users.'),\n\t\tdescription: t('displayer.title1', 'Compose a new e-mail by clicking the \"NEW\" button')\n\t},\n\t{\n\t\ttitle: t('displayer.sent_title2', \"Select an e-mail to display what you've sent.\"),\n\t\tdescription: ''\n\t}\n];\n\nexport const DraftMessages = (): ReturnType => [\n\t{\n\t\ttitle: t(\n\t\t\t'displayer.draft_title1',\n\t\t\t\"Saving an e-mail ad a draft allows you to keep the messages that you'd like to send later.\"\n\t\t),\n\t\tdescription: ''\n\t},\n\t{\n\t\ttitle: t('displayer.draft_title2', 'Select and edit an e-mail to send it to other users.'),\n\t\tdescription: ''\n\t}\n];\n\nexport const TrashMessages = (): ReturnType => [\n\t{\n\t\ttitle: t('displayer.trash_title1', 'Click the trash icon to delete an e-mail'),\n\t\tdescription: ''\n\t},\n\t{\n\t\ttitle: t('displayer.trash_title2', 'Select and restore e-mails from the trash.'),\n\t\tdescription: ''\n\t}\n];\n\nexport const ArchiveMessages = (): ReturnType => [\n\t{\n\t\ttitle: t('displayer.archive_title1', 'Save an e-mail to archive so you can review it later.'),\n\t\tdescription: ''\n\t},\n\t{\n\t\ttitle: t('displayer.archive_title2', 'Select an archived e-mail to review it.'),\n\t\tdescription: ''\n\t}\n];\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport { useAppContext } from '@zextras/carbonio-shell-ui';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport { ConversationPreviewPanelContainer } from './detail-panel/conversation-preview-panel-container';\nimport { MessagePreviewPanelContainer } from './detail-panel/message-preview-panel-container';\nimport { SelectionInteractive } from './detail-panel/selection-interactive';\nimport type { AppContext } from '../../types';\n\nconst DetailPanel: FC<{}> = ({}) => {\n\tconst { path } = useRouteMatch();\n\tconst { count } = useAppContext<AppContext>();\n\treturn (\n\t\t<Container width=\"100%\" data-testid=\"third-panel\">\n\t\t\t<Switch>\n\t\t\t\t<Route exact path={`${path}/folder/:folderId`}>\n\t\t\t\t\t<SelectionInteractive count={count} />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path={`${path}/folder/:folderId/conversation/:conversationId`}>\n\t\t\t\t\t<ConversationPreviewPanelContainer />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path={`${path}/folder/:folderId/message/:messageId`}>\n\t\t\t\t\t<MessagePreviewPanelContainer />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Container>\n\t);\n};\n\nexport default DetailPanel;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useCallback } from 'react';\n\nimport { noop } from 'lodash';\n\nimport { AppDispatch } from '../store/redux';\nimport {\n\tsetConversationsFlag,\n\tsetConversationsRead,\n\tuseMoveConversationToTrash,\n\tuseSetConversationAsSpam\n} from '../ui-actions/conversation-actions';\n\ntype HandleKeyboardShortcutsProps = {\n\tevent: KeyboardEvent;\n\titemId: string;\n\tfolderId: string;\n\tdispatch: AppDispatch;\n\tdeselectAll: () => void;\n\tconversations: Array<{ id: string; flagged: boolean }>;\n};\n\nconst modifierKeysFirstTier: string[] = ['v', 'm', '.', 'n'];\nconst modifierKeysSecondTier: string[] = [];\n\nlet keySequence = '';\nexport const useKeyboardShortcuts = (): ((args: HandleKeyboardShortcutsProps) => void) => {\n\tconst setConversationAsSpam = useSetConversationAsSpam();\n\tconst moveConversationToTrash = useMoveConversationToTrash();\n\n\treturn useCallback(\n\t\t({ event, itemId, conversations, dispatch, deselectAll, folderId }) => {\n\t\t\tconst conversationFlag = conversations.filter(\n\t\t\t\t(conversation) => conversation.id === itemId\n\t\t\t)?.[0]?.flagged;\n\n\t\t\tconst eventActions = (): void => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t};\n\n\t\t\tconst isGlobalContext =\n\t\t\t\tevent.target instanceof HTMLElement &&\n\t\t\t\t!event.target.isContentEditable &&\n\t\t\t\tevent.target.nodeName !== 'INPUT' &&\n\t\t\t\tevent.target.nodeName !== 'TEXTAREA';\n\n\t\t\tconst callKeyboardShortcutAction = (): void => {\n\t\t\t\tswitch (keySequence) {\n\t\t\t\t\tcase 'mr': // Mark read\n\t\t\t\t\tcase 'z': // Mark read\n\t\t\t\t\t\tif (isGlobalContext) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t\tsetConversationsRead({\n\t\t\t\t\t\t\t\tids: [itemId],\n\t\t\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t\t\tdeselectAll: noop,\n\t\t\t\t\t\t\t\tshouldReplaceHistory: false,\n\t\t\t\t\t\t\t\tfolderId\n\t\t\t\t\t\t\t}).onClick(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mu': // Mark unread\n\t\t\t\t\t\tif (isGlobalContext) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t\tsetConversationsRead({\n\t\t\t\t\t\t\t\tids: [itemId],\n\t\t\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t\t\tdeselectAll: noop,\n\t\t\t\t\t\t\t\tshouldReplaceHistory: false,\n\t\t\t\t\t\t\t\tfolderId\n\t\t\t\t\t\t\t}).onClick(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'x': // Mark unread\n\t\t\t\t\t\tif (isGlobalContext && itemId) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t\tsetConversationsRead({\n\t\t\t\t\t\t\t\tids: [itemId],\n\t\t\t\t\t\t\t\tvalue: true,\n\t\t\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t\t\tdeselectAll: noop,\n\t\t\t\t\t\t\t\tshouldReplaceHistory: false,\n\t\t\t\t\t\t\t\tfolderId\n\t\t\t\t\t\t\t}).onClick(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'mf': // Flag/Unflag messages\n\t\t\t\t\t\tif (isGlobalContext && itemId) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t\tsetConversationsFlag({ ids: [itemId], value: conversationFlag, dispatch }).onClick(\n\t\t\t\t\t\t\t\tevent\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ms': // Report (mark as) spam\n\t\t\t\t\t\tif (isGlobalContext && itemId) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t\tsetConversationAsSpam({\n\t\t\t\t\t\t\t\tids: [itemId],\n\t\t\t\t\t\t\t\tvalue: false,\n\t\t\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t\t\tdeselectAll\n\t\t\t\t\t\t\t}).onClick(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '.t': // Move to Trash\n\t\t\t\t\t\tif (isGlobalContext && itemId) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t\tmoveConversationToTrash({\n\t\t\t\t\t\t\t\tids: [itemId],\n\t\t\t\t\t\t\t\tdispatch,\n\t\t\t\t\t\t\t\tdeselectAll,\n\t\t\t\t\t\t\t\tfolderId\n\t\t\t\t\t\t\t}).onClick(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '.i': // Move to Inbox\n\t\t\t\t\tcase 'r': // Reply\n\t\t\t\t\tcase 'a': // Reply all\n\t\t\t\t\tcase 'f': // Forward message\n\t\t\t\t\tcase 'nf': // New folder\n\t\t\t\t\t\tif (isGlobalContext) {\n\t\t\t\t\t\t\teventActions();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tkeySequence = '';\n\t\t\t};\n\n\t\t\tkeySequence = keySequence.concat(event.key);\n\t\t\tconst timer = setTimeout(callKeyboardShortcutAction, 1000);\n\n\t\t\tswitch (keySequence.length) {\n\t\t\t\tcase 1:\n\t\t\t\t\tif (modifierKeysFirstTier.indexOf(event.key) === -1) {\n\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\tcallKeyboardShortcutAction();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t// FIXME: modifierKeysSecondTier can only be empty here, so the if condition is always true\n\t\t\t\t\tif (modifierKeysSecondTier.indexOf(event.key) === -1) {\n\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\tcallKeyboardShortcutAction();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t}\n\t\t},\n\t\t[moveConversationToTrash, setConversationAsSpam]\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { FOLDERS, t, useAppContext, useUserSettings } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { ConversationListComponent } from './conversation-list-component';\nimport { ConversationListItemComponent } from './conversation-list-item-component';\nimport { CustomListItem } from '../../../../carbonio-ui-commons/components/list/list-item';\nimport { useFolder } from '../../../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport {\n\tAPI_REQUEST_STATUS,\n\tLIST_LIMIT,\n\tSEARCHED_FOLDER_STATE_STATUS\n} from '../../../../constants';\nimport { getFolderIdParts } from '../../../../helpers/folders';\nimport { parseMessageSortingOptions } from '../../../../helpers/sorting';\nimport { useKeyboardShortcuts } from '../../../../hooks/keyboard-shortcuts';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/redux';\nimport { useConversationListItems } from '../../../../hooks/use-conversation-list';\nimport { useSelection } from '../../../../hooks/use-selection';\nimport { search } from '../../../../store/actions';\nimport {\n\tselectConversationsSearchRequestStatus,\n\tselectFolderSearchStatus\n} from '../../../../store/conversations-slice';\nimport type { AppContext } from '../../../../types';\n\nexport const ConversationList: FC = () => {\n\tconst { folderId, itemId } = useParams<{ folderId: string; itemId: string }>();\n\tconst { setCount, count } = useAppContext<AppContext>();\n\tconst conversations = useConversationListItems();\n\n\tconst [draggedIds, setDraggedIds] = useState<Record<string, boolean>>();\n\tconst dragImageRef = useRef(null);\n\tconst dispatch = useAppDispatch();\n\tconst searchRequestStatus = useAppSelector(selectConversationsSearchRequestStatus);\n\n\tconst searchedInFolderStatus = useAppSelector(selectFolderSearchStatus(folderId));\n\n\tconst {\n\t\tselected,\n\t\ttoggle,\n\t\tdeselectAll,\n\t\tisSelectModeOn,\n\t\tsetIsSelectModeOn,\n\t\tselectAll,\n\t\tisAllSelected,\n\t\tselectAllModeOff\n\t} = useSelection({ currentFolderId: folderId, setCount, count, items: conversations });\n\n\tconst folder = useFolder(folderId);\n\tconst hasMore = useMemo(\n\t\t() => searchedInFolderStatus === SEARCHED_FOLDER_STATE_STATUS.hasMore,\n\t\t[searchedInFolderStatus]\n\t);\n\n\tconst { prefs } = useUserSettings();\n\tconst { sortOrder } = parseMessageSortingOptions(folderId, prefs.zimbraPrefSortOrder as string);\n\n\tconst loadMore = useCallback(() => {\n\t\tif (!hasMore) return;\n\t\tconst offset = conversations.length;\n\t\tdispatch(search({ folderId, offset, sortBy: sortOrder, limit: LIST_LIMIT.LOAD_MORE_LIMIT }));\n\t}, [hasMore, conversations.length, dispatch, folderId, sortOrder]);\n\n\tconst handleKeyboardShortcuts = useKeyboardShortcuts();\n\tuseEffect(() => {\n\t\tconst handler = (event: KeyboardEvent): void =>\n\t\t\thandleKeyboardShortcuts({\n\t\t\t\tevent,\n\t\t\t\tfolderId,\n\t\t\t\titemId,\n\t\t\t\tconversations,\n\t\t\t\tdispatch,\n\t\t\t\tdeselectAll\n\t\t\t});\n\t\tdocument.addEventListener('keydown', handler);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', handler);\n\t\t};\n\t}, [folderId, itemId, conversations, dispatch, deselectAll, handleKeyboardShortcuts]);\n\n\tconst displayerTitle = useMemo(() => {\n\t\tif (conversations?.length === 0) {\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.SPAM) {\n\t\t\t\treturn t('displayer.list_spam_title', 'There are no spam e-mails');\n\t\t\t}\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.SENT) {\n\t\t\t\treturn t('displayer.list_sent_title', 'You haven’t sent any e-mail yet');\n\t\t\t}\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.DRAFTS) {\n\t\t\t\treturn t('displayer.list_draft_title', 'There are no saved drafts');\n\t\t\t}\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.TRASH) {\n\t\t\t\treturn t('displayer.list_trash_title', 'The trash is empty');\n\t\t\t}\n\t\t\treturn t('displayer.list_folder_title', 'It looks like there are no e-mails yet');\n\t\t}\n\t\treturn null;\n\t}, [conversations, folderId]);\n\n\tconst listItems = useMemo(\n\t\t() =>\n\t\t\tmap(conversations, (conversation) => {\n\t\t\t\tconst active = itemId === conversation.id;\n\t\t\t\tconst isSelected = selected[conversation.id];\n\t\t\t\treturn (\n\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\tbackground={conversation.read ? 'gray6' : 'gray5'}\n\t\t\t\t\t\tkey={conversation.id}\n\t\t\t\t\t>\n\t\t\t\t\t\t{(visible: boolean): React.JSX.Element =>\n\t\t\t\t\t\t\tvisible ? (\n\t\t\t\t\t\t\t\t<ConversationListItemComponent\n\t\t\t\t\t\t\t\t\titem={conversation}\n\t\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\t\t\t\tactiveItemId={itemId}\n\t\t\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\t\t\t\t\t\t\tselectedItems={selected}\n\t\t\t\t\t\t\t\t\tdragImageRef={dragImageRef}\n\t\t\t\t\t\t\t\t\tselecting={isSelectModeOn}\n\t\t\t\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\t\t\t\tselectedIds={Object.keys(selected)}\n\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div style={{ height: '4rem' }} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</CustomListItem>\n\t\t\t\t);\n\t\t\t}),\n\t\t[conversations, deselectAll, folderId, isSelectModeOn, itemId, selected, toggle]\n\t);\n\n\tconst totalConversations = useMemo(\n\t\t() => conversations.length ?? folder?.n ?? 0,\n\t\t[conversations.length, folder?.n]\n\t);\n\tconst selectedIds = useMemo(() => Object.keys(selected), [selected]);\n\n\tconst conversationsLoadingCompleted = useMemo(\n\t\t() => searchRequestStatus === API_REQUEST_STATUS.fulfilled,\n\t\t[searchRequestStatus]\n\t);\n\n\treturn (\n\t\t<ConversationListComponent\n\t\t\tlistItems={listItems}\n\t\t\tdisplayerTitle={displayerTitle}\n\t\t\ttotalConversations={totalConversations}\n\t\t\tconversationsLoadingCompleted={conversationsLoadingCompleted}\n\t\t\tloadMore={loadMore}\n\t\t\tselectedIds={selectedIds}\n\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\tselectAll={selectAll}\n\t\t\tisAllSelected={isAllSelected}\n\t\t\tselectAllModeOff={selectAllModeOff}\n\t\t\tdraggedIds={draggedIds}\n\t\t\tfolderId={folderId}\n\t\t\tconversations={conversations}\n\t\t\tselected={selected}\n\t\t\tdeselectAll={deselectAll}\n\t\t\tdragImageRef={dragImageRef}\n\t\t\thasMore={hasMore}\n\t\t/>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useEffect, useMemo } from 'react';\n\nimport { useUserSettings } from '@zextras/carbonio-shell-ui';\nimport { reduce, some, sortBy } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { getFolder } from '../carbonio-ui-commons/store/zustand/folder/hooks';\nimport { LIST_LIMIT } from '../constants';\nimport { parseMessageSortingOptions } from '../helpers/sorting';\nimport { search } from '../store/actions';\nimport {\n\tselectConversationsArray,\n\tselectConversationsSearchRequestStatus\n} from '../store/conversations-slice';\nimport type { Conversation } from '../types';\n\ntype RouteParams = {\n\tfolderId: string;\n};\n\nexport const useConversationListItems = (): Array<Conversation> => {\n\tconst { folderId } = <RouteParams>useParams();\n\tconst dispatch = useAppDispatch();\n\tconst { prefs } = useUserSettings();\n\tconst { sortOrder } = parseMessageSortingOptions(folderId, prefs.zimbraPrefSortOrder as string);\n\tconst searchRequestStatus = useAppSelector(selectConversationsSearchRequestStatus);\n\tconst conversations = useAppSelector(selectConversationsArray);\n\tconst folder = getFolder(folderId);\n\n\tconst filteredConversations = useMemo(\n\t\t() =>\n\t\t\tfolder\n\t\t\t\t? reduce(\n\t\t\t\t\t\tconversations,\n\t\t\t\t\t\t(acc, v) =>\n\t\t\t\t\t\t\tsome(v.messages, [\n\t\t\t\t\t\t\t\t'parent',\n\t\t\t\t\t\t\t\t'rid' in folder && folder?.rid ? `${folder.zid}:${folder.rid}` : folder.id\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t? [...acc, v]\n\t\t\t\t\t\t\t\t: acc,\n\t\t\t\t\t\t[] as Array<Conversation>\n\t\t\t\t\t)\n\t\t\t\t: [],\n\t\t[folder, conversations]\n\t);\n\n\tconst sortedConversations = useMemo(\n\t\t() => sortBy(filteredConversations, 'sortIndex'),\n\t\t[filteredConversations]\n\t);\n\t// this useEffect is used to trigger the search action when the folder is changed\n\tuseEffect(() => {\n\t\tif (searchRequestStatus !== null) return;\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId,\n\t\t\t\tlimit: LIST_LIMIT.INITIAL_LIMIT,\n\t\t\t\tsortBy: sortOrder,\n\t\t\t\ttypes: 'conversation'\n\t\t\t})\n\t\t);\n\t}, [dispatch, folderId, searchRequestStatus, sortOrder]);\n\n\treturn sortedConversations;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useEffect, useMemo } from 'react';\n\nimport { useUserSettings } from '@zextras/carbonio-shell-ui';\nimport { filter, sortBy } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { getFolder } from '../carbonio-ui-commons/store/zustand/folder/hooks';\nimport { LIST_LIMIT } from '../constants';\nimport { parseMessageSortingOptions } from '../helpers/sorting';\nimport { search } from '../store/actions';\nimport { selectMessagesArray, selectMessagesSearchRequestStatus } from '../store/messages-slice';\nimport type { MailMessage } from '../types';\n\ntype RouteParams = {\n\tfolderId: string;\n};\n\nexport const useMessageList = (): Array<MailMessage> => {\n\tconst { folderId } = <RouteParams>useParams();\n\tconst dispatch = useAppDispatch();\n\tconst { prefs } = useUserSettings();\n\tconst { sortOrder } = parseMessageSortingOptions(folderId, prefs.zimbraPrefSortOrder as string);\n\n\tconst searchRequestStatus = useAppSelector(selectMessagesSearchRequestStatus);\n\tconst messages = useAppSelector(selectMessagesArray);\n\tconst folder = getFolder(folderId);\n\n\tconst filteredMessages = useMemo(\n\t\t() =>\n\t\t\tfolder\n\t\t\t\t? filter(messages, [\n\t\t\t\t\t\t'parent',\n\t\t\t\t\t\t'rid' in folder && folder?.rid ? `${folder.zid}:${folder.rid}` : folder.id\n\t\t\t\t\t])\n\t\t\t\t: [],\n\t\t[folder, messages]\n\t);\n\n\tconst sortedMessages = useMemo(() => sortBy(filteredMessages, 'sortIndex'), [filteredMessages]);\n\n\tuseEffect(() => {\n\t\tif (searchRequestStatus !== null) return;\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId,\n\t\t\t\tlimit: LIST_LIMIT.INITIAL_LIMIT + 1,\n\t\t\t\tsortBy: sortOrder,\n\t\t\t\ttypes: 'message'\n\t\t\t})\n\t\t);\n\t}, [dispatch, folderId, searchRequestStatus, sortOrder]);\n\n\treturn sortedMessages;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, ReactElement, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { FOLDERS, t, useAppContext, useUserSettings } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { MessageListComponent } from './message-list-component';\nimport { MessageListItemComponent } from './message-list-item-component';\nimport { CustomListItem } from '../../../../carbonio-ui-commons/components/list/list-item';\nimport { useFolder } from '../../../../carbonio-ui-commons/store/zustand/folder/hooks';\nimport {\n\tAPI_REQUEST_STATUS,\n\tLIST_LIMIT,\n\tSEARCHED_FOLDER_STATE_STATUS\n} from '../../../../constants';\nimport { getFolderIdParts } from '../../../../helpers/folders';\nimport { parseMessageSortingOptions } from '../../../../helpers/sorting';\nimport { useAppDispatch, useAppSelector } from '../../../../hooks/redux';\nimport { useMessageList } from '../../../../hooks/use-message-list';\nimport { useSelection } from '../../../../hooks/use-selection';\nimport { search } from '../../../../store/actions';\nimport {\n\tselectFolderMsgSearchStatus,\n\tselectMessagesSearchRequestStatus\n} from '../../../../store/messages-slice';\nimport type { AppContext } from '../../../../types';\n\nexport const MessageList: FC = () => {\n\tconst { itemId, folderId } = useParams<{ itemId: string; folderId: string }>();\n\tconst folder = useFolder(folderId);\n\tconst dispatch = useAppDispatch();\n\tconst { setCount, count } = useAppContext<AppContext>();\n\tconst [draggedIds, setDraggedIds] = useState<Record<string, boolean>>({});\n\tconst dragImageRef = useRef(null);\n\tconst searchRequestStatus = useAppSelector(selectMessagesSearchRequestStatus);\n\tconst searchedInFolderStatus = useAppSelector(selectFolderMsgSearchStatus(folderId));\n\n\tconst messages = useMessageList();\n\n\tconst { prefs } = useUserSettings();\n\tconst { sortOrder } = parseMessageSortingOptions(folderId, prefs.zimbraPrefSortOrder as string);\n\n\tconst {\n\t\tselected,\n\t\tdeselectAll,\n\t\tisSelectModeOn,\n\t\tsetIsSelectModeOn,\n\t\tselectAll,\n\t\ttoggle,\n\t\tisAllSelected,\n\t\tselectAllModeOff\n\t} = useSelection({\n\t\tcurrentFolderId: folderId,\n\t\tsetCount,\n\t\tcount,\n\t\titems: messages\n\t});\n\n\tconst hasMore = useMemo(\n\t\t() => searchedInFolderStatus === SEARCHED_FOLDER_STATE_STATUS.hasMore,\n\t\t[searchedInFolderStatus]\n\t);\n\n\tconst loadMore = useCallback(() => {\n\t\tif (!hasMore) return;\n\t\tconst offset = messages.length;\n\t\tdispatch(\n\t\t\tsearch({\n\t\t\t\tfolderId,\n\t\t\t\tsortBy: sortOrder,\n\t\t\t\toffset,\n\t\t\t\tlimit: LIST_LIMIT.LOAD_MORE_LIMIT,\n\t\t\t\ttypes: 'message'\n\t\t\t})\n\t\t);\n\t}, [dispatch, folderId, hasMore, messages.length, sortOrder]);\n\n\tconst displayerTitle = useMemo(() => {\n\t\tif (messages?.length === 0) {\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.SPAM) {\n\t\t\t\treturn t('displayer.list_spam_title', 'There are no spam e-mails');\n\t\t\t}\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.SENT) {\n\t\t\t\treturn t('displayer.list_sent_title', 'You havent sent any e-mail yet');\n\t\t\t}\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.DRAFTS) {\n\t\t\t\treturn t('displayer.list_draft_title', 'There are no saved drafts');\n\t\t\t}\n\t\t\tif (getFolderIdParts(folderId).id === FOLDERS.TRASH) {\n\t\t\t\treturn t('displayer.list_trash_title', 'The trash is empty');\n\t\t\t}\n\t\t\treturn t('displayer.list_folder_title', 'It looks like there are no e-mails yet');\n\t\t}\n\t\treturn null;\n\t}, [messages, folderId]);\n\n\tconst listItems = useMemo(\n\t\t() =>\n\t\t\tmap(messages, (message) => {\n\t\t\t\tconst isSelected = selected[message.id];\n\t\t\t\tconst active = itemId === message.id;\n\t\t\t\treturn (\n\t\t\t\t\t<CustomListItem\n\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\tselected={isSelected}\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\tbackground={message.read ? '#ffffff' : '#ffffff'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{(visible: boolean): ReactElement =>\n\t\t\t\t\t\t\tvisible ? (\n\t\t\t\t\t\t\t\t<MessageListItemComponent\n\t\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\t\t\tisSelected={isSelected}\n\t\t\t\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\t\t\t\t\t\t\tdragImageRef={dragImageRef}\n\t\t\t\t\t\t\t\t\tdraggedIds={draggedIds}\n\t\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\t\t\t\t\t\t\tcurrentFolderId={folderId}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div style={{ height: '4rem' }} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</CustomListItem>\n\t\t\t\t);\n\t\t\t}),\n\t\t[deselectAll, draggedIds, folderId, isSelectModeOn, itemId, messages, selected, toggle]\n\t);\n\n\tconst totalMessages = useMemo(\n\t\t() => (sortOrder === 'readAsc' ? messages.length : folder?.n ?? messages.length ?? 0),\n\t\t[folder?.n, messages.length, sortOrder]\n\t);\n\n\tconst selectedIds = useMemo(() => Object.keys(selected), [selected]);\n\n\tconst messagesLoadingCompleted = useMemo(\n\t\t() => searchRequestStatus === API_REQUEST_STATUS.fulfilled,\n\t\t[searchRequestStatus]\n\t);\n\n\tuseEffect(() => {\n\t\tsetDraggedIds(selected);\n\t}, [selected]);\n\n\treturn (\n\t\t<MessageListComponent\n\t\t\ttotalMessages={totalMessages}\n\t\t\tdisplayerTitle={displayerTitle}\n\t\t\tlistItems={listItems}\n\t\t\tloadMore={loadMore}\n\t\t\tmessagesLoadingCompleted={messagesLoadingCompleted}\n\t\t\tselectedIds={selectedIds}\n\t\t\tfolderId={folderId}\n\t\t\tmessages={messages}\n\t\t\tdraggedIds={draggedIds}\n\t\t\tsetDraggedIds={setDraggedIds}\n\t\t\tisSelectModeOn={isSelectModeOn}\n\t\t\tsetIsSelectModeOn={setIsSelectModeOn}\n\t\t\tisAllSelected={isAllSelected}\n\t\t\tselectAll={selectAll}\n\t\t\tdeselectAll={deselectAll}\n\t\t\tselected={selected}\n\t\t\tselectAllModeOff={selectAllModeOff}\n\t\t\tdragImageRef={dragImageRef}\n\t\t\thasMore={hasMore}\n\t\t/>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint-disable no-nested-ternary */\n\nimport React, { FC, useEffect } from 'react';\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport { FOLDERS, useAppContext } from '@zextras/carbonio-shell-ui';\nimport { isNil } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { ConversationList } from './folder-panel/conversations/conversation-list';\nimport { MessageList } from './folder-panel/messages/message-list';\nimport { useAppDispatch } from '../../hooks/redux';\nimport type { AppContext } from '../../types';\nimport ShimmerList from '../search/shimmer-list';\n\nconst FolderPanel: FC = () => {\n\tconst { folderId } = useParams<{ folderId: string }>();\n\tconst dispatch = useAppDispatch();\n\tconst { isMessageView } = useAppContext<AppContext>();\n\n\tuseEffect(() => {\n\t\tif (folderId) {\n\t\t\tdispatch({\n\t\t\t\ttype: 'conversations/setCurrentFolder',\n\t\t\t\tpayload: folderId\n\t\t\t});\n\t\t}\n\t}, [folderId, dispatch]);\n\n\treturn isNil(isMessageView) ? (\n\t\t<ShimmerList />\n\t) : (\n\t\t<Container\n\t\t\torientation=\"row\"\n\t\t\tcrossAlignment=\"flex-start\"\n\t\t\tmainAlignment=\"flex-start\"\n\t\t\twidth=\"fill\"\n\t\t\tbackground=\"white\"\n\t\t\tborderRadius=\"none\"\n\t\t\tstyle={{\n\t\t\t\tmaxHeight: '100%'\n\t\t\t}}\n\t\t>\n\t\t\t<Container mainAlignment=\"flex-start\" borderRadius=\"none\" data-testid=\"list-wrapper\">\n\t\t\t\t{isMessageView || folderId === FOLDERS.DRAFTS ? <MessageList /> : <ConversationList />}\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n\nexport default FolderPanel;\n"],"names":["SelectionInteractive","count","folderId","useParams","conversations","useAppSelector","selectConversationsArray","emptyListMessages","useMemo","title","t","description","emptyFieldMessages","spamMessages","sentMessages","draftMessages","trashMessages","randomListIndex","setRandomListIndex","useState","randomFieldIndex","setRandomFieldIndex","useEffect","random","Math","floor","displayerMessage","getFolderIdParts","id","FOLDERS","SPAM","length","SENT","DRAFTS","TRASH","textContentTitle","defaultValue_one","defaultValue_other","textContentSubtitle","React","Container","background","Padding","all","Text","color","overflow","weight","size","style","whiteSpace","textAlign","DetailPanel","path","useRouteMatch","useAppContext","width","Switch","Route","exact","ConversationPreviewPanelContainer","MessagePreviewPanelContainer","modifierKeysFirstTier","modifierKeysSecondTier","keySequence","ConversationList","itemId","setCount","useConversationListItems","dispatch","useAppDispatch","prefs","useUserSettings","sortOrder","parseMessageSortingOptions","zimbraPrefSortOrder","searchRequestStatus","selectConversationsSearchRequestStatus","folder","getFolder","filteredConversations","reduce","acc","v","some","messages","rid","zid","sortedConversations","sortBy","search","limit","LIST_LIMIT","INITIAL_LIMIT","types","draggedIds","setDraggedIds","dragImageRef","useRef","searchedInFolderStatus","selectFolderSearchStatus","selected","toggle","deselectAll","isSelectModeOn","setIsSelectModeOn","selectAll","isAllSelected","selectAllModeOff","useSelection","currentFolderId","items","useFolder","hasMore","SEARCHED_FOLDER_STATE_STATUS","loadMore","useCallback","offset","LOAD_MORE_LIMIT","handleKeyboardShortcuts","useKeyboardShortcuts","setConversationAsSpam","useSetConversationAsSpam","moveConversationToTrash","useMoveConversationToTrash","event","conversationFlag","filter","conversation","flagged","eventActions","preventDefault","stopImmediatePropagation","isGlobalContext","target","HTMLElement","isContentEditable","nodeName","callKeyboardShortcutAction","setConversationsRead","ids","value","noop","shouldReplaceHistory","onClick","setConversationsFlag","concat","key","timer","setTimeout","indexOf","clearTimeout","handler","document","addEventListener","removeEventListener","displayerTitle","listItems","map","active","isSelected","CustomListItem","read","visible","ConversationListItemComponent","item","activeItemId","selectedItems","selecting","selectedIds","Object","keys","height","totalConversations","n","conversationsLoadingCompleted","API_REQUEST_STATUS","fulfilled","ConversationListComponent","MessageList","selectMessagesSearchRequestStatus","selectFolderMsgSearchStatus","useMessageList","selectMessagesArray","filteredMessages","sortedMessages","message","MessageListItemComponent","totalMessages","messagesLoadingCompleted","MessageListComponent","FolderPanel","isMessageView","type","payload","isNil","ShimmerList","orientation","crossAlignment","mainAlignment","borderRadius","maxHeight"],"sourceRoot":""}