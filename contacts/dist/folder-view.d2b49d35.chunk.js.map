{"version":3,"file":"folder-view.d2b49d35.chunk.js","mappings":"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","sources":["webpack://carbonio-contacts-ui/./src/legacy/hooks/use-display-name.ts","webpack://carbonio-contacts-ui/./src/legacy/store/selectors/contacts.ts","webpack://carbonio-contacts-ui/./src/legacy/views/app/breadcrumbs.jsx","webpack://carbonio-contacts-ui/./src/legacy/views/app/folder-panel/contact-list-item.jsx","webpack://carbonio-contacts-ui/./src/legacy/views/app/folder-panel/contacts-list.jsx","webpack://carbonio-contacts-ui/./src/legacy/hooks/useSelection.jsx","webpack://carbonio-contacts-ui/./src/legacy/views/folder/select-panel-actions.tsx","webpack://carbonio-contacts-ui/./src/legacy/views/app/folder-panel.tsx","webpack://carbonio-contacts-ui/./src/sruvi/Colors.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useMemo } from 'react';\n\nimport { t } from '@zextras/carbonio-shell-ui';\nimport { trim } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport { Contact } from '../types/contact';\n\n/*\n * Returns the Display name\n * It will check the firstName, middleName and lastName props in contact and will return in string which are available.\n * If firstName, middleName or lastName not available and email found in contact then will return <No name> with email.\n */\nexport const getDisplayName = (contact: Contact): string | undefined => {\n\tif ((contact.firstName || contact.middleName || contact.lastName) && !contact.displayName) {\n\t\treturn trim(\n\t\t\t`${contact.firstName || ''} ${contact.middleName || ''} ${contact.lastName || ''} ${\n\t\t\t\tcontact.nameSuffix || ''\n\t\t\t}`\n\t\t);\n\t}\n\tif (contact.displayName) {\n\t\treturn contact.displayName;\n\t}\n\tconst emailsTypes = Object.keys(contact.email);\n\tif (contact.email && emailsTypes.length > 0) {\n\t\treturn `<${t('label.no_name', 'No Name')}> ${contact.email[emailsTypes[0]].mail}`;\n\t}\n\n\treturn undefined;\n};\n\n/*\n * UseDisplayName hook is returning the Display name\n * It will check the firstName, middleName and lastName props in contact and will return in string which are available.\n * If firstName, middleName or lastName not available and email found in contact then will return <No name> with email.\n */\nexport const useDisplayName = (contact: Contact): string => {\n\tconst [t] = useTranslation();\n\treturn useMemo(() => {\n\t\tif (contact) {\n\t\t\tconst displayName = getDisplayName(contact);\n\t\t\tif (displayName) {\n\t\t\t\treturn displayName;\n\t\t\t}\n\t\t\tif (contact.email && Object.keys(contact.email).length > 0) {\n\t\t\t\treturn `<${t('label.no_name', 'No Name')}> ${contact.email[0].mail}`;\n\t\t\t}\n\t\t}\n\t\treturn `<${t('label.no_data', 'No Data')}>`;\n\t}, [contact, t]);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { find } from 'lodash';\n\nimport { Contact } from '../../types/contact';\nimport { State } from '../../types/store';\n\nexport function selectAllContacts({\n\tcontacts\n}: State): { [p: string]: Array<Contact> } | undefined {\n\treturn contacts?.contacts;\n}\n\nexport function selectAllContactsInFolder({ contacts }: State, id: string): Contact[] | undefined {\n\treturn contacts?.contacts?.[id];\n}\n\nexport function selectContact(\n\t{ contacts }: State,\n\tfolderId: string,\n\tid: string\n): Contact | undefined {\n\treturn find(contacts?.contacts?.[folderId], ['id', id]);\n}\n\nexport function selectContactsStatus({ contacts }: State, id: string): boolean | undefined {\n\treturn contacts?.status?.[id];\n}\n\nexport function selectFolderStatus({ contacts }: State, id: string): boolean | undefined {\n\treturn contacts?.status?.[id];\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useMemo } from 'react';\n\nimport { Container, Row, Text, Divider } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport { getFolderTranslatedNameByName } from '../../utils/helpers';\nimport { Typography } from '@mui/material';\n\nexport function Breadcrumbs({ folderPath, itemsCount }) {\n\tconst [t] = useTranslation();\n\t// const label = useMemo(\n\t// \t() =>\n\t// \t\tfolderPath\n\t// \t\t\t?.split('/')\n\t// \t\t\t?.map((token) => getFolderTranslatedNameByName(t, token))\n\t// \t\t\t.join(' / '),\n\t// \t[t, folderPath]\n\t// );\n\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tbackground=\"white\"\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\theight=\"3rem\"\n\t\t\t>\n\t\t\t\t<Row\n\t\t\t\t\theight=\"100%\"\n\t\t\t\t\twidth=\"fill\"\n\t\t\t\t\tpadding={{ all: 'small' }}\n\t\t\t\t\tmainAlignment=\"space-between\"\n\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t>\n\t\t\t\t\t<Row\n\t\t\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\t\t\ttakeAvailableSpace\n\t\t\t\t\t\tpadding={{ all: 'small', right: 'medium' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Typography>Number of Contacts</Typography>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row mainAlignment=\"flex-end\" padding={{ all: 'small', right: 'medium' }}>\n\t\t\t\t\t\t<Text size=\"extrasmall\" data-testid=\"BreadcrumbCount\">\n\t\t\t\t\t\t\t{itemsCount > 100 ? '100+' : itemsCount}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Row>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t</>\n\t);\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useMemo } from 'react';\n\nimport { Container, Drag } from '@zextras/carbonio-design-system';\nimport { replaceHistory, useTags, ZIMBRA_STANDARD_COLORS } from '@zextras/carbonio-shell-ui';\nimport { includes, reduce } from 'lodash';\n\nimport { ItemAvatar } from './item-avatar';\nimport { ItemContent } from './item-content';\nimport ListItemActionWrapper from '../../folder/list-item-action-wrapper';\nimport { Paper } from '@mui/material';\n\nexport default function ContactListItem({\n\titem,\n\tselected,\n\tfolderId,\n\tselecting,\n\tactive,\n\ttoggle,\n\tvisible,\n\tsetDraggedIds,\n\tdraggedIds,\n\tsetIsDragging,\n\tselectedItems,\n\tdragImageRef\n}) {\n\tconst ids = useMemo(() => Object.keys(selectedItems ?? []), [selectedItems]);\n\tconst tagsFromStore = useTags();\n\n\tconst tags = useMemo(\n\t\t() =>\n\t\t\treduce(\n\t\t\t\ttagsFromStore,\n\t\t\t\t(acc, v) => {\n\t\t\t\t\tif (includes(item.tags, v.id))\n\t\t\t\t\t\tacc.push({ ...v, color: ZIMBRA_STANDARD_COLORS[parseInt(v.color ?? '0', 10)].hex });\n\t\t\t\t\treturn acc;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t),\n\t\t[item.tags, tagsFromStore]\n\t);\n\n\tconst _onClick = useCallback(\n\t\t(e) => {\n\t\t\tif (!e.isDefaultPrevented()) {\n\t\t\t\treplaceHistory(`/folder/${folderId}/contacts/${item.id}`);\n\t\t\t}\n\t\t},\n\t\t[folderId, item.id]\n\t);\n\tconst dragCheck = useCallback(\n\t\t(e, id) => {\n\t\t\tsetIsDragging(true);\n\t\t\te.dataTransfer.setDragImage(dragImageRef.current, 0, 0);\n\t\t\tif (selectedItems[id]) {\n\t\t\t\tsetDraggedIds(selectedItems);\n\t\t\t} else {\n\t\t\t\tsetDraggedIds({ [id]: true });\n\t\t\t}\n\t\t},\n\t\t[setIsDragging, dragImageRef, selectedItems, setDraggedIds]\n\t);\n\n\treturn draggedIds?.[item?.id] || visible ? (\n\t\t<Paper variant=\"outlined\" style={{ margin: '8px', backgroundColor: 'white' }}>\n\t\t\t<Drag\n\t\t\t\ttype=\"contact\"\n\t\t\t\tdata={{ ...item, parentFolderId: folderId, selectedIDs: ids }}\n\t\t\t\tstyle={{ display: 'block' }}\n\t\t\t\tonDragStart={(e) => dragCheck(e, item.id)}\n\t\t\t>\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'column' }}>\n\t\t\t\t\t<ListItemActionWrapper contact={item} onClick={_onClick} current={active}>\n\t\t\t\t\t\t<ItemAvatar\n\t\t\t\t\t\t\titem={item}\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tselecting={selecting}\n\t\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ItemContent item={item} tags={tags} />\n\t\t\t\t\t</ListItemActionWrapper>\n\t\t\t\t</div>\n\t\t\t</Drag>\n\t\t</Paper>\n\t) : (\n\t\t<div style={{ height: '4rem' }} />\n\t);\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useMemo, useRef, useState } from 'react';\n\nimport { Container, List, Padding, Text } from '@zextras/carbonio-design-system';\nimport { reduce, find, map } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport ContactListItem from './contact-list-item';\nimport { Grid } from '@mui/material';\n\nconst DragImageContainer = styled.div`\n\tposition: absolute;\n\ttop: -312.5rem;\n\tleft: -312.5rem;\n\ttransform: translate(-100%, -100%);\n\twidth: 35vw;\n`;\n\nconst DragItems = ({ contacts, draggedIds }) => {\n\tconst items = reduce(\n\t\tdraggedIds,\n\t\t(acc, v, k) => {\n\t\t\tconst obj = find(contacts, ['id', k]);\n\t\t\tif (obj) {\n\t\t\t\treturn [...acc, obj];\n\t\t\t}\n\t\t\treturn acc;\n\t\t},\n\t\t[]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{map(items, (item) => (\n\t\t\t\t<ContactListItem item={item} key={item.id} draggedIds={draggedIds} />\n\t\t\t))}\n\t\t</>\n\t);\n};\n\nexport const ContactsList = ({ folderId, selected, contacts, toggle, clicked }) => {\n\tconst [t] = useTranslation();\n\tconst { itemId } = useParams();\n\tconst [isDragging, setIsDragging] = useState(false);\n\tconst [draggedIds, setDraggedIds] = useState();\n\tconst dragImageRef = useRef(null);\n\n\tconst listMessages = useMemo(\n\t\t() => [\n\t\t\t{\n\t\t\t\ttitle: t(`displayer.list_title1`, 'It looks like there are no contacts yet'),\n\t\t\t\tdescription: ''\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: t(`displayer.list_title2`, 'The trash is empty'),\n\t\t\t\tdescription: ''\n\t\t\t}\n\t\t],\n\t\t[t]\n\t);\n\n\tconst displayerMessage = useMemo(() => {\n\t\tif (contacts?.length === 0) {\n\t\t\treturn folderId === '3' ? listMessages[1] : listMessages[0];\n\t\t}\n\t\treturn null;\n\t}, [contacts, folderId, listMessages]);\n\tconst displayerTitle = displayerMessage ? displayerMessage.title : '';\n\treturn (\n\t\t<>\n\t\t\t{contacts?.length === 0 ? (\n\t\t\t\t<Container data-testid=\"ContactsListToScrollContainer\">\n\t\t\t\t\t<Padding top=\"medium\">\n\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\tcolor=\"gray1\"\n\t\t\t\t\t\t\toverflow=\"break-word\"\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\tstyle={{ whiteSpace: 'pre-line', textAlign: 'center', paddingTop: '2rem' }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{displayerTitle}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Padding>\n\t\t\t\t</Container>\n\t\t\t) : (\n\t\t\t\t<List\n\t\t\t\t\tdata-testid=\"ContactsListToScrollContainer\"\n\t\t\t\t\tselected={selected}\n\t\t\t\t\tbackground=\"white\"\n\t\t\t\t\tactive={itemId}\n\t\t\t\t\titems={contacts}\n\t\t\t\t\titemProps={{\n\t\t\t\t\t\tfolderId,\n\t\t\t\t\t\ttoggle,\n\t\t\t\t\t\tsetDraggedIds,\n\t\t\t\t\t\tsetIsDragging,\n\t\t\t\t\t\tdraggedIds,\n\t\t\t\t\t\tselectedItems: selected,\n\t\t\t\t\t\tdragImageRef\n\t\t\t\t\t}}\n\t\t\t\t\tItemComponent={ContactListItem}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<DragImageContainer ref={dragImageRef}>\n\t\t\t\t{isDragging && <DragItems contacts={contacts} draggedIds={draggedIds} />}\n\t\t\t</DragImageContainer>\n\t\t</>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { omit, isEmpty } from 'lodash';\n\nexport const useSelection = (currentFolderId, setCount) => {\n\tconst [selected, setSelected] = useState({});\n\tconst [isSelecting, setIsSelecting] = useState(false);\n\tconst [folderId, setFolderId] = useState(currentFolderId);\n\n\tuseEffect(() => {\n\t\tsetIsSelecting(!isEmpty(selected));\n\t\tif (currentFolderId !== folderId) {\n\t\t\tsetSelected({});\n\t\t\tsetFolderId(currentFolderId);\n\t\t\tsetIsSelecting(false);\n\t\t\tsetCount(0);\n\t\t}\n\t}, [currentFolderId, folderId, selected, setCount]);\n\n\tconst selectItem = useCallback(\n\t\t(id) => {\n\t\t\tif (selected[id]) {\n\t\t\t\tsetSelected((s) => omit(s, [id]));\n\t\t\t\tsetCount((c) => c - 1);\n\t\t\t} else {\n\t\t\t\tsetSelected((s) => ({ ...s, [id]: true }));\n\t\t\t\tsetCount((c) => c + 1);\n\t\t\t}\n\t\t},\n\t\t[selected, setCount]\n\t);\n\n\tconst deselectAll = useCallback(() => {\n\t\tsetSelected({});\n\t\tsetCount(0);\n\t}, [setCount]);\n\n\treturn { selected, isSelecting, toggle: selectItem, deselectAll };\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useMemo, useContext, ReactElement, FC, SyntheticEvent } from 'react';\n\nimport { Dispatch } from '@reduxjs/toolkit';\nimport { Container, Dropdown, IconButton, Padding, Divider } from '@zextras/carbonio-design-system';\nimport { map, noop } from 'lodash';\n\nimport { ActionsContext } from '../../ui-actions/actions-context';\n\ninterface SelectPanelActionsProps {\n\tdispatch?: Dispatch<any>;\n\tdeselectAll?: (e: SyntheticEvent) => void;\n\tfolderId?: string;\n\tselectedIDs?: { [key: string]: boolean };\n}\n\nconst SelectPanelActions: FC<SelectPanelActionsProps> = ({ deselectAll }): ReactElement => {\n\tconst { getPrimaryActions, getSecondaryActions } = useContext(ActionsContext);\n\n\tconst primaryActions = useMemo(() => getPrimaryActions(), [getPrimaryActions]);\n\tconst secondaryActions = useMemo(() => getSecondaryActions(), [getSecondaryActions]);\n\n\treturn (\n\t\t<>\n\t\t\t<Container\n\t\t\t\tbackground=\"gray5\"\n\t\t\t\theight=\"3rem\"\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\tpadding={{ all: 'extrasmall' }}\n\t\t\t>\n\t\t\t\t<Container background=\"gray5\" orientation=\"horizontal\" mainAlignment=\"flex-start\">\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\ticon=\"ArrowBack\"\n\t\t\t\t\t\ticonColor=\"primary\"\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tonClick={deselectAll ?? noop}\n\t\t\t\t\t\tdata-testid=\"action-button-deselect-all\"\n\t\t\t\t\t/>\n\t\t\t\t\t{/* Uncomment this line to show the `Select all` Button */}\n\t\t\t\t\t{/* <Button type='ghost' label='Select all' color='primary' /> */}\n\t\t\t\t</Container>\n\t\t\t\t<Container background=\"gray5\" orientation=\"horizontal\" mainAlignment=\"flex-end\">\n\t\t\t\t\t{map(primaryActions, (action) => (\n\t\t\t\t\t\t<Padding left=\"extralarge\" key={action.label}>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tdata-testid={`primary-action-button-${action.label}`}\n\t\t\t\t\t\t\t\ticon={action.icon}\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tonClick={(ev: React.SyntheticEvent<HTMLElement> | KeyboardEvent): void => {\n\t\t\t\t\t\t\t\t\tif (ev) ev.preventDefault();\n\t\t\t\t\t\t\t\t\taction.onClick(ev);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Padding>\n\t\t\t\t\t))}\n\t\t\t\t</Container>\n\t\t\t\t<Padding left=\"extrasmall\">\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tplacement=\"right-end\"\n\t\t\t\t\t\tdata-testid=\"secondary-actions-dropdown\"\n\t\t\t\t\t\titems={map(secondaryActions, (action) => ({\n\t\t\t\t\t\t\tid: action.label,\n\t\t\t\t\t\t\tkey: action.id,\n\t\t\t\t\t\t\ticon: action.icon,\n\t\t\t\t\t\t\tlabel: action.label,\n\t\t\t\t\t\t\tonClick: (ev: React.SyntheticEvent<HTMLElement> | KeyboardEvent): void => {\n\t\t\t\t\t\t\t\tif (ev) ev.preventDefault();\n\t\t\t\t\t\t\t\taction.onClick(ev);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcustomComponent: action.customComponent,\n\t\t\t\t\t\t\titems: action.items\n\t\t\t\t\t\t}))}\n\t\t\t\t\t>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\t\t\ticonColor=\"primary\"\n\t\t\t\t\t\t\ticon=\"MoreVertical\"\n\t\t\t\t\t\t\tdata-testid=\"secondary-actions-open-button\"\n\t\t\t\t\t\t\tonClick={noop}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Dropdown>\n\t\t\t\t</Padding>\n\t\t\t</Container>\n\t\t\t<Divider />\n\t\t</>\n\t);\n};\n\nexport { SelectPanelActions, SelectPanelActionsProps };\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { ReactElement, useEffect, useMemo } from 'react';\n\nimport { Container } from '@zextras/carbonio-design-system';\nimport { useAppContext } from '@zextras/carbonio-shell-ui';\nimport { filter, orderBy } from 'lodash';\nimport { useParams } from 'react-router-dom';\n\nimport { Breadcrumbs } from './breadcrumbs';\nimport { ContactsList } from './folder-panel/contacts-list';\nimport { useFolder } from '../../../carbonio-ui-commons/store/zustand/folder';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { useSelection } from '../../hooks/useSelection';\nimport { searchContacts } from '../../store/actions/search-contacts';\nimport { selectAllContactsInFolder } from '../../store/selectors/contacts';\nimport { ActionsContextProvider } from '../../ui-actions/actions-context';\nimport { SelectPanelActions } from '../folder/select-panel-actions';\nimport { BACKGROUND_COLOR, FOREGROUND_COLOR } from '../../../sruvi/Colors';\n\ntype RouteParams = {\n\tfolderId: string;\n};\n\ntype UseAppContextType = {\n\tsetCount: (count: number) => void;\n};\n\nexport default function FolderPanel(): ReactElement {\n\tconst { folderId } = useParams<RouteParams>();\n\tconst dispatch = useAppDispatch();\n\tconst folder = useFolder(folderId);\n\tconst { setCount } = useAppContext<UseAppContextType>();\n\tconst { selected, isSelecting, toggle, deselectAll } = useSelection(folderId, setCount);\n\n\tconst contacts = useAppSelector((state) => selectAllContactsInFolder(state, folderId));\n\tconst sortedContacts = useMemo(\n\t\t() =>\n\t\t\torderBy(\n\t\t\t\tcontacts,\n\t\t\t\t[\n\t\t\t\t\t(item): string =>\n\t\t\t\t\t\titem?.firstName?.toLowerCase() ||\n\t\t\t\t\t\titem?.lastName?.toLowerCase() ||\n\t\t\t\t\t\titem?.middleName?.toLowerCase()\n\t\t\t\t],\n\t\t\t\t'asc'\n\t\t\t),\n\t\t[contacts]\n\t);\n\tconst ids = useMemo(() => Object.keys(selected ?? []), [selected]);\n\tconst selectedContacts = filter(contacts, (contact) => ids.indexOf(contact.id) !== -1);\n\n\tuseEffect(() => {\n\t\tdispatch(searchContacts(folderId));\n\t}, [dispatch, folderId]);\n\n\treturn (\n\t\t<ActionsContextProvider\n\t\t\tfolderId={folderId}\n\t\t\tdeselectAll={deselectAll}\n\t\t\tselectedContacts={selectedContacts}\n\t\t\tselectedIds={selected}\n\t\t>\n\t\t\t<Container\n\t\t\t\torientation=\"row\"\n\t\t\t\tcrossAlignment=\"flex-start\"\n\t\t\t\tmainAlignment=\"flex-start\"\n\t\t\t\twidth=\"fill\"\n\t\t\t\theight=\"fill\"\n\t\t\t\tbackground={BACKGROUND_COLOR}\n\t\t\t\tborderRadius=\"none\"\n\t\t\t\tdata-testid=\"ContactsListContainer\"\n\t\t\t\tstyle={{\n\t\t\t\t\tmaxHeight: '100%'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Container mainAlignment=\"flex-start\" borderRadius=\"none\" height=\"calc(100% - 4rem)\">\n\t\t\t\t\t{isSelecting ? (\n\t\t\t\t\t\t<SelectPanelActions\n\t\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\t\t\tdeselectAll={deselectAll}\n\t\t\t\t\t\t\tselectedIDs={selected}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Breadcrumbs folderPath={folder?.absFolderPath} itemsCount={folder?.n} />\n\t\t\t\t\t)}\n\t\t\t\t\t<ContactsList\n\t\t\t\t\t\tfolderId={folderId}\n\t\t\t\t\t\tcontacts={sortedContacts}\n\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\tsetCount={setCount}\n\t\t\t\t\t\ttoggle={toggle}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t</ActionsContextProvider>\n\t);\n}\n","export const BACKGROUND_COLOR = '#FFFFFF';\nexport const BACKGROUND_HEADER_COLOR = '#ffffff';\nexport const PRIMARY_COLOR = '#ff6600';\nexport const SECONDARY_COLOR = '#0a1153';\nexport const FOREGROUND_COLOR = '#c2e7ff';\nexport const PRIMARY_ICON_COLOR_ACTIVE = '#0a1153';\n\nexport const BUTTONCOLOR = '#0a1153';\n"],"names":["getDisplayName","contact","firstName","middleName","lastName","displayName","trim","nameSuffix","emailsTypes","Object","keys","email","length","t","mail","useDisplayName","useTranslation","useMemo","selectAllContactsInFolder","contacts","id","selectContact","folderId","find","selectFolderStatus","status","Breadcrumbs","folderPath","itemsCount","React","Container","background","mainAlignment","crossAlignment","height","Row","width","padding","all","takeAvailableSpace","right","Typography","Text","size","Divider","ContactListItem","item","selected","selecting","active","toggle","visible","setDraggedIds","draggedIds","setIsDragging","selectedItems","dragImageRef","ids","tagsFromStore","useTags","tags","reduce","acc","v","includes","push","color","ZIMBRA_STANDARD_COLORS","parseInt","hex","_onClick","useCallback","e","isDefaultPrevented","replaceHistory","dragCheck","dataTransfer","setDragImage","current","Paper","variant","style","margin","backgroundColor","Drag","type","data","parentFolderId","selectedIDs","display","onDragStart","flexDirection","ListItemActionWrapper","onClick","ItemAvatar","ItemContent","DragImageContainer","styled","withConfig","componentId","DragItems","items","k","obj","map","key","ContactsList","clicked","itemId","useParams","isDragging","useState","useRef","listMessages","title","description","displayerMessage","displayerTitle","Padding","top","overflow","whiteSpace","textAlign","paddingTop","List","itemProps","ItemComponent","ref","useSelection","currentFolderId","setCount","setSelected","isSelecting","setIsSelecting","setFolderId","useEffect","isEmpty","selectItem","s","omit","c","deselectAll","SelectPanelActions","getPrimaryActions","getSecondaryActions","useContext","ActionsContext","primaryActions","secondaryActions","orientation","IconButton","icon","iconColor","noop","action","left","label","ev","preventDefault","Dropdown","placement","customComponent","FolderPanel","dispatch","useAppDispatch","folder","useFolder","useAppContext","useAppSelector","state","sortedContacts","orderBy","toLowerCase","selectedContacts","filter","indexOf","searchContacts","ActionsContextProvider","selectedIds","BACKGROUND_COLOR","borderRadius","maxHeight","absFolderPath","n","FOREGROUND_COLOR"],"sourceRoot":""}