{"version":3,"file":"editContactGroupView.e34ba467.chunk.js","mappings":"uLAeO,MAAMA,EAA4DA,EAAGC,QAAOC,eAClF,MAAOC,IAAKC,EAAAA,EAAAA,kBACNC,GAAgBC,EAAAA,EAAAA,cAAY,IAAMJ,KAAY,CAACA,IACrD,OACCK,IAAAA,cAACC,EAAAA,IAAG,CACHC,MAAO,OACPC,cAAe,gBACfC,QAAS,QACTC,IAAK,SACL,cAAa,mBACbC,KAAM,UAENN,IAAAA,cAACC,EAAAA,IAAG,CAACK,KAAM,SAAUD,IAAK,SAAUE,WAAY,EAAGC,SAAU,QAC5DR,IAAAA,cAACS,EAAAA,OAAM,CAACC,KAAM,SAAUC,MAAOjB,IAC/BM,IAAAA,cAACC,EAAAA,IAAG,CAACM,WAAY,EAAGC,SAAU,QAC7BR,IAAAA,cAACY,EAAAA,gBAAe,CAACF,KAAM,SAAUhB,KAGnCM,IAAAA,cAACa,EAAAA,OAAM,CACNC,KAAM,WACNJ,KAAM,SACNC,MAAOf,EAAE,4CAA6C,UACtDmB,KAAM,gBACNC,MAAO,QACPC,QAASnB,EACTU,SAAU,gBAEN,C,mEC/BD,SAASU,EAAwBC,EAAeC,GACtD,MAAMC,EAAWF,EAAMG,cACjBC,EAAWH,EAAME,cACvB,OAAID,EAAWE,EACP,EAEJA,EAAWF,GACN,EAEF,CACR,CAiBO,MAAMG,EAAsB,CAClCC,qBAAsB,GACtBC,uBAAwB,GACxBC,OAAQ,GAOT,SAASC,EACRC,EACAC,EACAC,GAEA,MAAMC,GAAWC,EAAAA,EAAAA,WAChBJ,GACCK,GAAShB,EAAwBa,EAAQI,MAAOD,EAAKC,OAAS,IAEhE,GAAIH,EAAWH,EAAQO,QAAUJ,GAAY,EAC5CH,EAAQQ,OAAOL,EAAU,EAAGD,QACtB,GAAyB,IAArBD,EAAUM,OACpBN,EAAUQ,KAAKP,OACT,CACN,MAAMQ,GAAoBN,EAAAA,EAAAA,WACzBH,GACCI,GAAShB,EAAwBa,EAAQI,MAAOD,EAAKC,OAAS,IAEhEL,EAAUO,OAAOE,EAAmB,EAAGR,EACxC,CACD,CAGO,MAAMS,GAAuBC,EAAAA,EAAAA,KAAAA,EAA2C,CAACC,EAAKC,KAAQ,IACzFnB,EACHoB,MAAOA,KACNF,EAAIlB,EAAa,EAElBqB,mBAAqBC,IACpB,MAAM,qBAAErB,EAAoB,uBAAEC,EAAsB,OAAEC,GAAWgB,IAC3DI,EAActB,EAAqBQ,WAAWC,GAASA,EAAKc,KAAOF,EAAaE,KAEhFC,EAA0B,IAAIxB,GAC9ByB,EAA4B,IAAIxB,GACtC,GAAIqB,GAAe,EAClBE,EAAwBZ,OAAOU,EAAa,GAC5CnB,EAAgBqB,EAAyBC,EAA2BJ,GACpEJ,GAAI,KAAM,CACTjB,qBAAsBwB,EACtBvB,uBAAwBwB,EACxBvB,OACCsB,EAAwBb,SAAWX,EAAqBW,SAAsB,IAAZT,EAC/DA,EACAA,EAASsB,EAAwBb,OAASX,EAAqBW,eAE9D,CACN,MAAMe,EAAezB,EAAuBO,WAAWC,GAASA,EAAKc,KAAOF,EAAaE,KACzF,KAAIG,GAAgB,GAYnB,MAAM,IAAIC,MAAM,2BAXhBF,EAA0Bb,OAAOc,EAAc,GAC/CvB,EAAgBqB,EAAyBC,EAA2BJ,GACpEJ,GAAI,KAAM,CACTjB,qBAAsBwB,EACtBvB,uBAAwBwB,EACxBvB,OACCsB,EAAwBb,SAAWX,EAAqBW,SAAsB,IAAZT,EAC/DA,EACAA,EAASsB,EAAwBb,OAASX,EAAqBW,UAKtE,GAEDiB,UAAY1B,GAAiBe,GAAI,KAAM,CAAGf,aAC1C2B,iBAAmBC,IAClB,MAAM,qBAAE9B,EAAoB,uBAAEC,GAA2BiB,IAEzD,GAAIjB,EAAuBU,OAAS,EAAG,CACtC,MAAMoB,GAAkBC,EAAAA,EAAAA,cAAa/B,EAAwB6B,GAAgBG,GAAOA,EAAGV,KACvFN,GAAI,KAAM,CACTjB,qBAAsB,IAAKA,GAAwB,MAAQ8B,GAC3D7B,uBAAwB8B,KAE1B,MACCd,GAAI,KAAM,CACTjB,qBAAsB,IAAKA,GAAwB,MAAQ8B,MAE7D,EAEDI,mBAAqBC,IACpB,MAAM,qBAAEnC,EAAoB,uBAAEC,EAAsB,OAAEC,GAAWgB,IAIjE,GAHYlB,EAAqBQ,WAC/Ba,GAAiBA,EAAaE,KAAOY,KAE5B,EACVlB,GAAI,KAAM,CAETjB,qBAAsBA,EAAqBoC,QACzCf,GAAiBA,EAAaE,KAAOY,IAEvCjC,OAAQA,EAAS,UAEZ,CAIN,KAHaD,EAAuBO,WAClCa,GAAiBA,EAAaE,KAAOY,KAE3B,GAQX,MAAM,IAAIR,MAAM,2BAPhBV,GAAI,KAAM,CAEThB,uBAAwBA,EAAuBmC,QAC7Cf,GAAiBA,EAAaE,KAAOY,OAM1C,GAEDE,gCAAkCC,IACjC,MAAM,qBAAEtC,EAAoB,uBAAEC,EAAsB,OAAEC,GAAWgB,IAC3DM,EAA0B,IAAIxB,GAC9ByB,EAA4B,IAAIxB,GACtCE,EAAgBqB,EAAyBC,EAA2Ba,GACpErB,GAAI,KAAM,CACTjB,qBAAsBwB,EACtBvB,uBAAwBwB,EACxBvB,OACCsB,EAAwBb,SAAWX,EAAqBW,SAAsB,IAAZT,EAC/DA,EACAA,EAASsB,EAAwBb,OAASX,EAAqBW,UACjE,K,4KC3IE,SAAS4B,EAA0BC,GACzC,OAAmC,IAA5BA,EAAUC,OAAO9B,QAAgB6B,EAAU7B,OAAS+B,EAAAA,CAC5D,CAEA,MAAMC,EAAOC,IAAOC,EAAAA,QAAOC,WAAA,CAAAC,YAAA,mCAAAC,YAAA,gBAAdJ,CAAc,mBAiS3B,EA9QgCK,EAC/BC,SACAV,YACAW,mBACAC,mBACAC,sBACAC,mBACAC,0BACAC,mBAEA,MAAOrF,IAAKC,EAAAA,EAAAA,mBAEN,YAAEqF,IAAgBC,EAAAA,EAAAA,iBAElBC,GAAerF,EAAAA,EAAAA,cACnBsF,IACAJ,EAAaI,EAAGC,OAAOC,OACvBL,EAAY,CAAE/C,MAAOkD,EAAGC,OAAOC,OAAQ,GAExC,CAACN,EAAcC,IAGVM,GAAkBC,EAAAA,EAAAA,UAAQ,IACC,IAA5BxB,EAAUC,OAAO9B,OACbxC,EACN,wDACA,mDAGEqE,EAAU7B,OAAS+B,EAAAA,EACfvE,EACN,0DACA,iDAHF,GAOE,CAACA,EAAGqE,KAEAyB,EAAmBC,IAAwBC,EAAAA,EAAAA,UAAkC,IAE9EC,GAAiB9F,EAAAA,EAAAA,cAAY,KAClCkF,EAAaF,GACbD,EAAoBE,GACpBE,EAAY,CAAE/C,MAAO4C,IACrBY,EAAqB,GAAG,GACtB,CAACX,EAAyBD,EAAkBD,EAAqBG,EAAcC,IAwC5EY,GAAyB/F,EAAAA,EAAAA,cAAY,KAC1C,MAAMgG,EAAkB,GAClBC,EAAoC,GAE1CN,EAAkBO,SAASV,IACtBA,EAAMW,OAASX,EAAMY,iBAA8BC,IAAhBb,EAAM7F,MAC5CsG,EAAQ1D,KAAKiD,GAEbQ,EAAMzD,KAAKiD,EAAM7F,MAClB,IAGDiG,EAAqBK,GACrBlB,GAAqBuB,GAAc,IAAIA,KAAcN,IAAO,GAC1D,CAACL,EAAmBZ,IAEjBwB,GAAavG,EAAAA,EAAAA,cACjBL,IACA,MAAM6G,EAAsB3B,EAAiBf,QAAQ0B,GAAUA,IAAU7F,IACzEoF,EAAoByB,GACpBZ,GAAsBU,GACrBA,EAAUG,KAAKjB,IACd,MAAMY,OAA6BC,IAAhBb,EAAM7F,OAAuB6G,EAAoBE,SAASlB,EAAM7F,OAE7EgH,EAAU,IAAKnB,EAAMmB,SAAW,IAKtC,OAJKP,GAAcZ,EAAMY,aACxBQ,EAAAA,EAAAA,QAAOD,GAAUE,GAAyB,eAAdA,EAAO5D,KAG7B,IACHuC,EACHY,aACAO,UACA,KAEF,GAEF,CAAC9B,EAAkBE,IAGd+B,GAA0BpB,EAAAA,EAAAA,UAAQ,KACvC,IAAIM,EAAQ,EACRI,EAAa,EACbH,EAAU,EAWd,GATAN,EAAkBO,SAASV,IACtBA,EAAMY,WACTA,GAAc,EACJZ,EAAMW,MAChBF,GAAW,EAEXD,GAAS,CACV,MAEGA,EAAQ,GAGZ,OAAIC,EAAU,GAAKG,EAAa,EACxBvG,EACN,oFACA,yCAGEoG,EAAU,GAAoB,IAAfG,EACXvG,EAAE,kEAAmE,CAC3EkH,MAAOd,EACPe,iBAAkB,kBAClBC,mBAAoB,sBAGlBb,EAAa,GAAiB,IAAZH,EACdpG,EAAE,0EAA2E,CACnFkH,MAAOX,EACPY,iBAAkB,0BAClBC,mBAAoB,mCAJtB,CAOgB,GACd,CAACtB,EAAmB9F,IAEjBqH,GAAcxB,EAAAA,EAAAA,UACnB,MAAOyB,EAAAA,EAAAA,MAAKxB,GAAoByB,IAAUA,EAAKjB,QAAUiB,EAAKhB,cAC9D,CAACT,IAGI0B,GAAY3B,EAAAA,EAAAA,UACjB,IACCb,EAAiB4B,KAAKtE,GACrBlC,IAAAA,cAACP,EAAAA,EAAuB,CAAC4H,IAAKnF,EAAMxC,MAAOwC,EAAMvC,SAAUA,IAAY2G,EAAWpE,QAEpF,CAAC0C,EAAkB0B,IAGpB,OACCtG,IAAAA,cAACsH,EAAAA,UAAS,CACTC,eAAgB,WAChBC,WAAY,QACZpH,QAAS,CAAEqH,WAAY,QAASC,OAAQ,YACxCC,OAAQ,OACRC,UAAW,SAEX5H,IAAAA,cAACsH,EAAAA,UAAS,CACTjH,IAAK,SACLwH,YAAa,aACb1H,cAAe,WACfwH,OAAQ,MACRvH,QAAS,CAAE0H,SAAU,WAErB9H,IAAAA,cAACa,EAAAA,OAAM,CACNkH,UAAU,EACVrH,KAAM,SACNC,MAAOf,EAAE,gBAAiB,WAC1BqB,QAAS4E,EACT/E,KAAK,aAENd,IAAAA,cAACa,EAAAA,OAAM,CACNkH,SAAUlD,EACVnE,KAAM,SACNC,MAAOf,EAAE,aAAc,QACvBmB,KAAM,cACNE,QAAS0D,KAGX3E,IAAAA,cAACsH,EAAAA,UAAS,CACTK,OAAQ,MACRE,YAAa,aACb1H,cAAe,aACfE,IAAK,OACLD,QAAS,UAETJ,IAAAA,cAACS,EAAAA,OAAM,CAACC,KAAK,QAAQC,MAAOsD,EAAWlD,KAAK,kBAC5Cf,IAAAA,cAACsH,EAAAA,UAAS,CAACK,OAAQ,MAAOJ,eAAgB,aAAc/G,SAAU,GACjER,IAAAA,cAACgI,EAAAA,KAAI,CAACC,OAAQ,QAAShE,GACvBjE,IAAAA,cAACgI,EAAAA,KAAI,CAAChH,MAAO,SACXpB,EAAE,wCAAyC,aAAa,KAAGgF,EAAiBxC,UAIhFpC,IAAAA,cAACsH,EAAAA,UAAS,CACTE,WAAY,QACZrH,cAAe,aACfoH,eAAgB,aAChBnH,QAAS,CAAEqH,WAAY,QAASS,IAAK,SACrC7H,IAAK,SACLsH,OAAQ,qBAER3H,IAAAA,cAACmI,EAAAA,MAAK,CACLxH,MAAOf,EAAE,oDAAqD,eAC9DwI,gBAAiB,QACjBC,YAAa,QACb9C,MAAOtB,EACPqE,SAAUlD,EACVmD,YAAa/C,EACbgD,SAC6B,IAA5BvE,EAAUC,OAAO9B,QAAgB6B,EAAU7B,OAAS+B,EAAAA,IAGtDnE,IAAAA,cAACC,EAAAA,IAAG,CAACG,QAAS,CAAE8H,IAAK,WACpBlI,IAAAA,cAACgI,EAAAA,KAAI,CAAChH,MAAO,aACXpB,EAAE,kDAAmD,oBAGxDI,IAAAA,cAACsH,EAAAA,UAAS,CAACO,YAAa,aAAcF,OAAQ,MAAOJ,eAAgB,cACpEvH,IAAAA,cAACyI,EAAAA,EAAY,CACZ,cAAa,8BACbC,aAAchD,EACd4C,SA3MJK,IAMA,MAEMC,GAF2BC,EAAAA,EAAAA,QAAOF,GAAuBpD,GAAUA,EAAM7F,QAEV8G,KAAKjB,IACzE,MAAMY,OAA6BC,IAAhBb,EAAM7F,OAAuBkF,EAAiB6B,SAASlB,EAAM7F,OAS1EoJ,GAAkCvD,EAAMmB,SAASqC,MACrDnC,GAAyB,eAAdA,EAAO5D,KAGd0D,EAAU,IACXnB,EAAMmB,SAAW,MACjBP,GAAc2C,EAAiC,CAbX,CACxC9F,GAAI,aACJhC,MAAO,QACPF,KAAM,OACNC,KAAM,gBASsE,IAG7E,MAAO,IACHwE,EACHY,aACAO,UACA,IAGFf,EAAqBiD,EAAoC,EA0KrDI,YAAapJ,EACZ,wDACA,kDAEDmB,KAAM,OACNkI,WAAYnD,EACZoD,aAAcjC,EACdsB,YAAa1B,EACb2B,SAAU9C,EAAkBtD,OAAS,GAAK6E,EAC1CkC,gBAAiBC,EAAAA,EAAyB1J,SAG5CM,IAAAA,cAACoE,EAAI,CAAC,cAAa,gBAAiBgD,IAE1B,C,4IC7Sd,MAAMiC,EAA6BA,EAClCvG,mBAIA,MAAOlD,IAAKC,EAAAA,EAAAA,kBAENyJ,GAAiBC,EAAAA,EAAAA,gBAChBtF,EAAWgB,IAAgBW,EAAAA,EAAAA,UAAS9C,EAAaX,QAEjDyC,EAAkBE,IAAuBc,EAAAA,EAAAA,UAAmB9C,EAAa0G,SAE1E7E,GAAS5E,EAAAA,EAAAA,cAAY,KAC1B,MAAM0J,GAAeC,EAAAA,EAAAA,YAAW9E,EAAkB9B,EAAa0G,SACzDG,GAAiBD,EAAAA,EAAAA,YAAW5G,EAAa0G,QAAS5E,GAExDgF,EAAAA,EACEC,mBAAmB,CACnB7G,GAAIF,EAAaE,GACjByG,aAAcA,EAAarH,OAAS,EAAIqH,OAAerD,EACvDuD,eAAgBA,EAAevH,OAAS,EAAIuH,OAAiBvD,EAC7D0D,KAAMhH,EAAaX,QAAU8B,EAAYA,OAAYmC,IAErD2D,MAAMjH,IACNN,EAAAA,GAAqBwH,WAAWnH,mBAAmBC,GACnDwG,EAAe,CACdjC,KAAK,IAAI4C,MAAOC,iBAChBpJ,KAAM,UACNH,MAAOf,EACN,uDACA,+BAEA,IAEFuK,OAAM,KACNb,EAAe,CACdjC,KAAK,IAAI4C,MAAOC,iBAChBpJ,KAAM,QACNH,MAAOf,EACN,wCACA,qDAEA,GACD,GACD,CACFkD,EAAaE,GACbF,EAAa0G,QACb1G,EAAaX,MACbmH,EACA1E,EACAX,EACArE,IAGKiF,GAAmBY,EAAAA,EAAAA,UACxB,KACCzB,EAAAA,EAAAA,GAA0BC,IAC8B,KAAvDmG,EAAAA,EAAAA,KAAIxF,EAAkB9B,EAAa0G,SAASpH,QAC5CU,EAAaX,QAAU8B,GACzB,CAACnB,EAAa0G,QAAS1G,EAAaX,MAAOyC,EAAkBX,IAG9D,OACCjE,IAAAA,cAAC0E,EAAAA,EAAuB,CACvBC,OAAQA,EACRV,UAAWA,EACXW,iBAAkBA,EAClBC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,iBAAkBjC,EAAaX,MAC/B6C,wBAAyBlC,EAAa0G,QACtCvE,aAAcA,GACb,EASJ,EAL8BoF,KAC7B,MAAMvH,ECnF2BwH,MACjC,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,YAKpB,MAAO,KAHehI,EAAAA,EAAAA,KAAsBiI,GAAUA,EAAMhJ,2BAC7Be,EAAAA,EAAAA,KAAsBiI,GAAUA,EAAM/I,0BAEhBqH,MACnD2B,GAAwBA,EAAoB1H,KAAOuH,GAAS3G,gBAC7D,ED2EoB0G,GACrB,OAAOxH,EAAe9C,IAAAA,cAACqJ,EAA0B,CAACvG,aAAcA,IAAmB,IAAI,C","sources":["webpack://carbonio-contacts-ui/./src/components/member-list-item.tsx","webpack://carbonio-contacts-ui/./src/store/contact-groups.ts","webpack://carbonio-contacts-ui/./src/views/board/common-contact-group-board.tsx","webpack://carbonio-contacts-ui/./src/views/board/edit-contact-group-board.tsx","webpack://carbonio-contacts-ui/./src/hooks/use-get-contact-group.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC, useCallback } from 'react';\n\nimport { Avatar, Button, Row, TextWithTooltip } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nexport type MemberListItemComponentProps = {\n\temail: string;\n\tonRemove: () => void;\n};\n\nexport const MemberListItemComponent: FC<MemberListItemComponentProps> = ({ email, onRemove }) => {\n\tconst [t] = useTranslation();\n\tconst onRemoveClick = useCallback(() => onRemove(), [onRemove]);\n\treturn (\n\t\t<Row\n\t\t\twidth={'fill'}\n\t\t\tmainAlignment={'space-between'}\n\t\t\tpadding={'small'}\n\t\t\tgap={'0.5rem'}\n\t\t\tdata-testid={'member-list-item'}\n\t\t\twrap={'nowrap'}\n\t\t>\n\t\t\t<Row wrap={'nowrap'} gap={'0.5rem'} flexShrink={1} minWidth={'1rem'}>\n\t\t\t\t<Avatar size={'medium'} label={email} />\n\t\t\t\t<Row flexShrink={1} minWidth={'1rem'}>\n\t\t\t\t\t<TextWithTooltip size={'small'}>{email}</TextWithTooltip>\n\t\t\t\t</Row>\n\t\t\t</Row>\n\t\t\t<Button\n\t\t\t\ttype={'outlined'}\n\t\t\t\tsize={'medium'}\n\t\t\t\tlabel={t('members_list_item_component.button.remove', 'remove')}\n\t\t\t\ticon={'Trash2Outline'}\n\t\t\t\tcolor={'error'}\n\t\t\t\tonClick={onRemoveClick}\n\t\t\t\tminWidth={'fit-content'}\n\t\t\t/>\n\t\t</Row>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { differenceBy, findIndex } from 'lodash';\nimport { create } from 'zustand';\n\nimport { ContactGroup } from '../model/contact-group';\n\nexport function compareContactGroupName(nameA: string, nameB: string): number {\n\tconst nameALow = nameA.toLowerCase();\n\tconst nameBLow = nameB.toLowerCase();\n\tif (nameALow > nameBLow) {\n\t\treturn 1;\n\t}\n\tif (nameBLow > nameALow) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\ntype State = {\n\torderedContactGroups: Array<ContactGroup>;\n\tunorderedContactGroups: Array<ContactGroup>;\n\toffset: number;\n};\n\nexport type ContactGroupStoreActions = {\n\taddContactGroups: (newContactGroups: Array<ContactGroup>) => void;\n\taddContactGroupInSortedPosition: (newContactGroup: ContactGroup) => void;\n\tupdateContactGroup: (contactGroup: ContactGroup) => void;\n\tsetOffset: (offset: number) => void;\n\tremoveContactGroup: (contactGroupId: string) => void;\n\treset: () => void;\n};\n\nexport const initialState: State = {\n\torderedContactGroups: [],\n\tunorderedContactGroups: [],\n\toffset: 0\n};\n\n/**\n * Note: this function will modify the contact Group arrays intentionally\n * */\n// TODO refactor as pure function when Array toSpliced will be available\nfunction addToProperList(\n\tordered: Array<ContactGroup>,\n\tunOrdered: Array<ContactGroup>,\n\tcgToAdd: ContactGroup\n): void {\n\tconst idxToAdd = findIndex(\n\t\tordered,\n\t\t(item) => compareContactGroupName(cgToAdd.title, item.title) < 0\n\t);\n\tif (idxToAdd < ordered.length && idxToAdd >= 0) {\n\t\tordered.splice(idxToAdd, 0, cgToAdd);\n\t} else if (unOrdered.length === 0) {\n\t\tunOrdered.push(cgToAdd);\n\t} else {\n\t\tconst unorderedIdxToAdd = findIndex(\n\t\t\tunOrdered,\n\t\t\t(item) => compareContactGroupName(cgToAdd.title, item.title) < 0\n\t\t);\n\t\tunOrdered.splice(unorderedIdxToAdd, 0, cgToAdd);\n\t}\n}\n\n// extra currying as suggested in https://github.com/pmndrs/zustand/blob/main/docs/guides/typescript.md#basic-usage\nexport const useContactGroupStore = create<State & ContactGroupStoreActions>()((set, get) => ({\n\t...initialState,\n\treset: (): void => {\n\t\tset(initialState);\n\t},\n\tupdateContactGroup: (contactGroup): void => {\n\t\tconst { orderedContactGroups, unorderedContactGroups, offset } = get();\n\t\tconst idxToRemove = orderedContactGroups.findIndex((item) => item.id === contactGroup.id);\n\n\t\tconst newOrderedContactGroups = [...orderedContactGroups];\n\t\tconst newUnorderedContactGroups = [...unorderedContactGroups];\n\t\tif (idxToRemove >= 0) {\n\t\t\tnewOrderedContactGroups.splice(idxToRemove, 1);\n\t\t\taddToProperList(newOrderedContactGroups, newUnorderedContactGroups, contactGroup);\n\t\t\tset(() => ({\n\t\t\t\torderedContactGroups: newOrderedContactGroups,\n\t\t\t\tunorderedContactGroups: newUnorderedContactGroups,\n\t\t\t\toffset:\n\t\t\t\t\tnewOrderedContactGroups.length === orderedContactGroups.length || offset === -1\n\t\t\t\t\t\t? offset\n\t\t\t\t\t\t: offset + newOrderedContactGroups.length - orderedContactGroups.length\n\t\t\t}));\n\t\t} else {\n\t\t\tconst uIdxToRemove = unorderedContactGroups.findIndex((item) => item.id === contactGroup.id);\n\t\t\tif (uIdxToRemove >= 0) {\n\t\t\t\tnewUnorderedContactGroups.splice(uIdxToRemove, 1);\n\t\t\t\taddToProperList(newOrderedContactGroups, newUnorderedContactGroups, contactGroup);\n\t\t\t\tset(() => ({\n\t\t\t\t\torderedContactGroups: newOrderedContactGroups,\n\t\t\t\t\tunorderedContactGroups: newUnorderedContactGroups,\n\t\t\t\t\toffset:\n\t\t\t\t\t\tnewOrderedContactGroups.length === orderedContactGroups.length || offset === -1\n\t\t\t\t\t\t\t? offset\n\t\t\t\t\t\t\t: offset + newOrderedContactGroups.length - orderedContactGroups.length\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tthrow new Error('Contact group not found');\n\t\t\t}\n\t\t}\n\t},\n\tsetOffset: (offset): void => set(() => ({ offset })),\n\taddContactGroups: (contactGroups): void => {\n\t\tconst { orderedContactGroups, unorderedContactGroups } = get();\n\n\t\tif (unorderedContactGroups.length > 0) {\n\t\t\tconst unorderedResult = differenceBy(unorderedContactGroups, contactGroups, (cg) => cg.id);\n\t\t\tset(() => ({\n\t\t\t\torderedContactGroups: [...(orderedContactGroups ?? []), ...contactGroups],\n\t\t\t\tunorderedContactGroups: unorderedResult\n\t\t\t}));\n\t\t} else {\n\t\t\tset(() => ({\n\t\t\t\torderedContactGroups: [...(orderedContactGroups ?? []), ...contactGroups]\n\t\t\t}));\n\t\t}\n\t},\n\tremoveContactGroup: (contactGroupId: string): void => {\n\t\tconst { orderedContactGroups, unorderedContactGroups, offset } = get();\n\t\tconst idx = orderedContactGroups.findIndex(\n\t\t\t(contactGroup) => contactGroup.id === contactGroupId\n\t\t);\n\t\tif (idx >= 0) {\n\t\t\tset(() => ({\n\t\t\t\t// TODO replace with Array toSpliced when will be available\n\t\t\t\torderedContactGroups: orderedContactGroups.filter(\n\t\t\t\t\t(contactGroup) => contactGroup.id !== contactGroupId\n\t\t\t\t),\n\t\t\t\toffset: offset - 1\n\t\t\t}));\n\t\t} else {\n\t\t\tconst uIdx = unorderedContactGroups.findIndex(\n\t\t\t\t(contactGroup) => contactGroup.id === contactGroupId\n\t\t\t);\n\t\t\tif (uIdx >= 0) {\n\t\t\t\tset(() => ({\n\t\t\t\t\t// TODO replace with Array toSpliced when will be available\n\t\t\t\t\tunorderedContactGroups: unorderedContactGroups.filter(\n\t\t\t\t\t\t(contactGroup) => contactGroup.id !== contactGroupId\n\t\t\t\t\t)\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tthrow new Error('Contact group not found');\n\t\t\t}\n\t\t}\n\t},\n\taddContactGroupInSortedPosition: (newContactGroup: ContactGroup): void => {\n\t\tconst { orderedContactGroups, unorderedContactGroups, offset } = get();\n\t\tconst newOrderedContactGroups = [...orderedContactGroups];\n\t\tconst newUnorderedContactGroups = [...unorderedContactGroups];\n\t\taddToProperList(newOrderedContactGroups, newUnorderedContactGroups, newContactGroup);\n\t\tset(() => ({\n\t\t\torderedContactGroups: newOrderedContactGroups,\n\t\t\tunorderedContactGroups: newUnorderedContactGroups,\n\t\t\toffset:\n\t\t\t\tnewOrderedContactGroups.length === orderedContactGroups.length || offset === -1\n\t\t\t\t\t? offset\n\t\t\t\t\t: offset + newOrderedContactGroups.length - orderedContactGroups.length\n\t\t}));\n\t}\n}));\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport {\n\tContainer,\n\tButton,\n\tText,\n\tInput,\n\tInputProps,\n\tAvatar,\n\tListV2,\n\tRow,\n\tChipAction\n} from '@zextras/carbonio-design-system';\nimport { useBoardHooks } from '@zextras/carbonio-shell-ui';\nimport { remove, some, uniqBy } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { MemberListItemComponent } from '../../components/member-list-item';\nimport { CONTACT_GROUP_NAME_MAX_LENGTH } from '../../constants';\nimport { CHIP_DISPLAY_NAME_VALUES } from '../../constants/contact-input';\nimport { ContactInput } from '../../legacy/integrations/contact-input';\nimport { ContactInputItem } from '../../legacy/types/integrations';\n\nexport function isContactGroupNameInvalid(nameValue: string): boolean {\n\treturn nameValue.trim().length === 0 || nameValue.length > CONTACT_GROUP_NAME_MAX_LENGTH;\n}\n\nconst List = styled(ListV2)`\n\tmin-height: 0;\n`;\n\nexport type EnhancedChipItem = ContactInputItem & {\n\tduplicated: boolean;\n};\n\nexport interface CommonContactGroupBoardProps {\n\tonSave: () => void;\n\tnameValue: string;\n\tmemberListEmails: string[];\n\tisOnSaveDisabled: boolean;\n\tsetMemberListEmails: React.Dispatch<React.SetStateAction<string[]>>;\n\tinitialNameValue: string;\n\tinitialMemberListEmails: string[];\n\tsetNameValue: React.Dispatch<React.SetStateAction<string>>;\n}\n\nconst CommonContactGroupBoard = ({\n\tonSave,\n\tnameValue,\n\tmemberListEmails,\n\tisOnSaveDisabled,\n\tsetMemberListEmails,\n\tinitialNameValue,\n\tinitialMemberListEmails,\n\tsetNameValue\n}: CommonContactGroupBoardProps): React.JSX.Element => {\n\tconst [t] = useTranslation();\n\n\tconst { updateBoard } = useBoardHooks();\n\n\tconst onNameChange = useCallback<NonNullable<InputProps['onChange']>>(\n\t\t(ev) => {\n\t\t\tsetNameValue(ev.target.value);\n\t\t\tupdateBoard({ title: ev.target.value });\n\t\t},\n\t\t[setNameValue, updateBoard]\n\t);\n\n\tconst nameDescription = useMemo(() => {\n\t\tif (nameValue.trim().length === 0) {\n\t\t\treturn t(\n\t\t\t\t'board.newContactGroup.input.name_input.error.required',\n\t\t\t\t'Group name is required, enter a name to proceed'\n\t\t\t);\n\t\t}\n\t\tif (nameValue.length > CONTACT_GROUP_NAME_MAX_LENGTH) {\n\t\t\treturn t(\n\t\t\t\t'board.newContactGroup.input.name_input.error.max_length',\n\t\t\t\t'Maximum length allowed is 256 characters'\n\t\t\t);\n\t\t}\n\t\treturn undefined;\n\t}, [t, nameValue]);\n\n\tconst [contactInputValue, setContactInputValue] = useState<Array<EnhancedChipItem>>([]);\n\n\tconst discardChanges = useCallback(() => {\n\t\tsetNameValue(initialNameValue);\n\t\tsetMemberListEmails(initialMemberListEmails);\n\t\tupdateBoard({ title: initialNameValue });\n\t\tsetContactInputValue([]);\n\t}, [initialMemberListEmails, initialNameValue, setMemberListEmails, setNameValue, updateBoard]);\n\n\tconst contactInputOnChange = (\n\t\tnewContactInputValue: Array<\n\t\t\tOmit<EnhancedChipItem, 'duplicated'> & { duplicated?: Pick<EnhancedChipItem, 'duplicated'> }\n\t\t>\n\t): void => {\n\t\t// TODO item are filtered to be uniq, because the ContactInput filters out, dropdown duplicated, only visually\n\t\t//  but provide that item inside onChange parameter\n\t\tconst uniqNewContactInputValue = uniqBy(newContactInputValue, (value) => value.email);\n\n\t\tconst uniqNewContactInputValueWithActions = uniqNewContactInputValue.map((value) => {\n\t\t\tconst duplicated = value.email !== undefined && memberListEmails.includes(value.email);\n\n\t\t\tconst duplicatedChipAction: ChipAction = {\n\t\t\t\tid: 'duplicated',\n\t\t\t\tcolor: 'error',\n\t\t\t\ttype: 'icon',\n\t\t\t\ticon: 'AlertCircle'\n\t\t\t};\n\n\t\t\tconst duplicatedChipActionNotPresent = !value.actions?.find(\n\t\t\t\t(action) => action.id === 'duplicated'\n\t\t\t);\n\n\t\t\tconst actions = [\n\t\t\t\t...(value.actions ?? []),\n\t\t\t\t...(duplicated && duplicatedChipActionNotPresent ? [duplicatedChipAction] : [])\n\t\t\t];\n\n\t\t\treturn {\n\t\t\t\t...value,\n\t\t\t\tduplicated,\n\t\t\t\tactions\n\t\t\t};\n\t\t});\n\n\t\tsetContactInputValue(uniqNewContactInputValueWithActions);\n\t};\n\n\tconst contactInputIconAction = useCallback(() => {\n\t\tconst valid: string[] = [];\n\t\tconst invalid: typeof contactInputValue = [];\n\n\t\tcontactInputValue.forEach((value) => {\n\t\t\tif (value.error || value.duplicated || value.email === undefined) {\n\t\t\t\tinvalid.push(value);\n\t\t\t} else {\n\t\t\t\tvalid.push(value.email);\n\t\t\t}\n\t\t});\n\n\t\tsetContactInputValue(invalid);\n\t\tsetMemberListEmails((prevState) => [...prevState, ...valid]);\n\t}, [contactInputValue, setMemberListEmails]);\n\n\tconst removeItem = useCallback(\n\t\t(email: string) => {\n\t\t\tconst newMemberListEmails = memberListEmails.filter((value) => value !== email);\n\t\t\tsetMemberListEmails(newMemberListEmails);\n\t\t\tsetContactInputValue((prevState) =>\n\t\t\t\tprevState.map((value) => {\n\t\t\t\t\tconst duplicated = value.email !== undefined && newMemberListEmails.includes(value.email);\n\n\t\t\t\t\tconst actions = [...(value.actions ?? [])];\n\t\t\t\t\tif (!duplicated && value.duplicated) {\n\t\t\t\t\t\tremove(actions, (action) => action.id === 'duplicated');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\tduplicated,\n\t\t\t\t\t\tactions\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t\t},\n\t\t[memberListEmails, setMemberListEmails]\n\t);\n\n\tconst contactInputDescription = useMemo(() => {\n\t\tlet valid = 0;\n\t\tlet duplicated = 0;\n\t\tlet invalid = 0;\n\n\t\tcontactInputValue.forEach((value) => {\n\t\t\tif (value.duplicated) {\n\t\t\t\tduplicated += 1;\n\t\t\t} else if (value.error) {\n\t\t\t\tinvalid += 1;\n\t\t\t} else {\n\t\t\t\tvalid += 1;\n\t\t\t}\n\t\t});\n\t\tif (valid > 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (invalid > 0 && duplicated > 0) {\n\t\t\treturn t(\n\t\t\t\t'board.newContactGroup.input.contact_input.error.invalid_already_present_addresses',\n\t\t\t\t'Invalid and already present addresses'\n\t\t\t);\n\t\t}\n\t\tif (invalid > 0 && duplicated === 0) {\n\t\t\treturn t('board.newContactGroup.input.contact_input.error.invalid_address', {\n\t\t\t\tcount: invalid,\n\t\t\t\tdefaultValue_one: 'Invalid address',\n\t\t\t\tdefaultValue_other: 'Invalid addresses'\n\t\t\t});\n\t\t}\n\t\tif (duplicated > 0 && invalid === 0) {\n\t\t\treturn t('board.newContactGroup.input.contact_input.error.address_already_present', {\n\t\t\t\tcount: duplicated,\n\t\t\t\tdefaultValue_one: 'Address already present',\n\t\t\t\tdefaultValue_other: 'Addresses already present'\n\t\t\t});\n\t\t}\n\t\treturn undefined;\n\t}, [contactInputValue, t]);\n\n\tconst noValidChip = useMemo(\n\t\t() => !some(contactInputValue, (chip) => !chip.error && !chip.duplicated),\n\t\t[contactInputValue]\n\t);\n\n\tconst listItems = useMemo(\n\t\t(): Array<React.JSX.Element> =>\n\t\t\tmemberListEmails.map((item: string) => (\n\t\t\t\t<MemberListItemComponent key={item} email={item} onRemove={(): void => removeItem(item)} />\n\t\t\t)),\n\t\t[memberListEmails, removeItem]\n\t);\n\n\treturn (\n\t\t<Container\n\t\t\tcrossAlignment={'flex-end'}\n\t\t\tbackground={'gray5'}\n\t\t\tpadding={{ horizontal: 'large', bottom: '2.625rem' }}\n\t\t\theight={'fill'}\n\t\t\tminHeight={'30rem'}\n\t\t>\n\t\t\t<Container\n\t\t\t\tgap={'0.5rem'}\n\t\t\t\torientation={'horizontal'}\n\t\t\t\tmainAlignment={'flex-end'}\n\t\t\t\theight={'fit'}\n\t\t\t\tpadding={{ vertical: '0.5rem' }}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tdisabled={false}\n\t\t\t\t\tsize={'medium'}\n\t\t\t\t\tlabel={t('label.discard', 'discard')}\n\t\t\t\t\tonClick={discardChanges}\n\t\t\t\t\ttype=\"outlined\"\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tdisabled={isOnSaveDisabled}\n\t\t\t\t\tsize={'medium'}\n\t\t\t\t\tlabel={t('label.save', 'save')}\n\t\t\t\t\ticon={'SaveOutline'}\n\t\t\t\t\tonClick={onSave}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t\t<Container\n\t\t\t\theight={'fit'}\n\t\t\t\torientation={'horizontal'}\n\t\t\t\tmainAlignment={'flex-start'}\n\t\t\t\tgap={'1rem'}\n\t\t\t\tpadding={'1rem 0'}\n\t\t\t>\n\t\t\t\t<Avatar size=\"large\" label={nameValue} icon=\"PeopleOutline\" />\n\t\t\t\t<Container height={'fit'} crossAlignment={'flex-start'} minWidth={0}>\n\t\t\t\t\t<Text weight={'bold'}>{nameValue}</Text>\n\t\t\t\t\t<Text color={'gray1'}>\n\t\t\t\t\t\t{t('board.newContactGroup.addresses.label', 'Addresses')}: {memberListEmails.length}\n\t\t\t\t\t</Text>\n\t\t\t\t</Container>\n\t\t\t</Container>\n\t\t\t<Container\n\t\t\t\tbackground={'gray6'}\n\t\t\t\tmainAlignment={'flex-start'}\n\t\t\t\tcrossAlignment={'flex-start'}\n\t\t\t\tpadding={{ horizontal: 'large', top: 'large' }}\n\t\t\t\tgap={'0.5rem'}\n\t\t\t\theight={'calc(100% - 8rem)'}\n\t\t\t>\n\t\t\t\t<Input\n\t\t\t\t\tlabel={t('board.newContactGroup.input.name_input.name.label', 'Group name*')}\n\t\t\t\t\tbackgroundColor={'gray5'}\n\t\t\t\t\tborderColor={'gray3'}\n\t\t\t\t\tvalue={nameValue}\n\t\t\t\t\tonChange={onNameChange}\n\t\t\t\t\tdescription={nameDescription}\n\t\t\t\t\thasError={\n\t\t\t\t\t\tnameValue.trim().length === 0 || nameValue.length > CONTACT_GROUP_NAME_MAX_LENGTH\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t<Row padding={{ top: '0.5rem' }}>\n\t\t\t\t\t<Text color={'secondary'}>\n\t\t\t\t\t\t{t('board.newContactGroup.input.contact_input.title', 'Addresses list')}\n\t\t\t\t\t</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Container orientation={'horizontal'} height={'fit'} crossAlignment={'flex-start'}>\n\t\t\t\t\t<ContactInput\n\t\t\t\t\t\tdata-testid={'contact-group-contact-input'}\n\t\t\t\t\t\tdefaultValue={contactInputValue}\n\t\t\t\t\t\tonChange={contactInputOnChange}\n\t\t\t\t\t\tplaceholder={t(\n\t\t\t\t\t\t\t'board.newContactGroup.input.contact_input.placeholder',\n\t\t\t\t\t\t\t'Type an address, click ‘+’ to add to the group'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\ticon={'Plus'}\n\t\t\t\t\t\ticonAction={contactInputIconAction}\n\t\t\t\t\t\ticonDisabled={noValidChip}\n\t\t\t\t\t\tdescription={contactInputDescription}\n\t\t\t\t\t\thasError={contactInputValue.length > 0 && noValidChip}\n\t\t\t\t\t\tchipDisplayName={CHIP_DISPLAY_NAME_VALUES.email}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t\t<List data-testid={'members-list'}>{listItems}</List>\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n\nexport default CommonContactGroupBoard;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { useSnackbar } from '@zextras/carbonio-design-system';\nimport { difference, xor } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport CommonContactGroupBoard, { isContactGroupNameInvalid } from './common-contact-group-board';\nimport { useGetContactGroup } from '../../hooks/use-get-contact-group';\nimport { ContactGroup } from '../../model/contact-group';\nimport { apiClient } from '../../network/api-client';\nimport { useContactGroupStore } from '../../store/contact-groups';\n\nconst InnerEditContactGroupBoard = ({\n\tcontactGroup\n}: {\n\tcontactGroup: ContactGroup;\n}): React.JSX.Element => {\n\tconst [t] = useTranslation();\n\n\tconst createSnackbar = useSnackbar();\n\tconst [nameValue, setNameValue] = useState(contactGroup.title);\n\n\tconst [memberListEmails, setMemberListEmails] = useState<string[]>(contactGroup.members);\n\n\tconst onSave = useCallback(() => {\n\t\tconst addedMembers = difference(memberListEmails, contactGroup.members);\n\t\tconst removedMembers = difference(contactGroup.members, memberListEmails);\n\n\t\tapiClient\n\t\t\t.modifyContactGroup({\n\t\t\t\tid: contactGroup.id,\n\t\t\t\taddedMembers: addedMembers.length > 0 ? addedMembers : undefined,\n\t\t\t\tremovedMembers: removedMembers.length > 0 ? removedMembers : undefined,\n\t\t\t\tname: contactGroup.title !== nameValue ? nameValue : undefined\n\t\t\t})\n\t\t\t.then((contactGroup: ContactGroup) => {\n\t\t\t\tuseContactGroupStore.getState().updateContactGroup(contactGroup);\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: new Date().toLocaleString(),\n\t\t\t\t\ttype: 'success',\n\t\t\t\t\tlabel: t(\n\t\t\t\t\t\t'board.editContactGroup.snackbar.contact_group_edited',\n\t\t\t\t\t\t'Group successfully updated'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: new Date().toLocaleString(),\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\tlabel: t(\n\t\t\t\t\t\t'board.editContactGroup.snackbar.error',\n\t\t\t\t\t\t'Something went wrong saving the edits, try again'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t});\n\t}, [\n\t\tcontactGroup.id,\n\t\tcontactGroup.members,\n\t\tcontactGroup.title,\n\t\tcreateSnackbar,\n\t\tmemberListEmails,\n\t\tnameValue,\n\t\tt\n\t]);\n\n\tconst isOnSaveDisabled = useMemo(\n\t\t() =>\n\t\t\tisContactGroupNameInvalid(nameValue) ||\n\t\t\t(xor(memberListEmails, contactGroup.members).length === 0 &&\n\t\t\t\tcontactGroup.title === nameValue),\n\t\t[contactGroup.members, contactGroup.title, memberListEmails, nameValue]\n\t);\n\n\treturn (\n\t\t<CommonContactGroupBoard\n\t\t\tonSave={onSave}\n\t\t\tnameValue={nameValue}\n\t\t\tmemberListEmails={memberListEmails}\n\t\t\tisOnSaveDisabled={isOnSaveDisabled}\n\t\t\tsetMemberListEmails={setMemberListEmails}\n\t\t\tinitialNameValue={contactGroup.title}\n\t\t\tinitialMemberListEmails={contactGroup.members}\n\t\t\tsetNameValue={setNameValue}\n\t\t/>\n\t);\n};\n\nconst EditContactGroupBoard = (): React.JSX.Element | null => {\n\tconst contactGroup = useGetContactGroup();\n\treturn contactGroup ? <InnerEditContactGroupBoard contactGroup={contactGroup} /> : null;\n};\n\nexport default EditContactGroupBoard;\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useBoard } from '@zextras/carbonio-shell-ui';\n\nimport { ContactGroup } from '../model/contact-group';\nimport { useContactGroupStore } from '../store/contact-groups';\n\nexport const useGetContactGroup = (): ContactGroup | undefined => {\n\tconst { context } = useBoard<{ contactGroupId: string }>();\n\n\tconst contactGroups = useContactGroupStore((state) => state.orderedContactGroups);\n\tconst unOrderedContactGroups = useContactGroupStore((state) => state.unorderedContactGroups);\n\n\treturn [...contactGroups, ...unOrderedContactGroups].find(\n\t\t(contactGroupElement) => contactGroupElement.id === context?.contactGroupId\n\t);\n};\n"],"names":["MemberListItemComponent","email","onRemove","t","useTranslation","onRemoveClick","useCallback","React","Row","width","mainAlignment","padding","gap","wrap","flexShrink","minWidth","Avatar","size","label","TextWithTooltip","Button","type","icon","color","onClick","compareContactGroupName","nameA","nameB","nameALow","toLowerCase","nameBLow","initialState","orderedContactGroups","unorderedContactGroups","offset","addToProperList","ordered","unOrdered","cgToAdd","idxToAdd","findIndex","item","title","length","splice","push","unorderedIdxToAdd","useContactGroupStore","create","set","get","reset","updateContactGroup","contactGroup","idxToRemove","id","newOrderedContactGroups","newUnorderedContactGroups","uIdxToRemove","Error","setOffset","addContactGroups","contactGroups","unorderedResult","differenceBy","cg","removeContactGroup","contactGroupId","filter","addContactGroupInSortedPosition","newContactGroup","isContactGroupNameInvalid","nameValue","trim","CONTACT_GROUP_NAME_MAX_LENGTH","List","styled","ListV2","withConfig","displayName","componentId","CommonContactGroupBoard","onSave","memberListEmails","isOnSaveDisabled","setMemberListEmails","initialNameValue","initialMemberListEmails","setNameValue","updateBoard","useBoardHooks","onNameChange","ev","target","value","nameDescription","useMemo","contactInputValue","setContactInputValue","useState","discardChanges","contactInputIconAction","valid","invalid","forEach","error","duplicated","undefined","prevState","removeItem","newMemberListEmails","map","includes","actions","remove","action","contactInputDescription","count","defaultValue_one","defaultValue_other","noValidChip","some","chip","listItems","key","Container","crossAlignment","background","horizontal","bottom","height","minHeight","orientation","vertical","disabled","Text","weight","top","Input","backgroundColor","borderColor","onChange","description","hasError","ContactInput","defaultValue","newContactInputValue","uniqNewContactInputValueWithActions","uniqBy","duplicatedChipActionNotPresent","find","placeholder","iconAction","iconDisabled","chipDisplayName","CHIP_DISPLAY_NAME_VALUES","InnerEditContactGroupBoard","createSnackbar","useSnackbar","members","addedMembers","difference","removedMembers","apiClient","modifyContactGroup","name","then","getState","Date","toLocaleString","catch","xor","EditContactGroupBoard","useGetContactGroup","context","useBoard","state","contactGroupElement"],"sourceRoot":""}