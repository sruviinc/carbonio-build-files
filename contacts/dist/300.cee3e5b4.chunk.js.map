{"version":3,"file":"300.cee3e5b4.chunk.js","mappings":"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","sources":["webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/soap/get-folder.ts","webpack://carbonio-contacts-ui/./src/legacy/integrations/contact-input-integration-wrapper.tsx","webpack://carbonio-contacts-ui/./src/legacy/integrations/create-contact.tsx","webpack://carbonio-contacts-ui/./src/legacy/views/secondary-bar/sync-data-handler.jsx","webpack://carbonio-contacts-ui/./src/app.tsx","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/hooks/use-folders-controller.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/soap/get-share-info.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/constants/utils/index.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/helpers/folders.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/store/zustand/folder/hooks.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/store/zustand/folder/store.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/store/zustand/folder/utils.ts","webpack://carbonio-contacts-ui/./src/carbonio-ui-commons/worker/index.ts","webpack://carbonio-contacts-ui/./src/constants/contact-input.ts","webpack://carbonio-contacts-ui/./src/constants/index.ts","webpack://carbonio-contacts-ui/./src/hooks/use-get-distribution-list-members.ts","webpack://carbonio-contacts-ui/./src/hooks/use-get-distribution-list.ts","webpack://carbonio-contacts-ui/./src/hooks/useNavigation.ts","webpack://carbonio-contacts-ui/./src/legacy/hooks/redux.ts","webpack://carbonio-contacts-ui/./src/legacy/integrations/contact-input-custom-chip-component.tsx","webpack://carbonio-contacts-ui/./src/legacy/integrations/contact-input.tsx","webpack://carbonio-contacts-ui/./src/legacy/store/actions/contact-action.ts","webpack://carbonio-contacts-ui/./src/legacy/store/actions/create-contact.ts","webpack://carbonio-contacts-ui/./src/legacy/store/actions/modify-contact.ts","webpack://carbonio-contacts-ui/./src/legacy/store/actions/search-contacts.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/reducers.ts","webpack://carbonio-contacts-ui/./src/legacy/store/redux/index.tsx","webpack://carbonio-contacts-ui/./src/legacy/store/actions/folder-action.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/contact-action.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/create-contact.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/folder-action.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/modify-contact.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/search-contacts.ts","webpack://carbonio-contacts-ui/./src/legacy/store/slices/contacts-slice.ts","webpack://carbonio-contacts-ui/./src/legacy/store/reducers/handle-contacts-sync.ts","webpack://carbonio-contacts-ui/./src/legacy/utils/helpers.ts","webpack://carbonio-contacts-ui/./src/legacy/types/contact.ts","webpack://carbonio-contacts-ui/./src/legacy/utils/normalizations/normalize-contact-from-soap.ts","webpack://carbonio-contacts-ui/./src/legacy/utils/normalizations/normalize-contact-to-soap.ts","webpack://carbonio-contacts-ui/./src/network/api/create-mountpoints.ts","webpack://carbonio-contacts-ui/./src/network/api/contact-action.ts","webpack://carbonio-contacts-ui/./src/network/api/folder-action.ts","webpack://carbonio-contacts-ui/./src/network/api/find-contact-groups.ts","webpack://carbonio-contacts-ui/./src/network/api/get-distribution-list.ts","webpack://carbonio-contacts-ui/./src/network/api/get-item.ts","webpack://carbonio-contacts-ui/./src/legacy/helpers/file.ts","webpack://carbonio-contacts-ui/./src/network/api-client.ts","webpack://carbonio-contacts-ui/./src/network/api/create-contact-group.ts","webpack://carbonio-contacts-ui/./src/network/api/distribution-list-action.ts","webpack://carbonio-contacts-ui/./src/network/api/get-distribution-list-members.ts","webpack://carbonio-contacts-ui/./src/network/api/delete-contact.ts","webpack://carbonio-contacts-ui/./src/network/api/move-contact.ts","webpack://carbonio-contacts-ui/./src/network/api/get-account-distribution-lists.ts","webpack://carbonio-contacts-ui/./src/network/api/modify-contact.ts","webpack://carbonio-contacts-ui/./src/network/api/get-share-info.ts","webpack://carbonio-contacts-ui/./src/network/api/delete-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/trash-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/move-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/empty-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/export-contacts.ts","webpack://carbonio-contacts-ui/./src/network/api/import-contacts.ts","webpack://carbonio-contacts-ui/./src/network/api/upload.ts","webpack://carbonio-contacts-ui/./src/network/api/share-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/revoke-folder-grant.ts","webpack://carbonio-contacts-ui/./src/network/api/send-share-notification.ts","webpack://carbonio-contacts-ui/./src/network/api/update-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/create-folder.ts","webpack://carbonio-contacts-ui/./src/network/api/create-contact.ts","webpack://carbonio-contacts-ui/./src/store/distribution-lists.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\n\nimport { FolderView } from '../types/folder';\n\nexport const getFolderRequest = async (\n\t{ id, view }: { id?: string; view?: FolderView },\n\taccount?: string\n): Promise<any> => {\n\tconst body = omitBy(\n\t\t{\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tfolder: id\n\t\t\t\t? {\n\t\t\t\t\t\tl: id\n\t\t\t\t\t}\n\t\t\t\t: undefined,\n\t\t\tview,\n\t\t\ttr: 1\n\t\t},\n\t\tisNil\n\t);\n\treturn soapFetch('GetFolder', body, account);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react';\n\nimport { ContactInput, type ContactInputProps } from './contact-input';\n\nexport type ContactInputIntegrationWrapperProps = Omit<ContactInputProps, 'contactActions'> & {\n\tactions?: ContactInputProps['contactActions'];\n};\n\nexport const ContactInputIntegrationWrapper = (\n\tprops: ContactInputIntegrationWrapperProps\n): React.JSX.Element => <ContactInput {...props} />;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { CreateSnackbarFn } from '@zextras/carbonio-design-system';\nimport { TFunction } from 'i18next';\n\nimport { apiClient } from '../../network/api-client';\n\ntype CreateContactContextType = {\n\tmessageId: string;\n\tpart: string;\n};\n\nconst createContactIntegration =\n\t(createSnackbar: CreateSnackbarFn, t: TFunction) =>\n\t(context: CreateContactContextType): void => {\n\t\tapiClient\n\t\t\t.createContactFromVcard(context.messageId, context.part)\n\t\t\t.then(() => {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: new Date().toLocaleString(),\n\t\t\t\t\ttype: 'success',\n\t\t\t\t\tlabel: t(\n\t\t\t\t\t\t'import_contacts.snackbar.contact_import_success',\n\t\t\t\t\t\t'Contact imported in your address book successfully.'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: new Date().toLocaleString(),\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again')\n\t\t\t\t});\n\t\t\t});\n\t};\n\nexport default createContactIntegration;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useEffect, useState } from 'react';\n\nimport { useNotify, useRefresh } from '@zextras/carbonio-shell-ui';\nimport { forEach, isEmpty, sortBy } from 'lodash';\n\nimport { useAppDispatch } from '../../hooks/redux';\nimport {\n\thandleCreatedContactsSync,\n\thandleDeletedContactsSync,\n\thandleModifiedContactsSync\n} from '../../store/slices/contacts-slice';\nimport { normalizeSyncContactsFromSoap } from '../../utils/normalizations/normalize-contact-from-soap';\n\nexport const SyncDataHandler = () => {\n\tconst notifyList = useNotify();\n\tconst [seq, setSeq] = useState(-1);\n\tconst refresh = useRefresh();\n\tconst dispatch = useAppDispatch();\n\tconst [initialized, setInitialized] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (!isEmpty(refresh) && !initialized) {\n\t\t\tsetInitialized(true);\n\t\t}\n\t}, [dispatch, initialized, refresh]);\n\n\tuseEffect(() => {\n\t\tif (initialized) {\n\t\t\tif (notifyList.length > 0) {\n\t\t\t\tforEach(sortBy(notifyList, 'seq'), (notify) => {\n\t\t\t\t\tif (!isEmpty(notify) && notify.seq > seq) {\n\t\t\t\t\t\tif (notify.created?.cn) {\n\t\t\t\t\t\t\tdispatch(handleCreatedContactsSync(normalizeSyncContactsFromSoap(notify.created.cn)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.modified?.cn) {\n\t\t\t\t\t\t\tconst norm = normalizeSyncContactsFromSoap(notify.modified.cn);\n\t\t\t\t\t\t\tdispatch(handleModifiedContactsSync(norm));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (notify.deleted?.length > 0) {\n\t\t\t\t\t\t\tdispatch(handleDeletedContactsSync(notify.deleted));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsetSeq(notify.seq);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [dispatch, initialized, notifyList, seq]);\n\n\treturn null;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { lazy, Suspense, useEffect } from 'react';\n\nimport { ModalManager, useSnackbar } from '@zextras/carbonio-design-system';\nimport {\n\tACTION_TYPES,\n\taddBoard,\n\taddBoardView,\n\taddRoute,\n\taddSearchView,\n\taddSettingsView,\n\tregisterActions,\n\tregisterComponents,\n\tregisterFunctions,\n\tSearchViewProps,\n\tSecondaryBarComponentProps,\n\tSpinner\n} from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\n\nimport { FOLDER_VIEW } from './carbonio-ui-commons/constants';\nimport { useFoldersController } from './carbonio-ui-commons/hooks/use-folders-controller';\nimport {\n\tCONTACTS_APP_ID,\n\tCONTACTS_ROUTE,\n\tNEW_CONTACT_GROUP_BOARD_ID,\n\tGROUPS_ROUTE,\n\tEDIT_CONTACT_GROUP_BOARD_ID,\n\tEDIT_DL_BOARD_ID\n} from './constants';\nimport { useNavigation } from './hooks/useNavigation';\nimport { ContactInputIntegrationWrapper } from './legacy/integrations/contact-input-integration-wrapper';\nimport createContactIntegration from './legacy/integrations/create-contact';\nimport { StoreProvider } from './legacy/store/redux';\nimport { SyncDataHandler } from './legacy/views/secondary-bar/sync-data-handler';\n\nconst LazyAppView = lazy(\n\t() => import(/* webpackChunkName: \"contacts-view\" */ './legacy/views/app-view')\n);\nconst LazySecondaryBarView = lazy(\n\t() => import(/* webpackChunkName: \"secondaryBarView\" */ './views/SecondaryBarView')\n);\nconst LazyLegacySecondaryBarView = lazy(\n\t() =>\n\t\timport(\n\t\t\t/* webpackChunkName: \"legacySecondaryBarView\" */ './legacy/views/secondary-bar/secondary-bar-view'\n\t\t)\n);\n\nconst LazyGroupsAppView = lazy(\n\t() => import(/* webpackChunkName: \"groupsAppView\" */ './views/GroupsAppView')\n);\nconst LazySettingsView = lazy(\n\t() => import(/* webpackChunkName: \"settings-view\" */ './legacy/views/settings/settings-view')\n);\nconst LazySearchView = lazy(\n\t() => import(/* webpackChunkName: \"search-view\" */ './legacy/views/search/search-view')\n);\n\nconst LazyBoardView = lazy(\n\t() => import(/* webpackChunkName: \"edit-view\" */ './legacy/views/edit/edit-view-board-wrapper')\n);\n\nconst LazyNewContactGroupBoardView = lazy(\n\t() =>\n\t\timport(/* webpackChunkName: \"newContactGroupView\" */ './views/board/new-contact-group-board')\n);\n\nconst LazyEditContactGroupBoardView = lazy(\n\t() =>\n\t\timport(/* webpackChunkName: \"editContactGroupView\" */ './views/board/edit-contact-group-board')\n);\n\nconst LazyEditDLBoardView = lazy(\n\t() => import(/* webpackChunkName: \"edit-dl-view\" */ './views/board/edit-dl-board')\n);\n\nconst AppView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<StoreProvider>\n\t\t\t<ModalManager>\n\t\t\t\t<LazyAppView />\n\t\t\t</ModalManager>\n\t\t</StoreProvider>\n\t</Suspense>\n);\n\nconst SecondaryBarView = (props: SecondaryBarComponentProps): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<ModalManager>\n\t\t\t<LazySecondaryBarView {...props} />\n\t\t</ModalManager>\n\t</Suspense>\n);\n\nconst AppViewV2 = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<LazyGroupsAppView />\n\t</Suspense>\n);\n\nconst BoardView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<StoreProvider>\n\t\t\t<ModalManager>\n\t\t\t\t<LazyBoardView />\n\t\t\t</ModalManager>\n\t\t</StoreProvider>\n\t</Suspense>\n);\n\nconst NewContactGroupBoardView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<ModalManager>\n\t\t\t<LazyNewContactGroupBoardView />\n\t\t</ModalManager>\n\t</Suspense>\n);\n\nconst EditContactGroupBoardView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<ModalManager>\n\t\t\t<LazyEditContactGroupBoardView />\n\t\t</ModalManager>\n\t</Suspense>\n);\n\nconst EditDLBoardView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<LazyEditDLBoardView />\n\t</Suspense>\n);\n\nconst SettingsView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<StoreProvider>\n\t\t\t<ModalManager>\n\t\t\t\t<LazySettingsView />\n\t\t\t</ModalManager>\n\t\t</StoreProvider>\n\t</Suspense>\n);\n\nconst SearchView = (props: SearchViewProps): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<StoreProvider>\n\t\t\t<ModalManager>\n\t\t\t\t<LazySearchView {...props} />\n\t\t\t</ModalManager>\n\t\t</StoreProvider>\n\t</Suspense>\n);\n\nconst LegacySecondaryBarView = (props: SecondaryBarComponentProps): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<StoreProvider>\n\t\t\t<ModalManager>\n\t\t\t\t<LazyLegacySecondaryBarView {...props} />\n\t\t\t</ModalManager>\n\t\t</StoreProvider>\n\t</Suspense>\n);\n\nconst App = (): React.JSX.Element => {\n\tconst [t] = useTranslation();\n\tconst { navigateTo } = useNavigation();\n\tconst createSnackbar = useSnackbar();\n\n\tuseEffect(() => {\n\t\taddRoute({\n\t\t\troute: CONTACTS_ROUTE,\n\t\t\tposition: 300,\n\t\t\tvisible: true,\n\t\t\tlabel: t('label.app_name', 'Contacts'),\n\t\t\tprimaryBar: 'ContactsModOutline',\n\t\t\tsecondaryBar: LegacySecondaryBarView,\n\t\t\tappView: AppView\n\t\t});\n\t\taddRoute({\n\t\t\troute: GROUPS_ROUTE,\n\t\t\tposition: 310,\n\t\t\tvisible: true,\n\t\t\tlabel: t('label.groups_app_name', 'Contact Groups and Distribution Lists'),\n\t\t\tprimaryBar: 'ListOutline',\n\t\t\tsecondaryBar: SecondaryBarView,\n\t\t\tappView: AppViewV2\n\t\t});\n\t\taddSettingsView({\n\t\t\troute: CONTACTS_ROUTE,\n\t\t\tlabel: t('label.app_name', 'Contacts'),\n\t\t\tcomponent: SettingsView\n\t\t});\n\t\taddSearchView({\n\t\t\troute: CONTACTS_ROUTE,\n\t\t\tlabel: t('label.app_name', 'Contacts'),\n\t\t\tcomponent: SearchView\n\t\t});\n\t\taddBoardView({\n\t\t\troute: CONTACTS_ROUTE,\n\t\t\tcomponent: BoardView\n\t\t});\n\t\taddBoardView({\n\t\t\tid: NEW_CONTACT_GROUP_BOARD_ID,\n\t\t\troute: NEW_CONTACT_GROUP_BOARD_ID,\n\t\t\tcomponent: NewContactGroupBoardView\n\t\t});\n\t\taddBoardView({\n\t\t\tid: EDIT_CONTACT_GROUP_BOARD_ID,\n\t\t\troute: EDIT_CONTACT_GROUP_BOARD_ID,\n\t\t\tcomponent: EditContactGroupBoardView\n\t\t});\n\t\taddBoardView({\n\t\t\tid: EDIT_DL_BOARD_ID,\n\t\t\troute: EDIT_DL_BOARD_ID,\n\t\t\tcomponent: EditDLBoardView\n\t\t});\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\tregisterComponents({\n\t\t\tid: 'contact-input',\n\t\t\tcomponent: ContactInputIntegrationWrapper\n\t\t});\n\n\t\tregisterActions(\n\t\t\t{\n\t\t\t\taction: () => ({\n\t\t\t\t\tid: 'new-contact',\n\t\t\t\t\tlabel: t('label.new_contact', 'New Contact'),\n\t\t\t\t\ticon: 'ContactsModOutline',\n\t\t\t\t\tonClick: (ev): void => {\n\t\t\t\t\t\tev?.preventDefault?.();\n\t\t\t\t\t\taddBoard({\n\t\t\t\t\t\t\turl: `${CONTACTS_ROUTE}/new`,\n\t\t\t\t\t\t\ttitle: t('label.new_contact', 'New Contact')\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdisabled: false,\n\t\t\t\t\tgroup: CONTACTS_APP_ID,\n\t\t\t\t\tprimary: true\n\t\t\t\t}),\n\t\t\t\tid: 'new-contact',\n\t\t\t\ttype: ACTION_TYPES.NEW\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'new-contact-group',\n\t\t\t\ttype: ACTION_TYPES.NEW,\n\t\t\t\taction: () => ({\n\t\t\t\t\tid: 'new-contact-group',\n\t\t\t\t\tlabel: t('label.newContactGroup', 'New contact group'),\n\t\t\t\t\ticon: 'PeopleOutline',\n\t\t\t\t\tonClick: (): void => {\n\t\t\t\t\t\taddBoard({\n\t\t\t\t\t\t\turl: NEW_CONTACT_GROUP_BOARD_ID,\n\t\t\t\t\t\t\ttitle: t('board.newContactGroup.title', 'New Group'),\n\t\t\t\t\t\t\tcontext: { navigateTo }\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdisabled: false,\n\t\t\t\t\tprimary: false,\n\t\t\t\t\tgroup: CONTACTS_APP_ID\n\t\t\t\t})\n\t\t\t}\n\t\t);\n\t\tregisterFunctions({\n\t\t\tid: 'create_contact_from_vcard',\n\t\t\tfn: createContactIntegration(createSnackbar, t)\n\t\t});\n\t}, [createSnackbar, navigateTo, t]);\n\n\tuseFoldersController(FOLDER_VIEW.contact);\n\n\treturn (\n\t\t<StoreProvider>\n\t\t\t<SyncDataHandler />\n\t\t</StoreProvider>\n\t);\n};\n\nexport default App;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useEffect, useState } from 'react';\n\nimport { useNotify } from '@zextras/carbonio-shell-ui';\nimport { filter, forEach, isEmpty, map, reject, sortBy } from 'lodash';\n\nimport { getFolderRequest } from '../soap/get-folder';\nimport { getShareInfoRequest } from '../soap/get-share-info';\nimport { useFolderStore } from '../store/zustand/folder';\nimport { FolderView } from '../types/folder';\nimport { folderWorker } from '../worker';\n\nconst getFoldersByAccounts = async (sharedAccounts: unknown[], view: FolderView): Promise<any> =>\n\tPromise.all(\n\t\tmap(sharedAccounts, async ({ ownerEmail }: { ownerEmail: string }) => {\n\t\t\tconst response = await getFolderRequest({ view }, ownerEmail);\n\t\t\tif (response?.folder?.length) {\n\t\t\t\treturn {\n\t\t\t\t\t...response.folder[0],\n\t\t\t\t\toname: response.folder[0].name,\n\t\t\t\t\towner: ownerEmail,\n\t\t\t\t\tname: ownerEmail\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn response;\n\t\t})\n\t);\n\nexport const useFoldersController = (view: FolderView): null => {\n\tconst [initializing, setInitializing] = useState(true);\n\tconst [seq, setSeq] = useState(-1);\n\n\tconst notify = useNotify();\n\n\tuseEffect(() => {\n\t\tif (initializing && view) {\n\t\t\tsetInitializing((previous) => !previous);\n\t\t\tgetFolderRequest({ view })\n\t\t\t\t.then((rootFolders: { folder: any }) => {\n\t\t\t\t\tgetShareInfoRequest().then((sharedFolders) => {\n\t\t\t\t\t\tif (sharedFolders?.folders) {\n\t\t\t\t\t\t\tconst sharedAccounts = filter(sharedFolders.folders, ['folderId', 1]);\n\t\t\t\t\t\t\tif (sharedAccounts.length) {\n\t\t\t\t\t\t\t\tconst filteredLinks = reject(rootFolders.folder[0].link, ['rid', 1]);\n\t\t\t\t\t\t\t\tgetFoldersByAccounts(sharedAccounts, view).then((response) => {\n\t\t\t\t\t\t\t\t\tif (!response.Fault) {\n\t\t\t\t\t\t\t\t\t\tconst folders = [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t...rootFolders.folder[0],\n\t\t\t\t\t\t\t\t\t\t\t\tlink: filteredLinks\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t...response\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\tfolderWorker.postMessage({\n\t\t\t\t\t\t\t\t\t\t\top: 'refresh',\n\t\t\t\t\t\t\t\t\t\t\tcurrentView: view,\n\t\t\t\t\t\t\t\t\t\t\tfolder: folders ?? []\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconst folders = [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t...rootFolders.folder[0],\n\t\t\t\t\t\t\t\t\t\t\t\tlink: filteredLinks\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\tfolderWorker.postMessage({\n\t\t\t\t\t\t\t\t\t\t\top: 'refresh',\n\t\t\t\t\t\t\t\t\t\t\tcurrentView: view,\n\t\t\t\t\t\t\t\t\t\t\tfolder: folders ?? []\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfolderWorker.postMessage({\n\t\t\t\t\t\t\t\t\top: 'refresh',\n\t\t\t\t\t\t\t\t\tcurrentView: view,\n\t\t\t\t\t\t\t\t\tfolder: rootFolders?.folder ?? []\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tsetInitializing(true);\n\t\t\t\t});\n\t\t}\n\t}, [initializing, view]);\n\n\tuseEffect(() => {\n\t\tif (!initializing && notify.length > 0) {\n\t\t\tforEach(sortBy(notify, 'seq'), (item) => {\n\t\t\t\tif (!isEmpty(notify) && (item.seq > seq || (seq > 1 && item.seq === 1))) {\n\t\t\t\t\tconst isNotifyRelatedToFolders =\n\t\t\t\t\t\t!isEmpty(notify) &&\n\t\t\t\t\t\t(item?.created?.folder ||\n\t\t\t\t\t\t\titem?.modified?.folder ||\n\t\t\t\t\t\t\titem.deleted ||\n\t\t\t\t\t\t\titem?.created?.link ||\n\t\t\t\t\t\t\titem?.modified?.link);\n\n\t\t\t\t\tif (isNotifyRelatedToFolders) {\n\t\t\t\t\t\tfolderWorker.postMessage({\n\t\t\t\t\t\t\top: 'notify',\n\t\t\t\t\t\t\tnotify: item,\n\t\t\t\t\t\t\tstate: useFolderStore.getState().folders\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tsetSeq(item.seq);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, [initializing, notify, seq, view]);\n\treturn null;\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ErrorSoapBodyResponse, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isEmpty } from 'lodash';\n\nimport { ResFolder } from '../utils';\n\ntype GetShareInfoRequest = {\n\t_jsns: string;\n\tincludeSelf: number;\n};\n\ntype GetShareInfoResponse = {\n\t_jsns: string;\n\tshare: Array<ResFolder>;\n};\n\nexport const getShareInfoRequest = async (): Promise<{\n\tisFulfilled: boolean;\n\tfolders: Array<ResFolder>;\n}> => {\n\tconst result = await soapFetch<GetShareInfoRequest, GetShareInfoResponse | ErrorSoapBodyResponse>(\n\t\t'GetShareInfo',\n\t\t{\n\t\t\t_jsns: 'urn:zimbraAccount',\n\t\t\tincludeSelf: 0\n\t\t}\n\t);\n\n\tif ('Fault' in result) {\n\t\treturn Promise.reject(result.Fault);\n\t}\n\n\treturn Promise.resolve({ isFulfilled: !isEmpty(result), folders: result?.share ?? [] });\n};\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const FOLDER_VIEW = {\n\tsearch_folder: 'search folder',\n\ttag: 'tag',\n\tconversation: 'conversation',\n\tmessage: 'message',\n\tcontact: 'contact',\n\tdocument: 'document',\n\tappointment: 'appointment',\n\tvirtual_conversation: 'virtual conversation',\n\tremote_folder: 'remote folder',\n\twiki: 'wiki',\n\ttask: 'task',\n\tchat: 'chat'\n} as const;\n\n// eslint-disable-next-line no-shadow\nexport enum TagsActionsType {\n\tNEW = 'new',\n\tDELETE = 'delete',\n\tEDIT = 'edit',\n\tApply = 'apply'\n}\n\nexport const DRAG_DATA_TYPE = {\n\tMESSAGE: 'message',\n\tCONVERSATION: 'conversation',\n\tFOLDER: 'folder',\n\tCONTACT: 'contact'\n} as const;\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { FOLDERS, getUserAccount } from '@zextras/carbonio-shell-ui';\nimport { find } from 'lodash';\n\nimport { useFolderStore } from '../store/zustand/folder';\nimport type { Folder, Folders } from '../types/folder';\n\nconst NO_ACCOUNT_NAME = 'No account';\n\n/*\n * Describe the folder id syntax\n *\n * [<zid>:]<folderId>\n *\n * e.g. a79fa996-e90e-4f04-97c4-c84209bb8277:2\n */\nconst FOLDERID_REGEX = /^([^:]+(?=:))*:?(\\d+)$/;\n\ntype FolderIdType = { zid: string | null; id: string | null };\n\n/**\n * Parse the given folder id and returns on object with the composing parts of the folder id\n * @param folderId\n */\nexport const getFolderIdParts = (folderId: string): FolderIdType => {\n\tconst result: FolderIdType = { zid: null, id: null };\n\n\tif (!folderId || !folderId.match(FOLDERID_REGEX)) {\n\t\treturn result;\n\t}\n\n\tconst parts = FOLDERID_REGEX.exec(folderId);\n\tif (!parts) {\n\t\treturn result;\n\t}\n\n\t[, result.zid = null, result.id = null] = parts;\n\treturn result;\n};\n\n/**\n * Get the account name of the owner of the given folder, if the owner is an\n * \"other\" account, different from the primary account of the current user.\n * If the owner is the primary account then <code>null</code> is returned\n * @param folderId\n * @param folderRoots\n */\nexport const getFolderOtherOwnerAccountName = (\n\tfolderId: string,\n\tfolderRoots: Folders\n): string | null => {\n\tif (!folderId) {\n\t\treturn null;\n\t}\n\n\tconst { zid } = getFolderIdParts(folderId);\n\tif (!zid) {\n\t\treturn null;\n\t}\n\n\t/** find the folderRoots for which the id corresponds to the message zid\n\t * if the folderRoots has an owner, return the owner\n\t * if not, return null\n\t * */\n\n\tconst matchingFolderRoot = find(folderRoots, (c) => c.id.includes(zid));\n\tif (!matchingFolderRoot) {\n\t\treturn null;\n\t}\n\n\treturn 'owner' in matchingFolderRoot && matchingFolderRoot.owner\n\t\t? matchingFolderRoot.owner\n\t\t: null;\n};\n\n/**\n * Returns the account name of the owner of the folder, based on the folder id\n * @param folderId\n * @param folderRoots\n */\nexport const getFolderOwnerAccountName = (folderId: string, folderRoots: Folders): string => {\n\tconst primaryAccount = getUserAccount();\n\n\t/*\n\t * Try to get the account of the \"other\" owner, aka an owner which\n\t * is not the primary account of the current user\n\t */\n\tconst otherOwnerAccount = getFolderOtherOwnerAccountName(folderId, folderRoots);\n\n\tif (!otherOwnerAccount) {\n\t\treturn primaryAccount?.name ?? NO_ACCOUNT_NAME;\n\t}\n\n\treturn otherOwnerAccount;\n};\n\n/**\n * Tells if a folder with the given id is a spam folder\n * @param folderId\n * @param folderType\n */\nexport const isA = (folderId: string, folderType: keyof Folders): boolean => {\n\tif (!folderId) {\n\t\treturn false;\n\t}\n\treturn getFolderIdParts(folderId).id === folderType;\n};\n\n/**\n * Tells if a folder with the given id is the default account root folder\n * @param folderId\n */\nexport const isDefaultAccountRoot = (folderId: string): boolean => folderId === FOLDERS.USER_ROOT;\n\n/**\n * Tells if a folder with the given id is a root folder\n * @param folderId\n */\nexport const isRoot = (folderId: string): boolean => isA(folderId, FOLDERS.USER_ROOT);\n\n/**\n * Tells if the given folder is a link to a folder shared by another user\n * @param folder\n */\nexport const isLink = (folder: Folder): boolean =>\n\t(folder && folder.isLink && getFolderIdParts(folder.id).zid === null) ?? false;\n\n/**\n * Tells if a folder is a folder of a shared account\n * @param folderId\n */\nexport function isSharedAccountFolder(folderId: string): boolean {\n\treturn getFolderIdParts(folderId).zid !== null;\n}\n\n/**\n * Tells if a folder is a system one\n * @param folderId\n */\nexport const isSystemFolder = (folderId: string): boolean => {\n\tconst { id } = getFolderIdParts(folderId);\n\tif (!id) {\n\t\treturn false;\n\t}\n\tconst systemFoldersIds: readonly string[] = Object.values(FOLDERS);\n\treturn systemFoldersIds.includes(folderId);\n};\n\n/**\n * Tells if a folder is a trashed folder\n * @param folder\n * @param folderId\n */\nexport const isTrashed = ({\n\tfolder,\n\tfolderId\n}: {\n\tfolder?: Folder;\n\tfolderId?: string;\n}): boolean => {\n\tif (!folder && !folderId) {\n\t\treturn false;\n\t}\n\tconst folderIdAbsPath = useFolderStore.getState()?.folders?.[folderId ?? '']?.absFolderPath;\n\n\tconst path = folder ? folder.absFolderPath : folderIdAbsPath;\n\tif (!path) {\n\t\treturn false;\n\t}\n\n\treturn path.toLowerCase().startsWith('/trash');\n};\n\n/**\n * Tells if a folder with the given id is a trash folder\n * @param folderId\n */\nexport const isTrash = (folderId: string): boolean => isA(folderId, FOLDERS.TRASH);\n\n/**\n * Tells if the current user has read permission on the given folder/link\n * @param folder\n */\nexport const isReadAllowed = (folder: Folder): boolean => !folder.perm || folder.perm.includes('r');\n\n/**\n * Tells if the current user has write permission on the given folder/link\n * @param folder\n */\nexport const isWriteAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('w');\n\n/**\n * Tells if the current user has insertion permission on the given folder/link\n * @param folder\n */\nexport const isInsertAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('i');\n\n/**\n * Tells if the current user has subfolder creation permission on the given folder/link\n * @param folder\n */\nexport const isCreateAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('c');\n\n/**\n * Tells if the current user has deletion permission on the given folder/link\n * @param folder\n */\nexport const isDeleteAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('d');\n\n/**\n * Tells if the current user has administration permission on the given folder/link\n * @param folder\n */\nexport const isAdministerAllowed = (folder: Folder): boolean =>\n\t!folder.perm || folder.perm.includes('a');\n('');\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { useMemo } from 'react';\n\nimport { FOLDERS, ROOT_NAME } from '@zextras/carbonio-shell-ui';\nimport { filter, find, keyBy, some, values } from 'lodash';\n\nimport { useFolderStore } from './store';\nimport { getFlatChildrenFolders } from './utils';\nimport type { Folder, Folders, LinkFolder, SearchFolder, Searches } from '../../../types';\n\n/**\n * Returns the folder with given ID or undefined\n * @params id */\nexport const useFolder = (id: string): Folder | undefined => useFolderStore((s) => s.folders?.[id]);\n\n/**\n * Returns the folder with given ID or undefined\n * @params id */\nexport const getFolder = (id: string): Folder | undefined =>\n\tuseFolderStore.getState()?.folders?.[id];\n\n/**\n * Returns a folders' map including roots and links. Each folder has its own tree structure included inside its children\n */\nexport const useFoldersMap = (): Folders => useFolderStore((s) => s.folders);\n\n/**\n * Returns a folders' map including roots and links. Each folder has its own tree structure included inside its children\n */\nexport const getFoldersMap = (): Folders => useFolderStore.getState().folders;\n\n/**\n * Returns a folders' array including only links. Each folder has its own tree structure included inside its children\n */\nexport const getLinksArray = (view?: string): Array<LinkFolder> =>\n\tfilter(values(useFolderStore.getState().folders), (folder: Folder) => {\n\t\tif (view && folder.view !== view) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn folder.isLink;\n\t}) as Array<LinkFolder>;\n\n/**\n * Returns the root folder id for a given folder\n * @param folder a Folder or LinkFolder\n * @returns the root folder id or null if the folder is not a link or the root folder\n */\nfunction getRootFolderId(folder: Folder | LinkFolder): string {\n\tconst parent = folder?.parent && getFolder(folder.parent);\n\tif ('oname' in folder && folder?.oname === ROOT_NAME) {\n\t\treturn folder.id;\n\t}\n\tif (parent) {\n\t\treturn getRootFolderId(parent);\n\t}\n\treturn folder.id;\n}\n\n/**\n * Returns the root folder of the provided folderId or undefined\n * @params id\n * @returns the root folder or undefined\n * */\nexport const useRoot = (id: string): Folder | undefined =>\n\tuseFolderStore((s) => {\n\t\tconst folder = s.folders?.[id];\n\t\tif (folder) {\n\t\t\tconst rootFolderId = getRootFolderId(folder);\n\t\t\treturn s.folders?.[rootFolderId];\n\t\t}\n\t\treturn undefined;\n\t});\n\n/**\n * Returns the root folder of the provided folderId or undefined\n * @params id\n * @returns the root folder or undefined\n * */\nexport const getRoot = (id: string): Folder | undefined => {\n\tconst folder = useFolderStore.getState().folders?.[id];\n\tif (folder) {\n\t\tconst rootFolderId = getRootFolderId(folder);\n\t\treturn useFolderStore.getState().folders?.[rootFolderId];\n\t}\n\treturn undefined;\n};\n\n/**\n * Returns a roots' array. Each root has its own tree structure included inside its children\n */\nexport const useRootsArray = (): Array<Folder> =>\n\tuseFolderStore((s) => filter(s.folders, (f) => f.id?.split(':')?.includes(FOLDERS.USER_ROOT)));\n\n/**\n * Returns a roots' array. Each root has its own tree structure included inside its children\n */\nexport const getRootsArray = (): Array<Folder> =>\n\tfilter(useFolderStore.getState().folders, (f) => f.id?.split(':')?.includes(FOLDERS.USER_ROOT));\n\n/**\n * Returns a roots' map. Each root has its own tree structure included inside its children\n */\nexport const useRootsMap = (): Record<string, Folder> =>\n\tuseFolderStore((s) =>\n\t\tkeyBy(\n\t\t\tfilter(s.folders, (f) => f.id?.split(':')?.includes(FOLDERS.USER_ROOT)),\n\t\t\t'id'\n\t\t)\n\t);\n\n/**\n * Returns a roots' map. Each root has its own tree structure included inside its children\n */\nexport const getRootsMap = (): Record<string, Folder> =>\n\tkeyBy(\n\t\tfilter(useFolderStore.getState().folders, (f) => f.id?.split(':')?.includes(FOLDERS.USER_ROOT)),\n\t\t'id'\n\t);\n\n// ROOTS BY VIEW\n/**\n * Returns a root with given user ID.\n * @params userId\n */\nexport const useRootByUser = (\n\tuserId: string\n): Folder | SearchFolder | Record<string, never> | undefined =>\n\tuseFolderStore((s) => find(s.folders, (f) => f.name === userId));\n\n/**\n * Returns a root with given user ID.\n * @params userId\n */\nexport const getRootByUser = (\n\tuserId: string\n): Folder | SearchFolder | Record<string, never> | undefined => {\n\tconst { folders } = useFolderStore.getState();\n\treturn find(folders, (f) => f.name === userId);\n};\n\n/**\n * Returns the root account id for a given folder\n * @param folder a Folder or LinkFolder\n * @returns the root account id or null if the folder is not a link or the root folder\n */\nexport function getRootAccountId(id: string): string | undefined {\n\tconst roots = getRootsArray();\n\tconst root = find(roots, (r) => some(r.id?.split(':'), (v) => id?.split(':')?.includes(v)));\n\n\treturn root?.id;\n}\n\n/**\n * Return a flat array of folder that are children of the given root\n * @param rootId\n */\nexport const useFoldersMapByRoot = (rootId: string): Folders => {\n\tconst root = useRoot(rootId);\n\n\treturn useMemo(() => getFlatChildrenFolders(root?.children ?? []), [root?.children]);\n};\n\n/**\n * Return a flat array of folder that are children of the given root\n * @param rootId\n */\nexport const getFoldersArrayByRoot = (rootId: string): Array<Folder> => {\n\tconst root = getRoot(rootId);\n\tif (!root) {\n\t\treturn [];\n\t}\n\n\treturn Object.values(getFlatChildrenFolders(root.children));\n};\n\n// SEARCHES\nexport const useSearchFolder = (id: string): SearchFolder | undefined =>\n\tuseFolderStore((s) => s.searches?.[id]);\nexport const getSearchFolder = (id: string): SearchFolder | undefined =>\n\tuseFolderStore.getState().searches[id];\nexport const useSearchFolders = (): Searches => useFolderStore((s) => s.searches);\nexport const getSearchFolders = (): Searches => useFolderStore.getState().searches;\n\n// useful hooks to update the value of a folder. Created because we don't receive acl data from notify when we modify folder grants.\n\n/**\n * Returns a callback function to update a specific folder.\n *\n * @returns callback function to update a specific folder\n */\nexport const useUpdateFolder = (): ((id: string, opt: Partial<Folder>) => void) =>\n\tuseFolderStore((s) => s.updateFolder);\n\n/**\n * Returns a callback function to update a specific folder.\n *\n * @returns callback function to update a specific folder\n */\nexport const getUpdateFolder = (): ((id: string, opt: Partial<Folder>) => void) =>\n\tuseFolderStore.getState().updateFolder;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport produce from 'immer';\nimport { create } from 'zustand';\n\nimport { Folder, FolderState } from '../../../types/folder';\nimport { folderWorker } from '../../../worker';\n\n// extra currying as suggested in https://github.com/pmndrs/zustand/blob/main/docs/guides/typescript.md#basic-usage\nexport const useFolderStore = create<FolderState>()((set) => ({\n\tfolders: {},\n\tlinksIdMap: {},\n\tsearches: {},\n\tupdateFolder: (id: string, opt: Partial<Folder>): void => {\n\t\tset(\n\t\t\tproduce((state) => {\n\t\t\t\tif (state?.folders?.[id]) {\n\t\t\t\t\tstate.folders[id] = {\n\t\t\t\t\t\t...state.folders[id],\n\t\t\t\t\t\t...opt\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}));\n\nfolderWorker.onmessage = ({ data }): void => {\n\tuseFolderStore.setState(data);\n};\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { FOLDERS, ROOT_NAME } from '@zextras/carbonio-shell-ui';\nimport { sortBy } from 'lodash';\n\nimport { Folders } from '../../../types/folder';\nimport type { Folder, FolderView, LinkFolder, TreeNode } from '../../../types/folder';\n\nconst hasId = (f: { id: string }, id: string): boolean => f.id.split(':').includes(id);\nconst getOriginalId = (f: { id: string }): string => {\n\tconst parts = f.id.split(':');\n\treturn parts[1] ?? parts[0];\n};\n\n// TODO check if is still used by Calendars or Contacts\nexport const sortFolders = (f: Folder): string => {\n\tconst id = getOriginalId(f);\n\tif (id === FOLDERS.TRASH) {\n\t\treturn FOLDERS.LAST_SYSTEM_FOLDER_POSITION;\n\t}\n\treturn parseInt(id, 10) < 17 ? `   ${id}` : f.name.toLowerCase();\n};\n\nexport const isRoot = (f: Folder): boolean =>\n\tf.id === FOLDERS.USER_ROOT || (f as LinkFolder).oname === ROOT_NAME;\n\nexport const isTrash = (f: { id: string }): boolean => hasId(f, FOLDERS.TRASH);\n\nexport const isNestedInTrash = (item: { absFolderPath?: string }): boolean =>\n\t!!item?.absFolderPath?.includes(`/Trash/`);\n\nexport const isTrashOrNestedInIt = (item: { id: string; absFolderPath?: string }): boolean =>\n\tisTrash(item) || isNestedInTrash(item);\n\nexport const folderViewFilter =\n\t(v: FolderView) =>\n\t(deep?: boolean) =>\n\t(f: Folder): boolean =>\n\t\tf.view === v || !deep || (typeof f.view === 'undefined' && !isRoot(f));\n\nexport const filterNodes = <T>(\n\tchildren: TreeNode<T>[],\n\tf: (deep?: boolean) => (i: TreeNode<T>) => boolean,\n\tsortFunction?: (i: TreeNode<T>) => number | string,\n\tdeep?: boolean\n): TreeNode<T>[] => {\n\tconst childrenSorted = sortFunction ? sortBy(children, sortFunction) : children;\n\treturn childrenSorted\n\t\t.filter(f(deep))\n\t\t.map((i) => ({ ...i, children: filterNodes<TreeNode<T>>(i.children, f, sortFunction, true) }));\n};\n\ntype MapNodesOptions<T, U> = {\n\tmapFunction: (i: TreeNode<T>) => U;\n\tfilterFunction: (deep?: boolean) => (i: TreeNode<T>) => boolean;\n\trecursionKey: keyof U;\n\tsortFunction: (i: TreeNode<T>) => number | string;\n\tdeep: boolean;\n};\nexport const mapNodes = <T, U>(\n\tchildren: TreeNode<T>[],\n\t{ mapFunction, filterFunction, recursionKey, sortFunction, deep }: MapNodesOptions<T, U>\n): U[] =>\n\tsortBy(children, sortFunction).reduce((acc, folder) => {\n\t\tif (filterFunction(deep)(folder)) {\n\t\t\tacc.push({\n\t\t\t\t...mapFunction(folder),\n\t\t\t\t[recursionKey]: mapNodes<TreeNode<T>, U>(folder.children, {\n\t\t\t\t\tmapFunction,\n\t\t\t\t\tfilterFunction,\n\t\t\t\t\trecursionKey,\n\t\t\t\t\tsortFunction,\n\t\t\t\t\tdeep: true\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\treturn acc;\n\t}, [] as U[]);\n\n/**\n * Recursive function that returns a flat map of the children folders\n * @param children\n */\nexport const getFlatChildrenFolders = (children: Array<Folder>): Folders => {\n\tlet destination: Folders = {};\n\tchildren.forEach((child) => {\n\t\tdestination[child.id] = child;\n\t\tif (child.children) {\n\t\t\tdestination = { ...destination, ...getFlatChildrenFolders(child.children) };\n\t\t}\n\t});\n\n\treturn destination;\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexport const folderWorker = new Worker(new URL('./folder', import.meta.url));\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const CHIP_DISPLAY_NAME_VALUES = {\n\tlabel: 'label',\n\temail: 'email'\n} as const;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { KebabToCamelCase } from '../types/utils';\n\nexport const CONTACTS_ROUTE = 'contacts';\nexport const CONTACTS_APP_ID = 'carbonio-contacts-ui';\n\nexport const ACTION_IDS = {\n\teditDL: 'dl-edit-action',\n\texpandDL: 'dl-expand-action',\n\tsendEmail: 'send-email-action',\n\tsendEmailCG: 'cg-send-email-action',\n\tdeleteCG: 'cg-delete-action',\n\teditCG: 'cg-edit-action',\n\tcopyToClipboard: 'copy-to-clipboard-action',\n\taddSharedAddressBooks: 'shares-add-action',\n\ttrashAddressBook: 'trash-address-book-action',\n\tdeleteAddressBook: 'delete-address-book-action',\n\tcreateAddressBook: 'create-address-book-action',\n\tmoveAddressBook: 'move-address-book-action',\n\teditAddressBook: 'edit-address-book-action',\n\temptyAddressBook: 'empty-address-book-action',\n\temptyTrash: 'empty-trash-action',\n\tremoveAddressBookLink: 'remove-address-book-link-action',\n\texportAddressBook: 'export-address-book-action',\n\timportContacts: 'import-contacts-action',\n\tshowShareInfo: 'show-share-info-action',\n\tmoveContacts: 'move-contacts-action',\n\trestoreContacts: 'restore-contacts-action',\n\ttrashContacts: 'trash-contacts-action',\n\texportContact: 'export-contact-action'\n} as const;\n\nexport const NEW_CONTACT_GROUP_BOARD_ID = 'new-contact-group-board';\nexport const EDIT_CONTACT_GROUP_BOARD_ID = 'edit-contact-group-board';\nexport const EDIT_DL_BOARD_ID = 'edit-dl-board';\n\nexport const CONTACT_GROUP_NAME_MAX_LENGTH = 256;\nexport const DL_NAME_MAX_LENGTH = 256;\nexport const GROUPS_ROUTE = 'groups';\nexport const ROUTES = {\n\tmainRoute: '/:route',\n\tcontactGroups: '/:id?',\n\tdistributionLists: '/:filter?/:id?'\n} as const;\n\nexport type RouteParams = {\n\troute?: 'contact-groups' | 'distribution-lists';\n\tid?: string;\n\tfilter?: 'member' | 'manager';\n};\n\nexport const ROUTES_INTERNAL_PARAMS = {\n\troute: {\n\t\tcontactGroups: 'contact-groups',\n\t\tdistributionLists: 'distribution-lists'\n\t},\n\tfilter: {\n\t\tmember: 'member',\n\t\tmanager: 'manager'\n\t}\n} satisfies Partial<{\n\t[K in keyof RouteParams]: Record<\n\t\tKebabToCamelCase<NonNullable<RouteParams[K]>>,\n\t\tNonNullable<RouteParams[K]>\n\t>;\n}>;\n\nexport const DISPLAYER_WIDTH = '60%';\nexport const LIST_WIDTH = '40%';\nexport const LIST_ITEM_HEIGHT = '4rem';\nexport const FIND_CONTACT_GROUP_LIMIT = 100;\nexport const DL_MEMBERS_LOAD_LIMIT = 100;\n\nexport const DL_TABS = {\n\tdetails: 'dl-details-tab',\n\tmembers: 'dl-members-tab',\n\tmanagers: 'dl-managers-tab'\n} as const;\n\nexport const LOCAL_STORAGES = {\n\tEXPANDED_ADDRESSBOOKS: 'open_address_books'\n};\n\nexport const TIMEOUTS = {\n\tdefaultSnackbar: 3000,\n\ttrashAddressBook: 5000\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useSnackbar } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\nimport { DistributionListMembersPage } from '../model/distribution-list';\nimport { apiClient } from '../network/api-client';\nimport { StoredDistributionList, useDistributionListsStore } from '../store/distribution-lists';\n\ntype UseGetDistributionListMembersReturnType = Partial<DistributionListMembersPage> & {\n\tfindMore: (limit?: number) => Promise<DistributionListMembersPage | undefined>;\n\tloading: boolean;\n};\n\nexport const useGetDistributionListMembers = (\n\temail: string,\n\t{\n\t\tlimit: initialLimit,\n\t\tskip\n\t}: {\n\t\tlimit?: number;\n\t\tskip?: boolean;\n\t} = {}\n): UseGetDistributionListMembersReturnType => {\n\tconst [t] = useTranslation();\n\tconst createSnackbar = useSnackbar();\n\tconst { distributionLists, upsertDistributionList } = useDistributionListsStore();\n\tconst offsetRef = useRef<number>(0);\n\tconst [innerDistributionListMembersPage, setInnerDistributionListMembersPage] = useState<\n\t\tDistributionListMembersPage | undefined\n\t>();\n\tconst [loading, setLoading] = useState(false);\n\n\tconst findStoredMembersPage = useCallback(\n\t\t(items: Array<StoredDistributionList>) => items.find((item) => item.email === email)?.members,\n\t\t[email]\n\t);\n\n\tconst storedDistributionListMembersPage = useMemo(\n\t\t() => distributionLists && findStoredMembersPage(distributionLists),\n\t\t[distributionLists, findStoredMembersPage]\n\t);\n\n\tconst distributionListMembersPage = useMemo(\n\t\t() => storedDistributionListMembersPage ?? innerDistributionListMembersPage,\n\t\t[storedDistributionListMembersPage, innerDistributionListMembersPage]\n\t);\n\n\tconst updateDistributionListMembersPage = useCallback(\n\t\t(newState: DistributionListMembersPage, offset: number) => {\n\t\t\toffsetRef.current = offset + newState.members.length;\n\t\t\tsetInnerDistributionListMembersPage((prevState) => ({\n\t\t\t\tmembers:\n\t\t\t\t\toffset === 0 ? newState.members : [...(prevState?.members ?? []), ...newState.members],\n\t\t\t\tmore: newState.more,\n\t\t\t\ttotal: newState.total\n\t\t\t}));\n\t\t\tconst storedMembers = findStoredMembersPage(\n\t\t\t\tuseDistributionListsStore.getState().distributionLists ?? []\n\t\t\t);\n\t\t\tupsertDistributionList({\n\t\t\t\temail,\n\t\t\t\tmembers: {\n\t\t\t\t\tmembers:\n\t\t\t\t\t\toffset === 0\n\t\t\t\t\t\t\t? newState.members\n\t\t\t\t\t\t\t: [...(storedMembers?.members ?? []), ...newState.members],\n\t\t\t\t\tmore: newState.more,\n\t\t\t\t\ttotal: newState.total\n\t\t\t\t},\n\t\t\t\tcanRequireMembers: true\n\t\t\t});\n\t\t},\n\t\t[email, findStoredMembersPage, upsertDistributionList]\n\t);\n\n\tconst loadMembers = useCallback(\n\t\t(offset: number, limit?: number): Promise<DistributionListMembersPage | undefined> => {\n\t\t\tif (email) {\n\t\t\t\tsetLoading(true);\n\t\t\t\treturn apiClient\n\t\t\t\t\t.getDistributionListMembers(email, { offset, limit })\n\t\t\t\t\t.then((newMembersPage) => {\n\t\t\t\t\t\tupdateDistributionListMembersPage(newMembersPage, offset);\n\t\t\t\t\t\treturn newMembersPage;\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\t\tkey: new Date().toDateString(),\n\t\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\t\thideButton: true\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t})\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tsetLoading(false);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\treturn Promise.reject(\n\t\t\t\tnew Error(`Cannot load members of distribution list. Invalid email: \"${email}\"`)\n\t\t\t);\n\t\t},\n\t\t[createSnackbar, email, t, updateDistributionListMembersPage]\n\t);\n\n\tconst shouldLoadFirstPage = useMemo(() => {\n\t\tconst dataIsPartial =\n\t\t\tstoredDistributionListMembersPage === undefined ||\n\t\t\t(initialLimit !== undefined &&\n\t\t\t\tinitialLimit > 0 &&\n\t\t\t\tstoredDistributionListMembersPage.members.length < initialLimit &&\n\t\t\t\tstoredDistributionListMembersPage.more);\n\n\t\treturn !skip && dataIsPartial;\n\t}, [initialLimit, skip, storedDistributionListMembersPage]);\n\n\tuseEffect(() => {\n\t\tif (shouldLoadFirstPage) {\n\t\t\tloadMembers(0, initialLimit);\n\t\t}\n\t}, [loadMembers, initialLimit, shouldLoadFirstPage]);\n\n\tconst findMore = useCallback<UseGetDistributionListMembersReturnType['findMore']>(\n\t\t(limit = initialLimit) => {\n\t\t\tif (distributionListMembersPage?.more === false) {\n\t\t\t\tthrow new Error('No more members available');\n\t\t\t}\n\t\t\treturn loadMembers(offsetRef.current, limit);\n\t\t},\n\t\t[distributionListMembersPage?.more, loadMembers, initialLimit]\n\t);\n\n\treturn {\n\t\tmembers: distributionListMembersPage?.members,\n\t\tmore: distributionListMembersPage?.more,\n\t\ttotal: distributionListMembersPage?.total,\n\t\tfindMore,\n\t\tloading\n\t};\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { useSnackbar } from '@zextras/carbonio-design-system';\nimport { some } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport { DistributionList } from '../model/distribution-list';\nimport { apiClient } from '../network/api-client';\nimport { StoredDistributionList, useDistributionListsStore } from '../store/distribution-lists';\nimport { OptionalPropertyOf } from '../types/utils';\n\nexport const REQUIRED_FIELDS: Array<OptionalPropertyOf<StoredDistributionList>> = [\n\t'id',\n\t'displayName',\n\t'owners',\n\t'description',\n\t'isMember',\n\t'isOwner'\n];\n\nexport const useGetDistributionList = (\n\t{ id, email }: Partial<Pick<DistributionList, 'id' | 'email'>>,\n\t{ skip }: { skip?: boolean } = {}\n): {\n\tdistributionList: DistributionList | undefined;\n\tloading: boolean;\n} => {\n\tconst [t] = useTranslation();\n\tconst createSnackbar = useSnackbar();\n\tconst { distributionLists, upsertDistributionList } = useDistributionListsStore();\n\tconst [loading, setLoading] = useState(false);\n\n\tconst storedItem = useMemo(\n\t\t() =>\n\t\t\tdistributionLists?.find(\n\t\t\t\t(dl): dl is DistributionList => (dl.id === id || dl.email === email) && dl.id !== undefined\n\t\t\t),\n\t\t[distributionLists, email, id]\n\t);\n\n\tconst [distributionList, setDistributionList] = useState<DistributionList | undefined>();\n\n\tconst shouldLoadData = useMemo(\n\t\t() =>\n\t\t\tstoredItem === undefined || some(REQUIRED_FIELDS, (field) => storedItem[field] === undefined),\n\t\t[storedItem]\n\t);\n\n\tuseEffect(() => {\n\t\tif (shouldLoadData && !skip) {\n\t\t\tsetLoading(true);\n\t\t\tapiClient\n\t\t\t\t.getDistributionList({ id, email })\n\t\t\t\t.then((dl) => {\n\t\t\t\t\tif (dl) {\n\t\t\t\t\t\tsetDistributionList(dl);\n\t\t\t\t\t\tupsertDistributionList(dl);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tcreateSnackbar({\n\t\t\t\t\t\tkey: new Date().toDateString(),\n\t\t\t\t\t\treplace: true,\n\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\tlabel: t('label.error_try_again', 'Something went wrong, please try again'),\n\t\t\t\t\t\tautoHideTimeout: 3000,\n\t\t\t\t\t\thideButton: true\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t});\n\t\t}\n\t}, [createSnackbar, email, id, shouldLoadData, skip, t, upsertDistributionList]);\n\n\treturn { distributionList: storedItem ?? distributionList, loading };\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { useCallback } from 'react';\n\nimport { usePushHistoryCallback, useReplaceHistoryCallback } from '@zextras/carbonio-shell-ui';\n\nimport { GROUPS_ROUTE } from '../constants';\n\nexport type UseNavigationReturnType = {\n\tnavigateTo: (path: string, options?: { replace?: boolean }) => void;\n};\n\nexport const useNavigation = (): UseNavigationReturnType => {\n\tconst pushHistory = usePushHistoryCallback();\n\tconst replaceHistory = useReplaceHistoryCallback();\n\n\tconst navigateTo = useCallback<UseNavigationReturnType['navigateTo']>(\n\t\t(path, options) => {\n\t\t\tif (options?.replace) {\n\t\t\t\treplaceHistory({\n\t\t\t\t\troute: GROUPS_ROUTE,\n\t\t\t\t\tpath\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpushHistory({\n\t\t\t\t\troute: GROUPS_ROUTE,\n\t\t\t\t\tpath\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[pushHistory, replaceHistory]\n\t);\n\n\treturn { navigateTo };\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { AppDispatch, RootState } from '../store/redux';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { ReactElement, useCallback, useMemo, useState } from 'react';\n\nimport {\n\tChip,\n\tDropdown,\n\tButton,\n\tContainer,\n\ttype ChipAction,\n\ttype ChipInputProps\n} from '@zextras/carbonio-design-system';\nimport { debounce, DebouncedFuncLeading, filter, map, reduce, some } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { ACTION_IDS, DL_MEMBERS_LOAD_LIMIT } from '../../constants';\nimport { CHIP_DISPLAY_NAME_VALUES } from '../../constants/contact-input';\nimport { useGetDistributionList } from '../../hooks/use-get-distribution-list';\nimport { useGetDistributionListMembers } from '../../hooks/use-get-distribution-list-members';\nimport type { DistributionListMembersPage } from '../../model/distribution-list';\nimport type {\n\tContactChipAction,\n\tContactInputChipDisplayName,\n\tContactInputDistributionList,\n\tContactInputItem,\n\tContactInputOnChange,\n\tContactInputValue,\n\tMakeRequired\n} from '../types/integrations';\n\ntype CustomChipProps = React.ComponentPropsWithoutRef<\n\tNonNullable<ChipInputProps['ChipComponent']>\n> & {\n\temail?: string;\n\tisGroup?: boolean;\n};\n\ntype DLCustomChipProps = CustomChipProps & {\n\tcontactInputOnChange: ContactInputOnChange;\n\tcontactInputValue: ContactInputValue;\n};\n\ntype ContactInputCustomChipComponentProps = DLCustomChipProps & {\n\tchipDisplayName?: ContactInputChipDisplayName;\n\tcontactActions?: Array<ContactChipAction>;\n};\n\nconst StyledChip = styled(Chip)`\n\tcursor: default;\n\t&:hover {\n\t\tbackground: ${({ theme }): string => theme.palette.gray3.regular};\n\t}\n`;\n\nconst DISTRIBUTION_ITEM = {\n\tSELECT_ALL: 'dl-select-all',\n\tMORE_ITEM: 'dl-get-more'\n};\n\nexport const isChipItemDistributionList = (\n\tcontact: Pick<ContactInputItem, 'email' | 'isGroup'>\n): contact is ContactInputDistributionList => (contact.isGroup && !!contact.email) ?? false;\n\nconst debounceUserInput = <T extends (...args: unknown[]) => unknown>(\n\tfn: T\n): DebouncedFuncLeading<T> =>\n\tdebounce(fn, 500, {\n\t\ttrailing: false,\n\t\tleading: true\n\t});\n\nconst DistributionListChip = ({\n\tid,\n\tlabel,\n\temail,\n\tcontactInputOnChange,\n\tcontactInputValue,\n\tactions: propActions,\n\t...rest\n}: MakeRequired<DLCustomChipProps, 'email'>): React.JSX.Element => {\n\tconst [t] = useTranslation();\n\tconst [open, setOpen] = useState(false);\n\n\tconst {\n\t\tmembers,\n\t\tmore,\n\t\ttotal,\n\t\tfindMore: loadMembers\n\t} = useGetDistributionListMembers(email, {\n\t\tlimit: DL_MEMBERS_LOAD_LIMIT,\n\t\tskip: !open\n\t});\n\n\tconst showMoreLabel = t('label.show_more', 'Show more');\n\n\tconst selectAllItemLabel = t('label.select_all_addresses', {\n\t\tcount: total,\n\t\tdefaultValue_one: `Select address`,\n\t\tdefaultValue_other: `Select all {{count}} addresses`\n\t});\n\n\tconst memberDropdownItems = useMemo(\n\t\t() =>\n\t\t\tmap(members, (item) => ({\n\t\t\t\tid: item,\n\t\t\t\tlabel: item,\n\t\t\t\tkeepOpen: true,\n\t\t\t\ticon: 'PersonOutline',\n\t\t\t\titemIconSize: 'large'\n\t\t\t})),\n\t\t[members]\n\t);\n\n\tconst updateContactInputValue = useCallback(\n\t\t(newItems: DistributionListMembersPage['members']) => {\n\t\t\tconst newValue = map(newItems, (item) => ({\n\t\t\t\tlabel: item,\n\t\t\t\tvalue: item,\n\t\t\t\tid: item,\n\t\t\t\temail: item\n\t\t\t}));\n\n\t\t\tcontactInputOnChange?.([\n\t\t\t\t...filter(contactInputValue, (value) => value.id !== id),\n\t\t\t\t...newValue\n\t\t\t]);\n\t\t},\n\t\t[contactInputOnChange, contactInputValue, id]\n\t);\n\n\tconst onSelectAllClick = useCallback(() => {\n\t\tif (members !== undefined && members.length > 0) {\n\t\t\tif (more) {\n\t\t\t\tloadMembers(0).then((response) => {\n\t\t\t\t\tif (response) {\n\t\t\t\t\t\tupdateContactInputValue([...members, ...response.members]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tupdateContactInputValue(members);\n\t\t\t}\n\t\t}\n\t}, [more, loadMembers, updateContactInputValue, members]);\n\n\tconst selectAllButton = useMemo(\n\t\t() => ({\n\t\t\tid: DISTRIBUTION_ITEM.SELECT_ALL,\n\t\t\tlabel: selectAllItemLabel,\n\t\t\ttooltipLabel: selectAllItemLabel,\n\t\t\tkeepOpen: false,\n\t\t\tcustomComponent: (\n\t\t\t\t<Container width=\"fill\" mainAlignment=\"center\" orientation=\"horizontal\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tshape=\"regular\"\n\t\t\t\t\t\twidth=\"fill\"\n\t\t\t\t\t\tlabel={selectAllItemLabel}\n\t\t\t\t\t\tonClick={debounceUserInput(onSelectAllClick)}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t)\n\t\t}),\n\t\t[onSelectAllClick, selectAllItemLabel]\n\t);\n\n\tconst onShowMore = useMemo(() => debounceUserInput(() => loadMembers()), [loadMembers]);\n\n\tconst moreButton = useMemo(\n\t\t() => ({\n\t\t\tid: DISTRIBUTION_ITEM.MORE_ITEM,\n\t\t\tlabel: showMoreLabel,\n\t\t\ttooltipLabel: showMoreLabel,\n\t\t\tkeepOpen: true,\n\t\t\tcustomComponent: (\n\t\t\t\t<Container width=\"fill\" mainAlignment=\"center\" orientation=\"horizontal\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\ttype=\"outlined\"\n\t\t\t\t\t\tshape=\"regular\"\n\t\t\t\t\t\twidth=\"fill\"\n\t\t\t\t\t\tlabel={showMoreLabel}\n\t\t\t\t\t\tonClick={onShowMore}\n\t\t\t\t\t/>\n\t\t\t\t</Container>\n\t\t\t)\n\t\t}),\n\t\t[onShowMore, showMoreLabel]\n\t);\n\n\tconst items = useMemo(() => {\n\t\tif (more) {\n\t\t\treturn [selectAllButton, ...memberDropdownItems, moreButton];\n\t\t}\n\t\treturn [selectAllButton, ...memberDropdownItems];\n\t}, [memberDropdownItems, more, moreButton, selectAllButton]);\n\n\tconst expandDLAction = useCallback(() => {\n\t\tsetOpen(true);\n\t}, []);\n\n\tconst collapseDLAction = useCallback(() => {\n\t\tsetOpen(false);\n\t}, []);\n\n\tconst chipActions = useMemo((): ChipAction[] => {\n\t\tconst actions: ChipAction[] = [...(propActions ?? [])];\n\t\tactions.push({\n\t\t\tid: ACTION_IDS.expandDL,\n\t\t\tlabel: t('expand_distribution_list', 'Expand address list'),\n\t\t\ttype: 'button',\n\t\t\ticon: open ? 'ChevronUpOutline' : 'ChevronDownOutline',\n\t\t\tonClick: open ? collapseDLAction : expandDLAction\n\t\t});\n\t\treturn actions;\n\t}, [collapseDLAction, expandDLAction, open, propActions, t]);\n\n\tconst onChipClick = useCallback<React.MouseEventHandler>((e) => {\n\t\te.stopPropagation();\n\t}, []);\n\n\treturn (\n\t\t<Dropdown\n\t\t\titems={items}\n\t\t\tplacement=\"bottom\"\n\t\t\tforceOpen={open}\n\t\t\tdisableAutoFocus\n\t\t\twidth={'18.75rem'}\n\t\t\tonClose={collapseDLAction}\n\t\t>\n\t\t\t<div>\n\t\t\t\t<StyledChip\n\t\t\t\t\t{...rest}\n\t\t\t\t\tid={id}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tbackground={'gray3'}\n\t\t\t\t\tcolor=\"text\"\n\t\t\t\t\tdata-testid={'distribution-list-chip'}\n\t\t\t\t\thasAvatar\n\t\t\t\t\tshape=\"regular\"\n\t\t\t\t\tclosable\n\t\t\t\t\tonClick={onChipClick}\n\t\t\t\t\tactions={chipActions}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Dropdown>\n\t);\n};\n\nexport const ContactInputCustomChipComponent = ({\n\temail,\n\tisGroup = false,\n\tlabel,\n\tchipDisplayName = CHIP_DISPLAY_NAME_VALUES.label,\n\tcontactActions,\n\tactions,\n\t...rest\n}: ContactInputCustomChipComponentProps): ReactElement => {\n\tconst contact = useMemo(() => ({ email, isGroup }), [email, isGroup]);\n\tconst { distributionList } = useGetDistributionList(\n\t\t{ email },\n\t\t{ skip: !isChipItemDistributionList(contact) }\n\t);\n\tconst chipLabel = useMemo(() => {\n\t\tif (label && chipDisplayName === CHIP_DISPLAY_NAME_VALUES.label) {\n\t\t\treturn label;\n\t\t}\n\t\tif (email && chipDisplayName === CHIP_DISPLAY_NAME_VALUES.email) {\n\t\t\treturn email;\n\t\t}\n\t\treturn label || email || '';\n\t}, [chipDisplayName, email, label]);\n\n\tconst chipActions = useMemo(\n\t\t() =>\n\t\t\treduce<ContactChipAction, Array<ChipAction>>(\n\t\t\t\tcontactActions,\n\t\t\t\t(result, contactAction) => {\n\t\t\t\t\tif (some(result, (action) => contactAction.id === action.id)) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (contactAction.isVisible(distributionList ?? contact)) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t...contactAction,\n\t\t\t\t\t\t\tonClick: (): void => {\n\t\t\t\t\t\t\t\tcontactAction.onClick(distributionList ?? contact);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t[...(actions ?? [])]\n\t\t\t),\n\t\t[actions, contact, contactActions, distributionList]\n\t);\n\n\tif (!isChipItemDistributionList(contact)) {\n\t\treturn <Chip {...rest} label={chipLabel} data-testid={'default-chip'} actions={chipActions} />;\n\t}\n\n\treturn (\n\t\t<DistributionListChip\n\t\t\t{...rest}\n\t\t\tlabel={chipLabel}\n\t\t\temail={contact.email}\n\t\t\tisGroup={contact.isGroup}\n\t\t\tactions={chipActions}\n\t\t/>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useEffect, useRef, useState, ReactElement, FC, useMemo } from 'react';\n\nimport {\n\tAvatar,\n\tChipInput,\n\tContainer,\n\tRow,\n\tText,\n\ttype ChipItem,\n\ttype ChipInputProps,\n\ttype DropdownItem,\n\tuseCombinedRefs\n} from '@zextras/carbonio-design-system';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { filter, find, map, trim, forEach, reject, uniqBy, noop } from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport styled, { type DefaultTheme } from 'styled-components';\n\nimport { ContactInputCustomChipComponent } from './contact-input-custom-chip-component';\nimport { CHIP_DISPLAY_NAME_VALUES } from '../../constants/contact-input';\nimport { StoreProvider } from '../store/redux';\nimport type { FullAutocompleteRequest, FullAutocompleteResponse, Match } from '../types/contact';\nimport type {\n\tContactChipAction,\n\tContactInputChipDisplayName,\n\tContactInputGroup,\n\tContactInputItem,\n\tContactInputOnChange,\n\tContactInputValue\n} from '../types/integrations';\nimport type { GetContactsRequest, GetContactsResponse } from '../types/soap';\n\nconst emailRegex = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/;\n\nfunction isContactGroup(contact: {\n\tisGroup?: boolean;\n\tdisplay?: string | null;\n\temail?: string;\n}): contact is ContactInputGroup {\n\treturn (\n\t\t(contact?.isGroup &&\n\t\t\tcontact?.display !== undefined &&\n\t\t\tcontact?.display !== null &&\n\t\t\t!contact?.email) ??\n\t\tfalse\n\t);\n}\n\nconst getChipLabel = (\n\tcontact: Pick<\n\t\tContactInputItem,\n\t\t'firstName' | 'middleName' | 'lastName' | 'email' | 'address' | 'display' | 'fullName' | 'name'\n\t>\n): string => {\n\tif (contact.firstName ?? contact.middleName ?? contact.lastName) {\n\t\treturn trim(`${contact.firstName ?? ''} ${contact.middleName ?? ''} ${contact.lastName ?? ''}`);\n\t}\n\n\tconst email = typeof contact.email === 'string' ? contact.email : undefined;\n\tconst address = typeof contact.address === 'string' ? contact.address : undefined;\n\n\treturn contact.fullName ?? email ?? contact.name ?? address ?? contact.display ?? '';\n};\n\nconst Hint = ({ contact }: { contact: ContactInputItem }): ReactElement => {\n\tconst label = getChipLabel(contact);\n\treturn (\n\t\t<Container\n\t\t\torientation=\"horizontal\"\n\t\t\tmainAlignment=\"flex-start\"\n\t\t\tcrossAlignment=\"center\"\n\t\t\tminWidth=\"16rem\"\n\t\t\tminHeight=\"2rem\"\n\t\t>\n\t\t\t<Avatar label={label} />\n\t\t\t<Container orientation=\"vertical\" crossAlignment=\"flex-start\" padding={{ left: 'small' }}>\n\t\t\t\t{!isContactGroup(contact) ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Row takeAvailableSpace mainAlignment=\"flex-start\">\n\t\t\t\t\t\t\t<Text size=\"large\">{label}</Text>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t<Row takeAvailableSpace mainAlignment=\"flex-start\">\n\t\t\t\t\t\t\t<Text color=\"secondary\">{contact.email}</Text>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<Text size=\"large\">{label}</Text>\n\t\t\t\t)}\n\t\t\t</Container>\n\t\t</Container>\n\t);\n};\n\ninterface SkeletonTileProps {\n\twidth?: string;\n\theight?: string;\n\tradius?: string;\n\ttheme: DefaultTheme;\n}\n\nconst SkeletonTile = styled.div<SkeletonTileProps>`\n\twidth: ${({ width }): string => width ?? '1rem'};\n\tmax-width: ${({ width }): string => width ?? '1rem'};\n\tmin-width: ${({ width }): string => width ?? '1rem'};\n\theight: ${({ height }): string => height ?? '1rem'};\n\tmax-height: ${({ height }): string => height ?? '1rem'};\n\tmin-height: ${({ height }): string => height ?? '1rem'};\n\tborder-radius: ${({ radius }): string => radius ?? '0.125rem'};\n\tbackground: ${({ theme }): string => theme.palette.gray2.regular};\n`;\nconst Loader = (): ReactElement => (\n\t<Container\n\t\torientation=\"horizontal\"\n\t\tmainAlignment=\"flex-start\"\n\t\tcrossAlignment=\"center\"\n\t\tminWidth=\"16rem\"\n\t\tminHeight=\"2rem\"\n\t>\n\t\t<SkeletonTile radius=\"50%\" width=\"2rem\" height=\"2rem\" />\n\t\t<Container orientation=\"vertical\" crossAlignment=\"flex-start\" padding={{ left: 'small' }}>\n\t\t\t<SkeletonTile\n\t\t\t\tradius=\"0.25rem\"\n\t\t\t\twidth={`${Math.random() * 9.375 + 4}rem`}\n\t\t\t\theight=\"0.875rem\"\n\t\t\t\tstyle={{ marginBottom: '0.25rem' }}\n\t\t\t/>\n\t\t\t<SkeletonTile radius=\"0.25rem\" width={`${Math.random() * 9.375 + 4}rem`} height=\"0.75rem\" />\n\t\t</Container>\n\t</Container>\n);\n\nexport type ContactInputProps = Pick<\n\tChipInputProps,\n\t| 'icon'\n\t| 'iconAction'\n\t| 'placeholder'\n\t| 'background'\n\t| 'iconDisabled'\n\t| 'description'\n\t| 'hasError'\n\t| 'inputRef'\n> & {\n\tonChange?: ContactInputOnChange;\n\tdefaultValue: Array<ContactInputItem>;\n\tdragAndDropEnabled?: boolean;\n\torderedAccountIds?: Array<string>;\n\tchipDisplayName?: ContactInputChipDisplayName;\n\tcontactActions?: Array<ContactChipAction>;\n};\n\nconst ContactInputCore: FC<ContactInputProps> = ({\n\tonChange,\n\tdefaultValue,\n\tplaceholder,\n\tbackground = 'gray5',\n\tdragAndDropEnabled = false,\n\tchipDisplayName = CHIP_DISPLAY_NAME_VALUES.label,\n\torderedAccountIds = [],\n\tcontactActions,\n\tinputRef: propsInputRef = null,\n\t...rest\n}) => {\n\tconst [defaults, setDefaults] = useState<ContactInputValue>([]);\n\tconst [options, setOptions] = useState<Array<DropdownItem & { value?: ContactInputItem }>>([]);\n\tconst [idToRemove, setIdToRemove] = useState('');\n\tconst [t] = useTranslation();\n\tconst inputRef = useCombinedRefs(propsInputRef);\n\tconst emptyDraggedChip = useMemo(() => ({ id: '', email: '', dragStartRef: null }), []);\n\tconst draggedChip = useRef<{\n\t\tid?: string;\n\t\temail?: string;\n\t\tdragStartRef: HTMLInputElement | null;\n\t}>(emptyDraggedChip);\n\tconst isSameElement = useRef(false);\n\n\tconst buildDragStartHandler = useCallback(\n\t\t(chip) => (ev: React.DragEvent) => {\n\t\t\tev.dataTransfer.setData('contact', JSON.stringify(chip));\n\t\t\tev.dataTransfer.dropEffect = 'move';\n\t\t\tdraggedChip.current = {\n\t\t\t\tid: chip.id,\n\t\t\t\temail: chip.email ?? chip.address,\n\t\t\t\tdragStartRef: inputRef.current\n\t\t\t};\n\t\t},\n\t\t[inputRef]\n\t);\n\tuseEffect(() => {\n\t\tsetDefaults(\n\t\t\tmap(filter(defaultValue, (c) => c.id !== idToRemove) ?? [], (obj) => ({\n\t\t\t\t...obj,\n\t\t\t\tlabel: getChipLabel(obj),\n\t\t\t\tdraggable: dragAndDropEnabled,\n\t\t\t\tonDragStart: dragAndDropEnabled ? buildDragStartHandler(obj) : noop\n\t\t\t}))\n\t\t);\n\t}, [buildDragStartHandler, defaultValue, dragAndDropEnabled, idToRemove]);\n\n\tconst buildDraggableChip = useCallback(\n\t\t(chip): ChipItem => ({\n\t\t\t...chip,\n\t\t\tdraggable: true,\n\t\t\tonDragStart: buildDragStartHandler(chip)\n\t\t}),\n\t\t[buildDragStartHandler]\n\t);\n\n\tconst isValidEmail = useCallback((email) => emailRegex.test(email), []);\n\n\tconst editChip = useCallback(\n\t\t(text, id) => {\n\t\t\tsetIdToRemove(id);\n\t\t\tif (inputRef?.current) {\n\t\t\t\tinputRef.current.value = text;\n\t\t\t\tinputRef.current.style.width = inputRef.current.value\n\t\t\t\t\t? `${inputRef.current.scrollWidth}px`\n\t\t\t\t\t: '';\n\t\t\t}\n\t\t},\n\t\t[inputRef]\n\t);\n\n\tconst onInputType = useCallback<NonNullable<ChipInputProps['onInputType']>>(\n\t\t({ key, textContent }) => {\n\t\t\tif (key === 'Enter') {\n\t\t\t\tif (inputRef?.current) {\n\t\t\t\t\t// FIXME: innerText does not contain new line chars at this point\n\t\t\t\t\tinputRef.current.innerText = inputRef.current.innerText?.replaceAll('\\n', '');\n\t\t\t\t}\n\t\t\t\tif (options.length > 0 && !find(options, { id: 'loading' })) {\n\t\t\t\t\tonChange?.([\n\t\t\t\t\t\t...defaults,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...options[0].value\n\t\t\t\t\t\t}\n\t\t\t\t\t]);\n\t\t\t\t\tif (inputRef.current) {\n\t\t\t\t\t\tinputRef.current.innerText = '';\n\t\t\t\t\t}\n\t\t\t\t\tsetOptions([]);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst valueToAdd = inputRef.current?.innerText.replaceAll('\\n', '');\n\t\t\t\tconst id = Date.now().toString();\n\t\t\t\tconst chip: ContactInputItem = {\n\t\t\t\t\tid,\n\t\t\t\t\tlabel: valueToAdd,\n\t\t\t\t\terror: !isValidEmail(valueToAdd),\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'action1',\n\t\t\t\t\t\t\tlabel: isValidEmail(valueToAdd)\n\t\t\t\t\t\t\t\t? t('label.edit_email', 'Edit E-mail')\n\t\t\t\t\t\t\t\t: t('label.edit_invalid_email', 'E-mail is invalid, click to edit it'),\n\t\t\t\t\t\t\ticon: 'EditOutline',\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tonClick: () => editChip(valueToAdd, id)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t\tif (!isValidEmail(valueToAdd)) {\n\t\t\t\t\tchip.avatarIcon = 'AlertCircleOutline';\n\t\t\t\t}\n\t\t\t\tif (valueToAdd !== '') {\n\t\t\t\t\tonChange?.([...defaults, { ...chip }]);\n\t\t\t\t}\n\t\t\t\tif (inputRef?.current) {\n\t\t\t\t\tinputRef.current.innerText = '';\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (textContent && textContent !== '') {\n\t\t\t\tsetOptions([\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'loading',\n\t\t\t\t\t\tlabel: 'loading',\n\t\t\t\t\t\tcustomComponent: <Loader />\n\t\t\t\t\t}\n\t\t\t\t]);\n\t\t\t\tsoapFetch<FullAutocompleteRequest, FullAutocompleteResponse>('FullAutocomplete', {\n\t\t\t\t\t...(orderedAccountIds?.length > 0 && {\n\t\t\t\t\t\torderedAccountIds: orderedAccountIds.toString()\n\t\t\t\t\t}),\n\t\t\t\t\tAutoCompleteRequest: {\n\t\t\t\t\t\tname: textContent,\n\t\t\t\t\t\tincludeGal: 1\n\t\t\t\t\t},\n\t\t\t\t\t_jsns: 'urn:zimbraMail'\n\t\t\t\t})\n\t\t\t\t\t.then((autoCompleteResult) =>\n\t\t\t\t\t\tmap<Match, Match>(autoCompleteResult.match, (m) => ({\n\t\t\t\t\t\t\t...m,\n\t\t\t\t\t\t\temail: isContactGroup(m)\n\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t: emailRegex.exec(m.email ?? '')?.[0]?.slice(1, -1)\n\t\t\t\t\t\t}))\n\t\t\t\t\t)\n\t\t\t\t\t.then((remoteResults) => {\n\t\t\t\t\t\tconst normRemoteResults = map(remoteResults, (result) => ({\n\t\t\t\t\t\t\temail: result.email,\n\t\t\t\t\t\t\tfirstName: result.first,\n\t\t\t\t\t\t\tlastName: result.last,\n\t\t\t\t\t\t\tcompany: result.company,\n\t\t\t\t\t\t\tfullName: result.full,\n\t\t\t\t\t\t\tdisplay: result.display,\n\t\t\t\t\t\t\tisGroup: result.isGroup,\n\t\t\t\t\t\t\tid: result.id,\n\t\t\t\t\t\t\tl: result.l,\n\t\t\t\t\t\t\texp: result.exp,\n\t\t\t\t\t\t\tlabel: getChipLabel(result)\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tsetOptions(\n\t\t\t\t\t\t\tmap(normRemoteResults, (contact) => ({\n\t\t\t\t\t\t\t\tlabel: contact?.label ?? getChipLabel(contact),\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tid: `${contact.id} ${contact.email}`,\n\t\t\t\t\t\t\t\t\temail: contact?.email,\n\t\t\t\t\t\t\t\t\tfirstName: contact?.firstName,\n\t\t\t\t\t\t\t\t\tlastName: contact?.lastName,\n\t\t\t\t\t\t\t\t\tcompany: contact?.company,\n\t\t\t\t\t\t\t\t\tfullName: contact?.fullName,\n\t\t\t\t\t\t\t\t\tdisplay: contact?.display,\n\t\t\t\t\t\t\t\t\tisGroup: contact?.isGroup,\n\t\t\t\t\t\t\t\t\tgroupId: contact?.id,\n\t\t\t\t\t\t\t\t\tlabel: contact?.label ?? getChipLabel(contact)\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcustomComponent: <Hint contact={contact} />,\n\t\t\t\t\t\t\t\tid: `${contact.id} ${contact.email}`\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tsetOptions([]);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetOptions([]);\n\t\t\t}\n\t\t},\n\t\t[defaults, editChip, inputRef, isValidEmail, onChange, options, orderedAccountIds, t]\n\t);\n\n\tuseEffect(() => {\n\t\tconst groups = filter(defaults, (def): def is ContactInputGroup => isContactGroup(def));\n\t\tif (groups.length > 0) {\n\t\t\tforEach(groups, (def) => {\n\t\t\t\tsoapFetch<GetContactsRequest, GetContactsResponse>('GetContacts', {\n\t\t\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\t\t\tcn: {\n\t\t\t\t\t\tid: def.groupId\n\t\t\t\t\t},\n\t\t\t\t\tderefGroupMember: true\n\t\t\t\t}).then((result) => {\n\t\t\t\t\tconst id = Date.now().toString();\n\t\t\t\t\tconst members = result?.cn?.[0].m;\n\t\t\t\t\tconst newContacts = map(members, (member): ContactInputItem => {\n\t\t\t\t\t\tconst email = member.cn?.[0]._attrs.email ?? member.value;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\temail,\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tlabel: email,\n\t\t\t\t\t\t\terror: !isValidEmail(email),\n\t\t\t\t\t\t\tdraggable: true,\n\t\t\t\t\t\t\tonDragStart: buildDragStartHandler({ id, email, label: email })\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tconst newValue = reject(defaults, (chip) => isContactGroup(chip));\n\t\t\t\t\tconst updatedValue = [...newValue, ...newContacts];\n\t\t\t\t\tonChange?.(updatedValue);\n\t\t\t\t\tsetDefaults(updatedValue);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, [buildDragStartHandler, defaults, isValidEmail, onChange]);\n\n\tconst contactInputValue = useMemo(() => uniqBy(defaults, 'email'), [defaults]);\n\n\tconst onAdd = useCallback(\n\t\t(valueToAdd) => {\n\t\t\tif (typeof valueToAdd === 'string') {\n\t\t\t\tconst id = Date.now().toString();\n\t\t\t\tconst chip: ContactInputItem = {\n\t\t\t\t\temail: valueToAdd,\n\t\t\t\t\tid,\n\t\t\t\t\tlabel: valueToAdd,\n\t\t\t\t\terror: !isValidEmail(valueToAdd),\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'action1',\n\t\t\t\t\t\t\tlabel: isValidEmail(valueToAdd)\n\t\t\t\t\t\t\t\t? t('label.edit_email', 'Edit E-mail')\n\t\t\t\t\t\t\t\t: t('label.edit_invalid_email', 'E-mail is invalid, click to edit it'),\n\t\t\t\t\t\t\ticon: 'EditOutline',\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tonClick: () => editChip(valueToAdd, id)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t\tif (!isValidEmail(valueToAdd)) {\n\t\t\t\t\tchip.avatarIcon = 'AlertCircleOutline';\n\t\t\t\t}\n\t\t\t\treturn chip;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...valueToAdd,\n\t\t\t\terror: !isValidEmail(valueToAdd.email),\n\t\t\t\tactions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'action1',\n\t\t\t\t\t\tlabel: isValidEmail(valueToAdd.email)\n\t\t\t\t\t\t\t? t('label.edit_email', 'Edit E-mail')\n\t\t\t\t\t\t\t: t('label.edit_invalid_email', 'E-mail is invalid, click to edit it'),\n\t\t\t\t\t\ticon: 'EditOutline',\n\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\tonClick: () => editChip(valueToAdd.email, valueToAdd.id)\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t},\n\t\t[editChip, isValidEmail, t]\n\t);\n\n\tconst ChipComponent = useCallback(\n\t\t(\n\t\t\tprops: React.ComponentPropsWithoutRef<NonNullable<ChipInputProps['ChipComponent']>>\n\t\t): React.JSX.Element => (\n\t\t\t<ContactInputCustomChipComponent\n\t\t\t\t{...props}\n\t\t\t\tcontactActions={contactActions}\n\t\t\t\tchipDisplayName={chipDisplayName}\n\t\t\t\tcontactInputOnChange={onChange}\n\t\t\t\tcontactInputValue={contactInputValue}\n\t\t\t/>\n\t\t),\n\t\t[chipDisplayName, contactActions, contactInputValue, onChange]\n\t);\n\n\tconst onDragEnter = useCallback<React.DragEventHandler>((ev) => {\n\t\tev.preventDefault();\n\t\tev.dataTransfer.dropEffect = 'move';\n\t}, []);\n\n\tconst resetDraggedChip = useCallback(() => {\n\t\tdraggedChip.current = emptyDraggedChip;\n\t}, [emptyDraggedChip]);\n\n\tconst onDragEnd = useCallback<React.DragEventHandler>(\n\t\t(ev) => {\n\t\t\tev.preventDefault();\n\t\t\t// if the drop is cancelled (e.g. by dropping outside of the dropzone or by pressing ESC), no dragleave action is fired\n\t\t\tif (ev?.dataTransfer?.dropEffect === 'none' || isSameElement.current) {\n\t\t\t\tresetDraggedChip();\n\t\t\t\tisSameElement.current = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetDefaults((prevState) =>\n\t\t\t\tfilter(prevState, (contact) => contact.id !== draggedChip.current.id)\n\t\t\t);\n\t\t\tconst newDefaults = filter(defaults, (c) => {\n\t\t\t\tif (c.email) {\n\t\t\t\t\treturn c.email !== draggedChip.current.email;\n\t\t\t\t}\n\t\t\t\treturn c.id !== draggedChip.current.id;\n\t\t\t});\n\t\t\tonChange?.(newDefaults);\n\t\t\tresetDraggedChip();\n\t\t\tisSameElement.current = false;\n\t\t},\n\t\t[defaults, onChange, resetDraggedChip]\n\t);\n\n\tconst onDrop = useCallback<React.DragEventHandler>(\n\t\t(ev) => {\n\t\t\tev.preventDefault();\n\t\t\tif (draggedChip.current.dragStartRef === inputRef.current) {\n\t\t\t\tisSameElement.current = true;\n\t\t\t\tresetDraggedChip();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst chipJson = ev.dataTransfer.getData('contact');\n\t\t\tif (chipJson) {\n\t\t\t\tconst chip = JSON.parse(chipJson);\n\t\t\t\tconst newChip = buildDraggableChip(chip);\n\t\t\t\tsetDefaults((prevState) =>\n\t\t\t\t\tfind(prevState, { id: newChip.id }) ? prevState : { ...prevState, newChip }\n\t\t\t\t);\n\t\t\t\tonChange?.([...defaults, { ...newChip }]);\n\t\t\t\tresetDraggedChip();\n\t\t\t\tisSameElement.current = false;\n\t\t\t}\n\t\t},\n\t\t[buildDraggableChip, defaults, inputRef, onChange, resetDraggedChip]\n\t);\n\n\treturn (\n\t\t<Container width=\"100%\" onDrop={onDrop} height=\"100%\">\n\t\t\t<ChipInput\n\t\t\t\tdata-testid={'contact-input'}\n\t\t\t\tdisableOptions\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tconfirmChipOnBlur\n\t\t\t\tinputRef={inputRef}\n\t\t\t\tonInputType={onInputType}\n\t\t\t\tonChange={onChange}\n\t\t\t\toptions={options}\n\t\t\t\tvalue={contactInputValue}\n\t\t\t\tbackground={background}\n\t\t\t\tonAdd={onAdd}\n\t\t\t\trequireUniqueChips\n\t\t\t\tcreateChipOnPaste\n\t\t\t\tpasteSeparators={[',', ' ', ';', '\\n']}\n\t\t\t\tseparators={[\n\t\t\t\t\t{ code: 'NumpadEnter', ctrlKey: false },\n\t\t\t\t\t{ key: ',', ctrlKey: false }\n\t\t\t\t]}\n\t\t\t\tChipComponent={ChipComponent}\n\t\t\t\tonDragEnter={dragAndDropEnabled ? onDragEnter : noop}\n\t\t\t\tonDragOver={dragAndDropEnabled ? onDragEnter : noop}\n\t\t\t\tonDragEnd={dragAndDropEnabled ? onDragEnd : noop}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t</Container>\n\t);\n};\n\nexport const ContactInput = (props: ContactInputProps): ReactElement => (\n\t<StoreProvider>\n\t\t<ContactInputCore {...props} />\n\t</StoreProvider>\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\n\nexport const contactAction = createAsyncThunk(\n\t'contacts/contactAction',\n\tasync ({\n\t\tcontactsIDs,\n\t\tdestinationID,\n\t\top,\n\t\ttagName\n\t}: {\n\t\tcontactsIDs: Array<string>;\n\t\tdestinationID?: string;\n\t\top: string;\n\t\ttagName: string;\n\t}) => {\n\t\tconst ids = contactsIDs.join(',');\n\n\t\treturn soapFetch('ContactAction', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: ids,\n\t\t\t\t\top,\n\t\t\t\t\tl: destinationID,\n\t\t\t\t\ttn: tagName\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t)\n\t\t});\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { Contact } from '../../types/contact';\nimport { normalizeContactToSoap } from '../../utils/normalizations/normalize-contact-to-soap';\n\nexport const createContact = createAsyncThunk(\n\t'contacts/createContact',\n\tasync (contact: Contact) => {\n\t\tconst cnt = { ...contact, fileAsStr: contact.firstName };\n\t\tconst { cn } = (await soapFetch('CreateContact', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tcn: {\n\t\t\t\tm: [],\n\t\t\t\tl: cnt.parent,\n\t\t\t\ta: normalizeContactToSoap(cnt)\n\t\t\t}\n\t\t})) as { cn: any };\n\t\treturn cn;\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { Contact } from '../../types/contact';\nimport { normalizeContactToSoap } from '../../utils/normalizations/normalize-contact-to-soap';\n\nexport const modifyContact = createAsyncThunk(\n\t'contacts/modifyContact',\n\tasync ({ updatedContact }: { updatedContact: Contact; editContact: Contact }) => {\n\t\tconst { cn } = (await soapFetch('ModifyContact', {\n\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\tforce: '1',\n\t\t\treplace: '0',\n\t\t\tcn: {\n\t\t\t\tm: [],\n\t\t\t\tid: updatedContact.id,\n\t\t\t\ta: normalizeContactToSoap(updatedContact)\n\t\t\t}\n\t\t})) as { cn: any };\n\t\treturn cn;\n\t}\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\n\nexport const searchContacts = createAsyncThunk('contacts/searchContacts', async (id: string) => {\n\tconst { cn } = (await soapFetch('Search', {\n\t\t_jsns: 'urn:zimbraMail',\n\t\tlimit: '500',\n\t\toffset: 0,\n\t\tsortBy: 'nameAsc',\n\t\ttypes: 'contact',\n\t\tquery: {\n\t\t\t_content: `inid:\"${id}\"`\n\t\t}\n\t})) as { cn: any };\n\n\treturn cn;\n});\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { combineReducers } from '@reduxjs/toolkit';\n\nimport { contactSliceReducer } from '../slices/contacts-slice';\n\nexport const storeReducers = combineReducers({\n\tcontacts: contactSliceReducer\n});\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { FC } from 'react';\n\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { Provider } from 'react-redux';\n\nimport { CONTACTS_APP_ID } from '../../../constants';\nimport { storeReducers } from '../reducers/reducers';\n\nexport default combineReducers({});\n\nexport const store = configureStore({\n\tdevTools: {\n\t\tname: CONTACTS_APP_ID\n\t},\n\treducer: storeReducers\n});\n\nexport const StoreProvider: FC = ({ children }) => <Provider store={store}>{children}</Provider>;\n\n// @see https://redux.js.org/usage/usage-with-typescript#define-root-state-and-dispatch-types\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isNil, omitBy } from 'lodash';\n\nimport { ContactsFolder } from '../../types/contact';\n\nexport const folderAction = createAsyncThunk(\n\t'contacts/folderAction',\n\tasync ({\n\t\tfolder,\n\t\top,\n\t\tname,\n\t\tl,\n\t\trecursive,\n\t\tcolor,\n\t\tzid\n\t}: {\n\t\tfolder: ContactsFolder;\n\t\top: string;\n\t\tname?: string;\n\t\tl?: string;\n\t\trecursive?: boolean;\n\t\tcolor?: number;\n\t\tzid?: string;\n\t}) =>\n\t\tsoapFetch('FolderAction', {\n\t\t\taction: omitBy(\n\t\t\t\t{\n\t\t\t\t\tid: folder.id,\n\t\t\t\t\top,\n\t\t\t\t\tl,\n\t\t\t\t\trecursive,\n\t\t\t\t\tname,\n\t\t\t\t\tcolor,\n\t\t\t\t\tzid\n\t\t\t\t},\n\t\t\t\tisNil\n\t\t\t),\n\t\t\t_jsns: 'urn:zimbraMail'\n\t\t})\n);\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { cloneDeep, map } from 'lodash';\n\nimport {\n\taddContactsToStore,\n\tfindContactsInStore,\n\tremoveContactsFromStore\n} from '../../utils/helpers';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function contactActionPending(state: any, request: any): void {\n\tconst { op, contactsIDs, destinationID } = request.meta.arg;\n\n\tif (state.contacts) {\n\t\tstate.status.pendingActions = true;\n\n\t\tconst contacts = map(findContactsInStore(state, contactsIDs), (contact) => ({\n\t\t\t...contact,\n\t\t\tparent: destinationID\n\t\t}));\n\t\t// eslint-disable-next-line no-param-reassign\n\t\trequest.meta.arg.prevState = cloneDeep(state.contacts);\n\t\tswitch (op) {\n\t\t\tcase 'move':\n\t\t\t\tif (contactsIDs) {\n\t\t\t\t\tremoveContactsFromStore(state, contactsIDs);\n\t\t\t\t}\n\t\t\t\tif (contacts) {\n\t\t\t\t\taddContactsToStore(state, contacts);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'delete':\n\t\t\t\tif (contactsIDs) {\n\t\t\t\t\tremoveContactsFromStore(state, contactsIDs);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function contactActionFulFilled(state: any): void {\n\tif (state.contacts) state.status.pendingActions = false;\n\tif (state.folders) state.status = 'idle';\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function contactActionRejected(state: any, { meta }: any): void {\n\tif (state.contacts) {\n\t\tstate.contacts = meta.arg.prevState;\n\t\tstate.status.pendingActions = false;\n\t}\n\n\tif (state.folders) state.folders = meta.arg.prevState;\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { AddContactAction, AddContactRequest, ContactsSlice } from '../../types/store';\nimport {\n\tremoveContactsWithoutID,\n\taddContactsToStore,\n\tremoveContactsFromStore\n} from '../../utils/helpers';\n\nexport function createContactPending(state: ContactsSlice, { meta }: AddContactRequest): void {\n\tif (meta && meta.arg) {\n\t\taddContactsToStore(state, [meta.arg]);\n\t}\n\tstate.status.pendingActions = true;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function createContactFulFilled(state: any, { payload }: AddContactAction): void {\n\tif (state.contacts) {\n\t\tif (payload) {\n\t\t\tremoveContactsWithoutID(state);\n\t\t}\n\t\tstate.status.pendingActions = false;\n\t}\n}\n\nexport function createContactRejected(state: ContactsSlice): void {\n\tremoveContactsFromStore(state);\n\tstate.status.pendingActions = false;\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\nimport { cloneDeep, filter, find, reject, split } from 'lodash';\n\nimport { isTrash } from '../../../carbonio-ui-commons/helpers/folders';\nimport { FoldersSlice } from '../../types/store';\nimport { applyFoldersChangesToStore, removeFoldersFromStore } from '../../utils/helpers';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function folderActionPending(state: any, { meta }: any): void {\n\tconst { folder, l, op, name, color, zid } = meta.arg;\n\n\tif (state.folders) {\n\t\t// eslint-disable-next-line no-param-reassign\n\t\tmeta.arg.prevFolderState = cloneDeep(state.folders);\n\t\tconst newFolder = {\n\t\t\t...folder,\n\t\t\tparent: l,\n\t\t\tlabel: name || folder.label,\n\t\t\tcolor: color ?? folder.color\n\t\t};\n\t\tswitch (op) {\n\t\t\tcase 'move':\n\t\t\t\tapplyFoldersChangesToStore(state, [newFolder]);\n\t\t\t\tbreak;\n\t\t\tcase 'delete':\n\t\t\t\tremoveFoldersFromStore(state, [folder.id]);\n\t\t\t\tbreak;\n\t\t\tcase 'rename':\n\t\t\t\tapplyFoldersChangesToStore(state, [newFolder]);\n\t\t\t\tbreak;\n\n\t\t\tcase '!grant': {\n\t\t\t\tconst newAcl = filter(folder.sharedWith.grant, (rights) => rights.zid !== zid);\n\t\t\t\tconst updatedFolder = { ...newFolder, sharedWith: newAcl };\n\t\t\t\tapplyFoldersChangesToStore(state, [updatedFolder]);\n\t\t\t\tstate.status = 'updating';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'update': {\n\t\t\t\tapplyFoldersChangesToStore(state, [newFolder]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'empty':\n\t\t\t\tstate.folders = reject(\n\t\t\t\t\tstate.folders,\n\t\t\t\t\t(item) =>\n\t\t\t\t\t\tsplit(item.path, '/')[0] === find(state.folders, ['id', FOLDERS.TRASH]).label &&\n\t\t\t\t\t\t!isTrash(item.id)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn('Operation not handled', op);\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function folderActionRejected(state: any, request: any): void {\n\tif (state.folders) {\n\t\tstate.folders = request.meta.arg.prevFolderState;\n\t\tstate.status = 'failed';\n\t}\n}\n\nexport function folderActionFulFilled(state: FoldersSlice): void {\n\tstate.status = 'idle';\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ContactsSlice, ModifyContactAction } from '../../types/store';\nimport { updateContactsInStore } from '../../utils/helpers';\n\nexport function modifyContactPending(state: ContactsSlice, { meta }: ModifyContactAction): void {\n\tconst { updatedContact } = meta.arg;\n\tif (updatedContact) {\n\t\tupdateContactsInStore(state, [updatedContact]);\n\t}\n\tstate.status.pendingActions = true;\n}\n\nexport function modifyContactFulFilled(state: ContactsSlice): void {\n\tstate.status.pendingActions = false;\n}\n\nexport function modifyContactRejected(state: ContactsSlice, { meta }: ModifyContactAction): void {\n\tconst { editContact } = meta.arg;\n\tif (editContact) {\n\t\tupdateContactsInStore(state, [editContact]);\n\t}\n\tstate.status.pendingActions = false;\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { map } from 'lodash';\n\nimport { ContactsSlice } from '../../types/store';\nimport { addContactsToStore, removeContactsFromStore } from '../../utils/helpers';\nimport { normalizeContactsFromSoap } from '../../utils/normalizations/normalize-contact-from-soap';\n\nexport function searchContactsPending(state: ContactsSlice): void {\n\tstate.status.pendingActions = true;\n}\n\nexport function searchContactsRejected(state: ContactsSlice): void {\n\tstate.status.pendingActions = false;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function searchContactsFullFilled(state: any, { meta, payload }: any): void {\n\tconst contacts = normalizeContactsFromSoap(payload);\n\tif (state.contacts) {\n\t\tif (payload) {\n\t\t\tremoveContactsFromStore(\n\t\t\t\tstate,\n\t\t\t\tmap(contacts, (item) => item.id)\n\t\t\t);\n\t\t\tif (contacts) {\n\t\t\t\taddContactsToStore(state, contacts, meta.arg);\n\t\t\t}\n\t\t} else {\n\t\t\tstate.contacts[meta.arg] = [];\n\t\t}\n\t\tstate.status.pendingActions = false;\n\t\tstate.status[meta.arg] = true;\n\t}\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { State } from '../../types/store';\nimport { contactAction } from '../actions/contact-action';\nimport { createContact } from '../actions/create-contact';\nimport { folderAction } from '../actions/folder-action';\nimport { modifyContact } from '../actions/modify-contact';\nimport { searchContacts } from '../actions/search-contacts';\nimport {\n\tcontactActionFulFilled,\n\tcontactActionPending,\n\tcontactActionRejected\n} from '../reducers/contact-action';\nimport {\n\tcreateContactFulFilled,\n\tcreateContactPending,\n\tcreateContactRejected\n} from '../reducers/create-contact';\nimport { folderActionPending, folderActionRejected } from '../reducers/folder-action';\nimport {\n\thandleDeletedContactsSyncReducer,\n\thandleCreatedContactsSyncReducer,\n\thandleModifiedContactsSyncReducer\n} from '../reducers/handle-contacts-sync';\nimport {\n\tmodifyContactFulFilled,\n\tmodifyContactPending,\n\tmodifyContactRejected\n} from '../reducers/modify-contact';\nimport {\n\tsearchContactsFullFilled,\n\tsearchContactsPending,\n\tsearchContactsRejected\n} from '../reducers/search-contacts';\n\nconst initialState: State['contacts'] = {\n\tstatus: {\n\t\tpendingActions: false\n\t},\n\tcontacts: {}\n};\n\nexport const contactsSlice = createSlice({\n\tname: 'contacts',\n\tinitialState,\n\treducers: {\n\t\thandleModifiedContactsSync: handleModifiedContactsSyncReducer,\n\t\thandleCreatedContactsSync: handleCreatedContactsSyncReducer,\n\t\thandleDeletedContactsSync: handleDeletedContactsSyncReducer\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(searchContacts.pending, searchContactsPending);\n\t\tbuilder.addCase(searchContacts.fulfilled, searchContactsFullFilled);\n\t\tbuilder.addCase(searchContacts.rejected, searchContactsRejected);\n\t\tbuilder.addCase(createContact.pending, createContactPending);\n\t\tbuilder.addCase(createContact.fulfilled, createContactFulFilled);\n\t\tbuilder.addCase(createContact.rejected, createContactRejected);\n\t\tbuilder.addCase(modifyContact.pending, modifyContactPending);\n\t\tbuilder.addCase(modifyContact.fulfilled, modifyContactFulFilled);\n\t\tbuilder.addCase(modifyContact.rejected, modifyContactRejected);\n\t\tbuilder.addCase(contactAction.pending, contactActionPending);\n\t\tbuilder.addCase(contactAction.fulfilled, contactActionFulFilled);\n\t\tbuilder.addCase(contactAction.rejected, contactActionRejected);\n\t\tbuilder.addCase(folderAction.pending, folderActionPending);\n\t\tbuilder.addCase(folderAction.rejected, folderActionRejected);\n\t}\n});\n\nexport const { handleCreatedContactsSync, handleModifiedContactsSync, handleDeletedContactsSync } =\n\tcontactsSlice.actions;\nexport const contactSliceReducer = contactsSlice.reducer;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { find, forEach, map, orderBy, reduce, reject, uniqBy } from 'lodash';\n\nimport { Contact } from '../../types/contact';\nimport { ContactsSlice } from '../../types/store';\nimport { removeContactsFromStore } from '../../utils/helpers';\n\nexport function handleCreatedContactsSyncReducer(\n\tstate: ContactsSlice,\n\t{ payload }: { payload: Array<Contact> }\n): void {\n\tforEach(payload, (cn) => {\n\t\tif (cn.id && cn.parent) {\n\t\t\tstate.contacts[cn.parent] = orderBy(\n\t\t\t\t[\n\t\t\t\t\t...map(\n\t\t\t\t\t\treject(state.contacts[cn.parent], (item) => item.id === cn.id || !item.id),\n\t\t\t\t\t\t(cnt) => ({\n\t\t\t\t\t\t\t...cnt,\n\t\t\t\t\t\t\tfileAsStr: cnt.fileAsStr.toLowerCase()\n\t\t\t\t\t\t})\n\t\t\t\t\t),\n\t\t\t\t\tcn\n\t\t\t\t],\n\t\t\t\t'fileAsStr'\n\t\t\t);\n\t\t}\n\t});\n}\n\nexport function handleModifiedContactsSyncReducer(\n\tstate: ContactsSlice,\n\t{ payload }: { payload: Array<Contact> }\n): void {\n\tforEach(payload, (cn) => {\n\t\tif (cn.id) {\n\t\t\tstate.contacts = reduce(\n\t\t\t\tstate.contacts,\n\t\t\t\t(acc, v, key) => {\n\t\t\t\t\tconst oldContact = find(v, ['id', cn.id]);\n\t\t\t\t\tif (oldContact) {\n\t\t\t\t\t\tconst updated = { ...oldContact, ...cn };\n\t\t\t\t\t\treturn oldContact.parent !== updated.parent\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t[key]: reject(v, ['id', updated.id]),\n\t\t\t\t\t\t\t\t\t[updated.parent]: [...(state.contacts?.[updated.parent] ?? []), updated]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t\t\t\t[updated.parent]: map(state.contacts[updated.parent], (item) =>\n\t\t\t\t\t\t\t\t\t\titem.id === updated.id ? updated : item\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn { ...acc, [key]: uniqBy([...(acc[key] ?? []), ...v], 'id') };\n\t\t\t\t},\n\t\t\t\t{} as { [k: string]: Array<Contact> }\n\t\t\t);\n\t\t}\n\t});\n}\n\nexport function handleDeletedContactsSyncReducer(\n\tstate: ContactsSlice,\n\t{ payload }: { payload: Array<string> }\n): void {\n\tremoveContactsFromStore(state, payload);\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { Folder, FOLDERS } from '@zextras/carbonio-shell-ui';\nimport type { TFunction } from 'i18next';\nimport { cloneDeep, filter, find, forEach, map, merge, reduce, reject, some } from 'lodash';\n\nimport { Contact, ContactsFolder } from '../types/contact';\nimport { ContactsSlice, FoldersSlice } from '../types/store';\n\nconst folderIdRegex = /^(.+:)*(\\d+)$/;\n\nexport function extractFolders(accordions: ContactsFolder[]): ContactsFolder[] {\n\treturn reduce(\n\t\taccordions,\n\t\t(acc, v) => {\n\t\t\tif (v && v.items && v.items.length) {\n\t\t\t\treturn [...acc, v, ...extractFolders(v.items)];\n\t\t\t}\n\t\t\treturn [...acc, v];\n\t\t},\n\t\t[] as ContactsFolder[]\n\t);\n}\n\nexport function removeFoldersFromStore(\n\tstate: FoldersSlice,\n\tidsToDelete?: Array<string | undefined>\n): void {\n\tstate.folders = reduce(\n\t\tstate.folders,\n\t\t(acc, v) => {\n\t\t\tconst value = some(idsToDelete, (cid) => cid === v.id);\n\t\t\treturn value ? [...acc] : [...acc, v];\n\t\t},\n\t\t[] as ContactsFolder[]\n\t);\n}\n\nexport const applyFoldersChangesToStore = (\n\tstate: FoldersSlice,\n\tfolders: ContactsFolder[]\n): void => {\n\tforEach(folders, (f) => {\n\t\tconst isFolderInStore = find(state.folders, ['id', f.id]);\n\t\tif (isFolderInStore) {\n\t\t\tmerge(isFolderInStore, f);\n\t\t} else {\n\t\t\tstate.folders = [...state.folders, f];\n\t\t}\n\t});\n};\n\nexport function addFoldersToStore(state: FoldersSlice, folders: ContactsFolder[]): void {\n\tif (folders && folders.length) {\n\t\tconst isFolderAvailable = state.folders?.find((item) => item.id === folders[0].id);\n\t\tif (isFolderAvailable === undefined) {\n\t\t\tstate.folders = reduce(folders, (acc, v) => [...acc, v], state.folders);\n\t\t}\n\t}\n}\n\nexport function updateContactsInStore(state: ContactsSlice, contactsArray: Contact[]): void {\n\tstate.contacts = reduce(\n\t\tstate.contacts,\n\t\t(acc, v, k) => ({\n\t\t\t...acc,\n\t\t\t[k]: reduce(\n\t\t\t\tv,\n\t\t\t\t(acc2, v2) =>\n\t\t\t\t\treduce(\n\t\t\t\t\t\tcontactsArray,\n\t\t\t\t\t\t(acc3, v3) => (v3.id === v2.id ? [...acc3, v3] : [...acc3, v2]),\n\t\t\t\t\t\tacc2\n\t\t\t\t\t),\n\t\t\t\t[] as Contact[]\n\t\t\t)\n\t\t}),\n\t\t{}\n\t);\n}\n\nexport function findContactsInStore(state: ContactsSlice, ids: Array<string>): Array<Contact> {\n\treturn reduce(\n\t\tids,\n\t\t(acc, id) =>\n\t\t\treduce(\n\t\t\t\tstate.contacts,\n\t\t\t\t(acc2, v2) => {\n\t\t\t\t\tconst contactInStore = find(v2, (item) => item.id === id);\n\t\t\t\t\tif (contactInStore) {\n\t\t\t\t\t\treturn [...acc2, cloneDeep(contactInStore)];\n\t\t\t\t\t}\n\t\t\t\t\treturn acc2;\n\t\t\t\t},\n\t\t\t\tacc\n\t\t\t),\n\t\t[] as any\n\t);\n}\n\nexport function removeContactsWithoutID(state: ContactsSlice): void {\n\tmap(state.contacts, (v) => reject(v, (item) => !item.id));\n}\n\nexport function removeContactsFromStore(\n\tstate: ContactsSlice,\n\tidsToDelete?: Array<string | undefined>\n): void {\n\tstate.contacts = reduce(\n\t\tstate.contacts,\n\t\t(acc, v, k) =>\n\t\t\tidsToDelete\n\t\t\t\t? {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[k]: filter(v, (contact) => !some(idsToDelete, (id) => id === contact.id))\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[k]: filter(v, (contact) => (contact.id ? contact : false))\n\t\t\t\t\t},\n\t\t{}\n\t);\n}\n\nexport function addContactsToStore(\n\tstate: ContactsSlice,\n\tcontacts: Contact[],\n\tsharedFolderParent?: string\n): void {\n\treduce(\n\t\tcontacts,\n\t\t(acc, v) => {\n\t\t\tif (!acc[sharedFolderParent ?? v.parent]) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\tacc[sharedFolderParent ?? v.parent] = [];\n\t\t\t}\n\t\t\tacc[sharedFolderParent ?? v.parent].push(v);\n\t\t\treturn acc;\n\t\t},\n\t\tstate.contacts\n\t);\n}\n\nexport const getSystemFoldersTranslatedName = (t: TFunction): Array<string> => [\n\tt('folders.root', 'Root'),\n\tt('folders.contacts', 'Contacts'),\n\tt('folders.auto_contacts', 'Emailed Contacts'),\n\tt('folders.trash', 'Trash')\n];\n\nexport const getFolderTranslatedName = (\n\tt: TFunction,\n\tfolderId: string,\n\tfolderName: string\n): string => {\n\tconst id = folderIdRegex.exec(folderId ?? '')?.[2];\n\tlet translationKey;\n\tswitch (id) {\n\t\tcase FOLDERS.CONTACTS:\n\t\t\ttranslationKey = 'contacts';\n\t\t\tbreak;\n\t\tcase FOLDERS.AUTO_CONTACTS:\n\t\t\ttranslationKey = 'auto_contacts';\n\t\t\tbreak;\n\t\tcase FOLDERS.TRASH:\n\t\t\ttranslationKey = 'trash';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn folderName;\n\t}\n\n\treturn t(`folders.${translationKey}`, folderName);\n};\n\nexport const getFolderTranslatedNameByName = (t: TFunction, folderName: string): string => {\n\tlet translationKey;\n\tswitch (folderName) {\n\t\tcase 'Root':\n\t\t\ttranslationKey = 'root';\n\t\t\tbreak;\n\t\tcase 'Contacts':\n\t\t\ttranslationKey = 'contacts';\n\t\t\tbreak;\n\t\tcase 'Emailed Contacts':\n\t\t\ttranslationKey = 'auto_contacts';\n\t\t\tbreak;\n\t\tcase 'Trash':\n\t\t\ttranslationKey = 'trash';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn folderName;\n\t}\n\n\treturn t(`folders.${translationKey}`, folderName);\n};\n\nexport const translateFoldersNames = (t: TFunction, folders: Folder[]): Folder[] =>\n\tfolders.map((folder: Folder) => ({\n\t\t...folder,\n\t\tname: getFolderTranslatedName(t, folder.id, folder.name)\n\t}));\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { NameSpace } from '../../types/utils';\n\nexport enum ContactPhoneType {\n\tMOBILE = 'mobile',\n\tWORK = 'work',\n\tHOME = 'home',\n\tOTHER = 'other'\n}\n\nexport enum ContactAddressType {\n\tOTHER = 'other',\n\tWORK = 'work',\n\tHOME = 'home'\n}\n\nexport enum ContactUrlType {\n\tOTHER = 'other',\n\tWORK = 'work',\n\tHOME = 'home'\n}\n\nexport type ContactAddress = {\n\ttype: ContactAddressType;\n\tstreet?: string;\n\tcity?: string;\n\tpostalCode?: string;\n\tcountry?: string;\n\tstate?: string;\n};\n\nexport type ContactEmail = {\n\tmail: string;\n};\n\nexport type ContactPhone = {\n\tnumber: string;\n\ttype: ContactPhoneType;\n};\n\nexport type ContactUrl = {\n\turl: string;\n\ttype: ContactUrlType;\n};\n\nexport type ContactAddressMap = { [key: string]: ContactAddress };\nexport type ContactEmailMap = { [key: string]: ContactEmail };\nexport type ContactPhoneMap = { [key: string]: ContactPhone };\nexport type ContactUrlMap = { [key: string]: ContactUrl };\n\nexport type ContactsFolder = {\n\titems: ContactsFolder[] | [];\n\t/** Internal UUID */ _id?: string;\n\t/** Zimbra ID */ id: string;\n\titemsCount: number;\n\tpath: string;\n\tparent: string;\n\tlevel?: number;\n\tlabel: string;\n\tdeletable: boolean;\n\tview: string;\n\tto?: string;\n\tcolor: number;\n\tisShared: boolean;\n\tsharedWith: any;\n\towner?: string;\n\tperm: any;\n};\n\nexport type Contact = {\n\t_id?: string;\n\t/* Zimbra ID */ id: string;\n\ttags?: string[];\n\tfirstName: string;\n\tmiddleName: string;\n\tlastName: string;\n\tnickName: string;\n\tdisplayName?: string;\n\tparent: string;\n\taddress: ContactAddressMap;\n\tcompany: string;\n\tdepartment: string;\n\temail: ContactEmailMap;\n\timage: string;\n\tjobTitle: string;\n\tnotes: string;\n\tphone: ContactPhoneMap;\n\tnameSuffix: string;\n\tnamePrefix: string;\n\tURL: ContactUrlMap;\n\tfileAsStr: string;\n};\n\nexport type Group = {\n\tdisplay: undefined | string;\n\temail: string | undefined;\n\texp: boolean;\n\tid: string;\n\tisGroup: boolean;\n\tl: string;\n\tranking: string;\n\ttype: string;\n\tgalType?: string;\n};\n\nexport type Match = {\n\tfirst?: string;\n\tmiddle?: string;\n\tlast?: string;\n\tnick?: string;\n\tfileas?: string;\n\tranking?: string;\n\ttype?: string;\n\tisGroup?: boolean;\n\temail?: string;\n\tfull?: string;\n\tcompany?: string;\n\tdisplay?: string;\n\tid?: string;\n\tl?: string;\n\texp?: string;\n};\n\nexport type FullAutocompleteResponse = {\n\tcanBeCached: boolean;\n\tmatch?: Match[];\n\t_jsns?: string;\n};\n\nexport type FullAutocompleteRequest = {\n\torderedAccountIds?: string;\n\tAutoCompleteRequest: {\n\t\tname: string;\n\t\tincludeGal: 0 | 1;\n\t};\n\t_jsns: NameSpace;\n};\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport {\n\tlowerFirst,\n\tparseInt,\n\tpickBy,\n\treduce,\n\twords,\n\tisEmpty,\n\tomitBy,\n\tisNil,\n\tfilter\n} from 'lodash';\n\nimport {\n\tContact,\n\tContactAddress,\n\tContactAddressMap,\n\tContactAddressType,\n\tContactEmailMap,\n\tContactPhoneMap,\n\tContactPhoneType,\n\tContactUrlMap,\n\tContactUrlType\n} from '../../types/contact';\nimport { SoapContact } from '../../types/soap';\n\nconst MAIL_REG = /^email(\\d*)$/;\nconst PHONE_REG = /^(.*)Phone(\\d*)$/;\nconst URL_REG = /^(.*)URL(\\d*)$/;\nconst ADDR_PART_REG = /^(.*)(City|Country|PostalCode|State|Street)(\\d*)$/;\n\nfunction contactPhoneTypeFromString(s: string): ContactPhoneType {\n\tif (!PHONE_REG.test(s)) return ContactPhoneType.OTHER;\n\tswitch (s.match(PHONE_REG)?.[1]) {\n\t\tcase 'mobile':\n\t\t\treturn ContactPhoneType.MOBILE;\n\t\tcase 'work':\n\t\t\treturn ContactPhoneType.WORK;\n\t\tcase 'home':\n\t\t\treturn ContactPhoneType.HOME;\n\t\tdefault:\n\t\t\treturn ContactPhoneType.OTHER;\n\t}\n}\n\nfunction contactUrlTypeFromString(s: string): ContactUrlType {\n\tif (!URL_REG.test(s)) return ContactUrlType.OTHER;\n\tswitch (s.match(URL_REG)?.[1]) {\n\t\tcase 'work':\n\t\t\treturn ContactUrlType.WORK;\n\t\tcase 'home':\n\t\t\treturn ContactUrlType.HOME;\n\t\tdefault:\n\t\t\treturn ContactUrlType.OTHER;\n\t}\n}\n\nfunction getParts(key: string): [ContactAddressType, keyof ContactAddress, number] {\n\tconst [type, subType, index, opt]: string[] = words(key);\n\treturn [\n\t\ttype as ContactAddressType,\n\t\tlowerFirst(subType === 'Postal' ? 'postalCode' : subType) as keyof ContactAddress,\n\t\tparseInt(index === 'Code' ? opt : index) || 1\n\t];\n}\n\nfunction normalizeContactAddresses(c: SoapContact): ContactAddressMap {\n\treturn reduce(\n\t\tc._attrs as { [k: string]: string },\n\t\t(r: { [id: string]: ContactAddress }, attr: string, key) => {\n\t\t\tif (ADDR_PART_REG.test(key)) {\n\t\t\t\tconst [type, subType, index] = getParts(key);\n\t\t\t\tconst id = `${type}Address${index > 1 ? index : ''}`;\n\t\t\t\tif (typeof r[id] === 'undefined') {\n\t\t\t\t\tr[id] = { [subType]: attr, type };\n\t\t\t\t} else {\n\t\t\t\t\tr[id] = { ...r[id], [subType]: attr };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r;\n\t\t},\n\t\t{}\n\t);\n}\n\nfunction normalizeContactMails(c: SoapContact): ContactEmailMap {\n\treturn reduce(\n\t\tpickBy<string>(c._attrs, (v, k) => MAIL_REG.test(k)),\n\t\t(acc, v, k) => ({\n\t\t\t...acc,\n\t\t\t[k]: {\n\t\t\t\tmail: v\n\t\t\t}\n\t\t}),\n\t\t{}\n\t);\n}\n\nfunction normalizeContactPhones(c: SoapContact): ContactPhoneMap {\n\treturn reduce(\n\t\tpickBy<string>(c._attrs, (v, k) => PHONE_REG.test(k)),\n\t\t(acc, v, k) => ({\n\t\t\t...acc,\n\t\t\t[k]: {\n\t\t\t\tnumber: v,\n\t\t\t\ttype: contactPhoneTypeFromString(k)\n\t\t\t}\n\t\t}),\n\t\t{}\n\t);\n}\n\nfunction normalizeContactUrls(c: SoapContact): ContactUrlMap {\n\treturn reduce(\n\t\tpickBy<string>(c._attrs, (v, k) => URL_REG.test(k)),\n\t\t(acc, v, k) => ({\n\t\t\t...acc,\n\t\t\t[k]: {\n\t\t\t\turl: v,\n\t\t\t\ttype: contactUrlTypeFromString(k)\n\t\t\t}\n\t\t}),\n\t\t{}\n\t);\n}\n\nexport function normalizeContactsFromSoap(contact: SoapContact[]): Contact[] | undefined {\n\treturn isEmpty(contact)\n\t\t? undefined\n\t\t: reduce(\n\t\t\t\tcontact || [],\n\t\t\t\t(r, c) => {\n\t\t\t\t\tif (c._attrs?.type === 'group') return r;\n\t\t\t\t\tr.push({\n\t\t\t\t\t\tparent: c.l,\n\t\t\t\t\t\tid: c.id,\n\t\t\t\t\t\tfileAsStr: c.fileAsStr,\n\t\t\t\t\t\ttags: !isNil(c.t) ? filter(c.t.split(','), (t) => t !== '') : [],\n\t\t\t\t\t\taddress: normalizeContactAddresses(c),\n\t\t\t\t\t\tcompany: c._attrs?.company ?? '',\n\t\t\t\t\t\tdepartment: c._attrs?.department ?? '',\n\t\t\t\t\t\tdisplayName: c._attrs?.displayName ?? '',\n\t\t\t\t\t\temail: normalizeContactMails(c),\n\t\t\t\t\t\tfirstName: c._attrs?.firstName ?? c._attrs?.givenName ?? '',\n\t\t\t\t\t\tmiddleName: c._attrs?.middleName ?? '',\n\t\t\t\t\t\tlastName: c._attrs?.lastName ?? '',\n\t\t\t\t\t\tnickName: c._attrs?.nickname ?? '',\n\t\t\t\t\t\timage: c._attrs?.image\n\t\t\t\t\t\t\t? `/service/home/~/?auth=co&id=${c.id}&part=${c._attrs.image.part}&max_width=32&max_height=32`\n\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\tjobTitle: c._attrs?.jobTitle ?? '',\n\t\t\t\t\t\tnotes: c._attrs?.notes ?? '',\n\t\t\t\t\t\tphone: normalizeContactPhones(c),\n\t\t\t\t\t\tnameSuffix: c._attrs?.nameSuffix ?? '',\n\t\t\t\t\t\tnamePrefix: c._attrs?.namePrefix ?? '',\n\t\t\t\t\t\tURL: normalizeContactUrls(c)\n\t\t\t\t\t});\n\t\t\t\t\treturn r;\n\t\t\t\t},\n\t\t\t\t[] as Contact[]\n\t\t\t);\n}\n\nexport function normalizeSyncContactsFromSoap(\n\tcontact: SoapContact[]\n): Array<Partial<Contact>> | undefined {\n\treturn isEmpty(contact)\n\t\t? undefined\n\t\t: reduce(\n\t\t\t\tcontact,\n\t\t\t\t(r, c) => {\n\t\t\t\t\tif (c._attrs?.type === 'group') return r;\n\t\t\t\t\tr.push(\n\t\t\t\t\t\tomitBy<Partial<Contact>>(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tparent: c.l,\n\t\t\t\t\t\t\t\tid: c.id,\n\t\t\t\t\t\t\t\ttags: !isNil(c.t) ? filter(c.t.split(','), (t) => t !== '') : [],\n\t\t\t\t\t\t\t\tfileAsStr: c.fileAsStr,\n\t\t\t\t\t\t\t\taddress: c._attrs ? normalizeContactAddresses(c) : undefined,\n\t\t\t\t\t\t\t\tcompany: c._attrs?.company,\n\t\t\t\t\t\t\t\tdepartment: c._attrs?.department,\n\t\t\t\t\t\t\t\tdisplayName: c._attrs?.displayName,\n\t\t\t\t\t\t\t\temail: c._attrs ? normalizeContactMails(c) : undefined,\n\t\t\t\t\t\t\t\tfirstName: c._attrs?.firstName || c._attrs?.givenName,\n\t\t\t\t\t\t\t\tmiddleName: c._attrs?.middleName,\n\t\t\t\t\t\t\t\tlastName: c._attrs?.lastName,\n\t\t\t\t\t\t\t\tnickName: c._attrs?.nickname,\n\t\t\t\t\t\t\t\timage: c._attrs?.image\n\t\t\t\t\t\t\t\t\t? `/service/home/~/?auth=co&id=${c.id}&part=${c._attrs.image.part}&max_width=32&max_height=32`\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\t\tjobTitle: c._attrs?.jobTitle,\n\t\t\t\t\t\t\t\tnotes: c._attrs?.notes,\n\t\t\t\t\t\t\t\tphone: c._attrs ? normalizeContactPhones(c) : undefined,\n\t\t\t\t\t\t\t\tnameSuffix: c._attrs?.nameSuffix,\n\t\t\t\t\t\t\t\tnamePrefix: c._attrs?.namePrefix,\n\t\t\t\t\t\t\t\tURL: c._attrs ? normalizeContactUrls(c) : undefined\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tisNil\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn r;\n\t\t\t\t},\n\t\t\t\t[] as Array<Partial<Contact>>\n\t\t\t);\n}\n","/*\n * SPDX-FileCopyrightText: 2021 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { map, merge, parseInt, pick, reduce } from 'lodash';\n\nimport {\n\tContact,\n\tContactAddress,\n\tContactAddressMap,\n\tContactEmailMap,\n\tContactPhoneMap,\n\tContactUrlMap\n} from '../../types/contact';\nimport { CreateContactRequestAttr, ModifyContactRequestAttr } from '../../types/soap';\n\nexport function normalizeContactMailsToSoapOp(mails: ContactEmailMap): any {\n\treturn reduce(\n\t\tmails,\n\t\t(c, v, k) => ({\n\t\t\t...c,\n\t\t\t[k]: v.mail\n\t\t}),\n\t\t{}\n\t);\n}\n\nexport function normalizeContactPhonesToSoapOp(phones: ContactPhoneMap): any {\n\treturn reduce(\n\t\tphones,\n\t\t(acc, v, k) =>\n\t\t\tk === 'type'\n\t\t\t\t? acc\n\t\t\t\t: {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[k]: v.number\n\t\t\t\t\t},\n\t\t{}\n\t);\n}\n\nexport function normalizeContactUrlsToSoapOp(urls: ContactUrlMap): any {\n\treturn reduce(\n\t\turls,\n\t\t(acc, v, k) =>\n\t\t\tk === 'type'\n\t\t\t\t? acc\n\t\t\t\t: {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[k]: v.url\n\t\t\t\t\t},\n\t\t{}\n\t);\n}\n\nconst capitalize: (l: string) => string = (lower) => lower.replace(/^\\w/, (c) => c.toUpperCase());\n\nconst getKey: (k: string, v: ContactAddress, field: string) => string = (k, v, field) => {\n\tconst index = k.match(/(\\d+)$/);\n\treturn `${v.type}${capitalize(field)}${index && index.length > 0 ? parseInt(index[0], 10) : ''}`;\n};\n\nexport function normalizeContactAddressesToSoapOp(addresses: ContactAddressMap): any {\n\treturn reduce(\n\t\taddresses,\n\t\t(acc, v, k) => ({\n\t\t\t...acc,\n\t\t\t...reduce(\n\t\t\t\tv,\n\t\t\t\t(acc2, v2, k2) => {\n\t\t\t\t\tif (k2 !== 'isRemove') {\n\t\t\t\t\t\treturn k2 === 'type'\n\t\t\t\t\t\t\t? acc2\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t...acc2,\n\t\t\t\t\t\t\t\t\t[getKey(k, v, k2)]: v2\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {};\n\t\t\t\t},\n\t\t\t\t{}\n\t\t\t)\n\t\t}),\n\t\t{}\n\t);\n}\n\nexport function normalizeContactToSoap(\n\tc: Contact\n): Array<CreateContactRequestAttr | ModifyContactRequestAttr> {\n\tconst obj: any = pick(c, [\n\t\t'nameSuffix',\n\t\t'namePrefix',\n\t\t'firstName',\n\t\t'lastName',\n\t\t'middleName',\n\t\t'image',\n\t\t'jobTitle',\n\t\t'department',\n\t\t'company',\n\t\t'notes'\n\t]);\n\tif (c.nickName) obj.nickname = c.nickName;\n\tif (c.email) merge(obj, normalizeContactMailsToSoapOp(c.email));\n\tif (c.phone) merge(obj, normalizeContactPhonesToSoapOp(c.phone));\n\tif (c.address) merge(obj, normalizeContactAddressesToSoapOp(c.address));\n\tif (c.URL) merge(obj, normalizeContactUrlsToSoapOp(c.URL));\n\treturn map<any, any>(obj, (v: any, k: any) => ({ n: k, _content: v }));\n}\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ErrorSoapBodyResponse, FOLDERS, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\n\nimport { GenericSoapPayload } from './types';\nimport { SoapLink } from '../../carbonio-ui-commons/types/folder';\nimport { ShareInfo } from '../../model/share-info';\n\nexport type CreateMountpointsRequest = GenericSoapPayload<typeof JSNS.all> & {\n\tCreateMountpointRequest: Array<{\n\t\tlink: {\n\t\t\tl: string;\n\t\t\tname: string;\n\t\t\trid: string;\n\t\t\tview: 'contact';\n\t\t\tzid: string;\n\t\t};\n\t\t_jsns: string;\n\t}>;\n};\n\nexport type CreateMountpointsResponse = GenericSoapPayload<typeof JSNS.all> & {\n\tCreateMountpointResponse: Array<{ link: Array<SoapLink & { _jsns: typeof JSNS.mail }> }>;\n};\n\n/**\n * Call the API to create mountpoints for the given shares.\n * It returns nothing because, at the moment, the generated links will be\n * fetched by the folders synchronization\n *\n * @param shares\n */\nexport const createMountpoints = (\n\tshares: Array<ShareInfo & { mountpointName: string }>\n): Promise<void> =>\n\tsoapFetch<CreateMountpointsRequest, CreateMountpointsResponse | ErrorSoapBodyResponse>('Batch', {\n\t\tCreateMountpointRequest: map(shares, (share) => ({\n\t\t\tlink: {\n\t\t\t\tl: FOLDERS.USER_ROOT,\n\t\t\t\tname: share.mountpointName,\n\t\t\t\trid: share.folderId,\n\t\t\t\tview: 'contact',\n\t\t\t\tzid: share.ownerId\n\t\t\t},\n\t\t\t_jsns: 'urn:zimbraMail'\n\t\t})),\n\t\t_jsns: JSNS.all\n\t}).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t});\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { GenericSoapPayload } from './types';\n\nexport const CONTACT_ACTION_OPERATION = {\n\tmove: 'move',\n\tdelete: 'delete',\n\tflag: 'flag',\n\ttrash: 'trash',\n\ttag: 'tag',\n\tupdate: 'update'\n} as const;\n\ntype ContactActionOperation =\n\t(typeof CONTACT_ACTION_OPERATION)[keyof typeof CONTACT_ACTION_OPERATION];\n\nexport interface ContactActionRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\taction: {\n\t\top: ContactActionOperation;\n\t\tid: string;\n\t\tl?: string;\n\t};\n}\n\nexport type ContactActionResponse = GenericSoapPayload<typeof JSNS.mail> & {\n\taction: {\n\t\top: ContactActionOperation;\n\t\tid: string;\n\t\tl?: string;\n\t};\n};\n\nexport type ContactActionParams = {\n\tcontactsIds: Array<string>;\n\toperation: ContactActionOperation;\n\tfolderId?: string;\n};\n\nexport const contactAction = ({\n\tcontactsIds,\n\toperation,\n\tfolderId\n}: ContactActionParams): Promise<ContactActionResponse> => {\n\tconst actionRequests: ContactActionRequest = {\n\t\taction: {\n\t\t\top: operation,\n\t\t\tid: contactsIds.join(','),\n\t\t\t...(folderId !== undefined && { l: folderId })\n\t\t},\n\t\t_jsns: JSNS.mail\n\t};\n\n\treturn soapFetch<ContactActionRequest, ContactActionResponse | ErrorSoapBodyResponse>(\n\t\t'ContactAction',\n\t\tactionRequests\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t\treturn response;\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { GenericSoapPayload } from './types';\n\nexport type FolderActionOperation =\n\t| 'read'\n\t| 'delete'\n\t| 'rename'\n\t| 'move'\n\t| 'trash'\n\t| 'empty'\n\t| 'color'\n\t| 'grant'\n\t| '!grant'\n\t| 'revokeorphangrants'\n\t| 'url'\n\t| 'import'\n\t| 'sync'\n\t| 'fb'\n\t| 'check'\n\t| '!check'\n\t| 'update'\n\t| 'syncon'\n\t| '!syncon'\n\t| 'retentionpolicy'\n\t| 'disableactivesync'\n\t| '!disableactivesync'\n\t| 'webofflinesyncdays';\n\nexport interface FolderActionRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\taction: {\n\t\tid: string;\n\t\top: FolderActionOperation;\n\t\tname?: string;\n\t\tl?: string;\n\t\trecursive?: boolean;\n\t\tcolor?: number;\n\t\tzid?: string;\n\t\ttype?: string;\n\t};\n}\n\nexport type FolderActionResponse = GenericSoapPayload<typeof JSNS.mail> & {\n\taction: {\n\t\tzid?: string; // Grantee ID\n\t\td?: string; // Display name\n\t\tkey?: string; // Access key (Password)\n\t\tid: string; // Comma-separated list of ids which have been successfully processed\n\t\top: FolderActionOperation; // Operation\n\t\tnei?: string; // Comma-separated list of non-existent ids (if requested)\n\t\tnci?: string; // Comma-separated list of newly created ids (if requested)\n\t};\n};\n\nexport type FolderActionParams = {\n\tfolderId: string;\n\toperation: FolderActionOperation;\n\trecursive?: boolean;\n\tparentId?: string;\n\tgranteeId?: string;\n\tname?: string;\n\tcolor?: number;\n\ttype?: string;\n};\n\n/**\n * Call the API to perform actions on a folder/tag.\n * It returns nothing because, at the moment, the generated items will be\n * fetched by the folders synchronization\n *\n * @param params\n */\nexport const folderAction = (params: FolderActionParams): Promise<void> => {\n\tconst request: FolderActionRequest = {\n\t\taction: {\n\t\t\tid: params.folderId,\n\t\t\top: params.operation,\n\t\t\t...(params.parentId !== undefined && { l: params.parentId }),\n\t\t\t...(params.recursive !== undefined && { recursive: params.recursive }),\n\t\t\t...(params.name !== undefined && { name: params.name }),\n\t\t\t...(params.color !== undefined && { color: params.color }),\n\t\t\t...(params.granteeId !== undefined && { zid: params.granteeId }),\n\t\t\t...(params.type !== undefined && { type: params.type })\n\t\t},\n\t\t_jsns: JSNS.mail\n\t};\n\treturn soapFetch<FolderActionRequest, FolderActionResponse | ErrorSoapBodyResponse>(\n\t\t'FolderAction',\n\t\trequest\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { JSNS } from '@zextras/carbonio-shell-ui';\n\nimport { CnItem, GenericSoapPayload } from './types';\nimport { FIND_CONTACT_GROUP_LIMIT } from '../../constants';\nimport { ContactGroup } from '../../model/contact-group';\n\nexport interface FindContactGroupsRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\tlimit: number;\n\toffset: number;\n\tsortBy: string;\n\ttypes: string;\n\tquery: string;\n}\n\nexport interface FindContactGroupsResponse extends GenericSoapPayload<typeof JSNS.mail> {\n\tcn?: Array<CnItem>;\n\tsortBy: string;\n\toffset: number;\n\tmore: boolean;\n}\n\nexport const findContactGroups = (\n\toffset = 0\n): Promise<{ contactGroups: Array<ContactGroup>; hasMore: boolean }> =>\n\tfetch(`/service/soap/SearchRequest`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tBody: {\n\t\t\t\tSearchRequest: {\n\t\t\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\t\t\tlimit: FIND_CONTACT_GROUP_LIMIT,\n\t\t\t\t\toffset,\n\t\t\t\t\tsortBy: 'nameAsc',\n\t\t\t\t\ttypes: 'contact',\n\t\t\t\t\tquery: '#type:group in:contacts'\n\t\t\t\t}\n\t\t\t},\n\t\t\tHeader: {\n\t\t\t\tcontext: {\n\t\t\t\t\t_jsns: 'urn:zimbra'\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t})\n\t\t.then((response) => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\tthrow new Error('Something went wrong');\n\t\t})\n\t\t.then((res: { Body: { SearchResponse: FindContactGroupsResponse } }) => {\n\t\t\tconst contactGroups = res.Body.SearchResponse.cn\n\t\t\t\t? res.Body.SearchResponse.cn.map((value) => ({\n\t\t\t\t\t\tid: value.id,\n\t\t\t\t\t\ttitle: value._attrs.fullName ?? '',\n\t\t\t\t\t\tmembers:\n\t\t\t\t\t\t\tvalue.m?.filter((value) => value.type === 'I').map((value) => value.value) ?? []\n\t\t\t\t\t}))\n\t\t\t\t: [];\n\t\t\treturn { contactGroups, hasMore: res.Body.SearchResponse.more };\n\t\t});\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { BooleanString, ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { filter, first, flatMap } from 'lodash';\n\nimport { GenericSoapPayload } from './types';\nimport { DistributionList, DistributionListOwner } from '../../model/distribution-list';\n\nexport interface GetDistributionListRequest extends GenericSoapPayload<typeof JSNS.account> {\n\tdl: {\n\t\tby: 'name' | 'id';\n\t\t_content: string;\n\t};\n\tneedOwners?: boolean;\n}\n\nexport type GetDistributionListResponse = GenericSoapPayload<typeof JSNS.account> & {\n\tdl: Array<{\n\t\tid: string;\n\t\tname: string;\n\t\tisOwner?: boolean;\n\t\tisMember?: boolean;\n\t\towners?: Array<{ owner: Array<{ id?: string; name?: string }> }>;\n\t\t_attrs?: {\n\t\t\tdisplayName?: string;\n\t\t\tdescription?: string;\n\t\t\tzimbraHideInGal?: BooleanString;\n\t\t};\n\t}>;\n};\n\nconst normalizeOwners = (\n\tresponse: GetDistributionListResponse['dl'][number]['owners']\n): DistributionList['owners'] =>\n\tflatMap<NonNullable<typeof response>[number], DistributionListOwner>(response, (item) =>\n\t\tfilter(item.owner, (owner): owner is DistributionListOwner => !!owner?.id && !!owner.name)\n\t);\n\nconst normalizeResponse = (response: GetDistributionListResponse): DistributionList | undefined => {\n\tconst dl = first(response.dl);\n\tif (dl === undefined) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tid: dl.id,\n\t\temail: dl.name,\n\t\tdisplayName: dl._attrs?.displayName ?? '',\n\t\tisOwner: dl.isOwner ?? false,\n\t\tisMember: dl.isMember ?? false,\n\t\towners: normalizeOwners(dl.owners),\n\t\tdescription: dl._attrs?.description ?? '',\n\t\tcanRequireMembers: dl._attrs?.zimbraHideInGal !== 'TRUE' || dl.isOwner === true\n\t};\n};\n\nexport const getDistributionList = ({\n\tid,\n\temail\n}: Partial<Pick<DistributionList, 'id' | 'email'>>): Promise<DistributionList | undefined> => {\n\tif (id === undefined && email === undefined) {\n\t\tthrow new Error('At least one between id and email is required');\n\t}\n\tlet request: GetDistributionListRequest['dl'] = { by: 'name', _content: '' };\n\tif (email !== undefined) {\n\t\trequest = {\n\t\t\tby: 'name',\n\t\t\t_content: email\n\t\t};\n\t} else if (id !== undefined) {\n\t\trequest = {\n\t\t\tby: 'id',\n\t\t\t_content: id\n\t\t};\n\t}\n\treturn soapFetch<GetDistributionListRequest, GetDistributionListResponse | ErrorSoapBodyResponse>(\n\t\t'GetDistributionList',\n\t\t{\n\t\t\t_jsns: JSNS.account,\n\t\t\tdl: request,\n\t\t\tneedOwners: true\n\t\t}\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t\treturn normalizeResponse(response);\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const getItem = (itemId: string): Promise<string> => {\n\tconst params = {\n\t\tid: itemId\n\t};\n\tconst init: RequestInit = {\n\t\tmethod: 'get'\n\t};\n\tconst relativeUrl = `/service/home/~/?${new URLSearchParams(params).toString()}`;\n\tconst absoluteUrl = new URL(relativeUrl, 'http://localhost/').toString();\n\tconst url = process.env.NODE_ENV === 'test' ? absoluteUrl : relativeUrl;\n\treturn fetch(url, init).then((response) => response.text());\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nexport const buildArrayFromFileList = (filesList: FileList): Array<File> => {\n\tconst files: Array<File> = [];\n\tif (!filesList) {\n\t\treturn files;\n\t}\n\tfor (let fileIndex = 0; fileIndex < filesList.length; fileIndex += 1) {\n\t\tfiles.push(filesList[fileIndex]);\n\t}\n\n\treturn files;\n};\n\nexport const encodeNonAsciiAndQuotesToDecimal = (source: string): string => {\n\tlet result = '';\n\tfor (let i = 0; i < source.length; i += 1) {\n\t\tconst charCode = source.charCodeAt(i);\n\t\t// Encode non-ascii or double quotes\n\t\tif (charCode > 127 || charCode === 34) {\n\t\t\tlet temp = charCode.toString(10);\n\t\t\twhile (temp.length < 4) {\n\t\t\t\ttemp = `0${temp}`;\n\t\t\t}\n\t\t\tresult += `&#${temp};`;\n\t\t} else {\n\t\t\tresult += source.charAt(i);\n\t\t}\n\t}\n\treturn result;\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { createContactFromVcard } from './api/create-contact';\nimport { createContactGroup } from './api/create-contact-group';\nimport { createFolder } from './api/create-folder';\nimport { createMountpoints } from './api/create-mountpoints';\nimport { deleteContact } from './api/delete-contact';\nimport { deleteFolder } from './api/delete-folder';\nimport { distributionListAction } from './api/distribution-list-action';\nimport { emptyFolder } from './api/empty-folder';\nimport { exportContacts } from './api/export-contacts';\nimport { findContactGroups } from './api/find-contact-groups';\nimport { getAccountDistributionLists } from './api/get-account-distribution-lists';\nimport { getDistributionList } from './api/get-distribution-list';\nimport { getDistributionListMembers } from './api/get-distribution-list-members';\nimport { getItem } from './api/get-item';\nimport { getShareInfo } from './api/get-share-info';\nimport { importContacts } from './api/import-contacts';\nimport { modifyContactGroup } from './api/modify-contact';\nimport { moveContact } from './api/move-contact';\nimport { moveFolder } from './api/move-folder';\nimport { revokeFolderGrant } from './api/revoke-folder-grant';\nimport { sendShareNotification } from './api/send-share-notification';\nimport { shareFolder } from './api/share-folder';\nimport { trashFolder } from './api/trash-folder';\nimport { updateFolder } from './api/update-folder';\nimport { upload } from './api/upload';\n\nexport const apiClient = {\n\tcreateContactGroup,\n\tdistributionListAction,\n\tgetDistributionList,\n\tgetDistributionListMembers,\n\tfindContactGroups,\n\tdeleteContact,\n\tmoveContact,\n\tgetAccountDistributionLists,\n\tmodifyContactGroup,\n\tgetShareInfo,\n\tcreateMountpoints,\n\tdeleteFolder,\n\ttrashFolder,\n\tmoveFolder,\n\temptyFolder,\n\texportContacts,\n\timportContacts,\n\tupload,\n\tshareFolder,\n\trevokeFolderGrant,\n\tsendShareNotification,\n\tupdateFolder,\n\tcreateFolder,\n\tgetItem,\n\tcreateContactFromVcard\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { CnItem } from './types';\nimport { ContactGroup } from '../../model/contact-group';\n\nexport const createContactGroup = (title: string, members: Array<string>): Promise<ContactGroup> =>\n\tfetch(`/service/soap/CreateContactRequest`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tBody: {\n\t\t\t\tCreateContactRequest: {\n\t\t\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\t\t\tcn: {\n\t\t\t\t\t\ta: [\n\t\t\t\t\t\t\t{ n: 'fullName', _content: title },\n\t\t\t\t\t\t\t{ n: 'nickname', _content: title },\n\t\t\t\t\t\t\t{ n: 'type', _content: 'group' },\n\t\t\t\t\t\t\t{ n: 'fileAs', _content: `8:${title}` }\n\t\t\t\t\t\t],\n\t\t\t\t\t\tm: members.map((member) => ({ type: 'I', value: member }))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tHeader: {\n\t\t\t\tcontext: {\n\t\t\t\t\t_jsns: 'urn:zimbra'\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t})\n\t\t.then((response) => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\tthrow new Error('Something went wrong');\n\t\t})\n\t\t.then(({ Body }: { Body: { CreateContactResponse: { cn: Array<CnItem> } } }) => {\n\t\t\tconst cnItem = Body.CreateContactResponse.cn[0];\n\n\t\t\treturn {\n\t\t\t\tid: cnItem.id,\n\t\t\t\ttitle: cnItem._attrs.fullName ?? '',\n\t\t\t\tmembers: cnItem.m?.map((value) => value.value) ?? []\n\t\t\t};\n\t\t});\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { GenericSoapPayload } from './types';\nimport { SoapFault } from '../../types/utils';\n\nexport type DistributionListActionOperationMembers = 'addMembers' | 'removeMembers';\nexport type DistributionListActionOperationModify = 'modify';\n\nexport type DistributionListAttributes = {\n\tdisplayName?: string;\n\tdescription?: string;\n};\n\ntype MappedAttributes = NonNullable<\n\t{\n\t\t[K in keyof DistributionListAttributes]-?: {\n\t\t\tn: K;\n\t\t\t_content: NonNullable<DistributionListAttributes[K]>;\n\t\t};\n\t}[keyof DistributionListAttributes]\n>;\n\ntype AttributesArray = Array<MappedAttributes>;\n\nexport interface DistributionListActionRequest extends GenericSoapPayload<typeof JSNS.account> {\n\tdl: {\n\t\tby: 'name';\n\t\t_content: string;\n\t};\n\taction:\n\t\t| {\n\t\t\t\top: DistributionListActionOperationMembers;\n\t\t\t\tdlm: Array<{\n\t\t\t\t\t_content: string;\n\t\t\t\t}>;\n\t\t  }\n\t\t| {\n\t\t\t\top: DistributionListActionOperationModify;\n\t\t\t\ta: AttributesArray;\n\t\t  };\n}\n\nexport type DistributionListActionResponse = GenericSoapPayload<typeof JSNS.account>;\n\nexport type BatchDistributionListActionRequest = GenericSoapPayload<typeof JSNS.all> & {\n\tDistributionListActionRequest: Array<DistributionListActionRequest>;\n};\n\nexport type BatchDistributionListActionResponse = GenericSoapPayload<typeof JSNS.all> & {\n\tDistributionListActionResponse?: Array<DistributionListActionResponse>;\n\tFault?: Array<SoapFault>;\n};\n\nexport const distributionListAction = ({\n\temail,\n\tdisplayName,\n\tdescription,\n\tmembersToRemove,\n\tmembersToAdd\n}: {\n\temail: string;\n\tdisplayName?: string;\n\tdescription?: string;\n\tmembersToAdd?: Array<string>;\n\tmembersToRemove?: Array<string>;\n}): Promise<void> => {\n\tconst actionRequests: Array<DistributionListActionRequest> = [];\n\n\tif (displayName !== undefined || description !== undefined) {\n\t\tconst attributes: AttributesArray = [];\n\t\tif (displayName !== undefined) {\n\t\t\tattributes.push({ n: 'displayName', _content: displayName });\n\t\t}\n\t\tif (description !== undefined) {\n\t\t\tattributes.push({ n: 'description', _content: description });\n\t\t}\n\n\t\tactionRequests.push({\n\t\t\tdl: {\n\t\t\t\tby: 'name',\n\t\t\t\t_content: email\n\t\t\t},\n\t\t\taction: {\n\t\t\t\top: 'modify',\n\t\t\t\ta: attributes\n\t\t\t},\n\t\t\t_jsns: JSNS.account,\n\t\t\trequestId: 'modify'\n\t\t});\n\t}\n\n\tif (membersToAdd && membersToAdd.length > 0) {\n\t\tactionRequests.push({\n\t\t\tdl: {\n\t\t\t\tby: 'name',\n\t\t\t\t_content: email\n\t\t\t},\n\t\t\taction: {\n\t\t\t\top: 'addMembers',\n\t\t\t\tdlm: membersToAdd.map((member) => ({ _content: member }))\n\t\t\t},\n\t\t\t_jsns: JSNS.account,\n\t\t\trequestId: 'addMembers'\n\t\t});\n\t}\n\n\tif (membersToRemove && membersToRemove.length > 0) {\n\t\tactionRequests.push({\n\t\t\tdl: {\n\t\t\t\tby: 'name',\n\t\t\t\t_content: email\n\t\t\t},\n\t\t\taction: {\n\t\t\t\top: 'removeMembers',\n\t\t\t\tdlm: membersToRemove.map((member) => ({ _content: member }))\n\t\t\t},\n\t\t\t_jsns: JSNS.account,\n\t\t\trequestId: 'removeMembers'\n\t\t});\n\t}\n\n\tif (actionRequests.length === 0) {\n\t\treturn Promise.resolve();\n\t}\n\n\treturn soapFetch<BatchDistributionListActionRequest, BatchDistributionListActionResponse>(\n\t\t'Batch',\n\t\t{\n\t\t\tDistributionListActionRequest: actionRequests,\n\t\t\t_jsns: JSNS.all\n\t\t}\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\t// TODO create a specific BatchSoapError\n\t\t\tthrow new Error(response.Fault?.map((fault) => fault.Reason.Text).join(',\\n'), {\n\t\t\t\tcause: response.Fault\n\t\t\t});\n\t\t}\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\n\nimport { GenericSoapPayload } from './types';\nimport { DistributionListMembersPage } from '../../model/distribution-list';\n\nexport interface GetDistributionListMembersRequest extends GenericSoapPayload<typeof JSNS.account> {\n\tdl: {\n\t\t// get members request works only by passing the email as content of the dl field\n\t\t_content: string;\n\t};\n\tlimit?: number;\n\toffset?: number;\n}\n\nexport type GetDistributionListMembersResponse = GenericSoapPayload<typeof JSNS.account> & {\n\tdlm?: Array<{ _content: string }>;\n\tmore?: boolean;\n\ttotal?: number;\n};\n\nconst normalizeResponse = (\n\tresponse: GetDistributionListMembersResponse\n): DistributionListMembersPage => ({\n\ttotal: response.total ?? 0,\n\tmore: response.more ?? false,\n\tmembers: map(response.dlm, (item) => item._content)\n});\n\nexport const getDistributionListMembers = (\n\temail: string,\n\toptions: { offset?: number; limit?: number } = {}\n): Promise<DistributionListMembersPage> =>\n\tsoapFetch<\n\t\tGetDistributionListMembersRequest,\n\t\tGetDistributionListMembersResponse | ErrorSoapBodyResponse\n\t>('GetDistributionListMembers', {\n\t\t_jsns: JSNS.account,\n\t\tdl: {\n\t\t\t_content: email\n\t\t},\n\t\tlimit: options.limit,\n\t\toffset: options.offset\n\t}).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\n\t\treturn normalizeResponse(response);\n\t});\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { CONTACT_ACTION_OPERATION, contactAction, ContactActionResponse } from './contact-action';\n\nexport const deleteContact = (contactsIds: Array<string>): Promise<ContactActionResponse> =>\n\tcontactAction({ operation: CONTACT_ACTION_OPERATION.delete, contactsIds });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { CONTACT_ACTION_OPERATION, contactAction, ContactActionResponse } from './contact-action';\n\nexport const moveContact = (\n\tcontactsIds: Array<string>,\n\tfolderId: string\n): Promise<ContactActionResponse> =>\n\tcontactAction({ operation: CONTACT_ACTION_OPERATION.move, contactsIds, folderId });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { BooleanString, ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { map } from 'lodash';\n\nimport { GenericSoapPayload } from './types';\nimport { DistributionList } from '../../model/distribution-list';\n\ntype Attributes = {\n\tdescription?: string;\n\tzimbraHideInGal?: BooleanString;\n};\n\nexport interface GetAccountDistributionListsRequest\n\textends GenericSoapPayload<typeof JSNS.account> {\n\townerOf?: boolean;\n\tmemberOf?: 'none' | 'all' | 'directOnly';\n\tattrs?: string;\n}\n\nexport type GetAccountDistributionListsResponse = GenericSoapPayload<typeof JSNS.account> & {\n\tdl?: Array<{\n\t\tid: string;\n\t\tname: string;\n\t\tisOwner?: boolean;\n\t\tisMember?: boolean;\n\t\t// display name\n\t\td?: string;\n\t\t_attrs?: Attributes;\n\t}>;\n};\n\nconst normalizeResponse = (\n\tresponse: GetAccountDistributionListsResponse\n): Array<DistributionList> =>\n\tmap(response.dl, (item) => ({\n\t\tid: item.id,\n\t\temail: item.name,\n\t\tdisplayName: item.d,\n\t\tisOwner: item.isOwner,\n\t\tisMember: item.isMember,\n\t\tdescription: item._attrs?.description,\n\t\tcanRequireMembers: item._attrs?.zimbraHideInGal !== 'TRUE' || item.isOwner === true\n\t}));\n\nexport const getAccountDistributionLists = (options: {\n\townerOf: boolean;\n\tmemberOf: boolean;\n}): Promise<Array<DistributionList>> =>\n\tsoapFetch<\n\t\tGetAccountDistributionListsRequest,\n\t\tGetAccountDistributionListsResponse | ErrorSoapBodyResponse\n\t>('GetAccountDistributionLists', {\n\t\t_jsns: JSNS.account,\n\t\townerOf: options.ownerOf,\n\t\tmemberOf: options.memberOf ? 'all' : 'none',\n\t\tattrs: 'description,zimbraHideInGal'\n\t}).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t\treturn normalizeResponse(response);\n\t});\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { CnItem, GenericSoapPayload } from './types';\nimport { ContactGroup } from '../../model/contact-group';\n\nexport type ModifyContactAttribute = { n: 'fullName' | 'nickname' | 'fileAs'; _content: string };\n\nexport interface ModifyContactRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\tcn: {\n\t\tid: string;\n\t\tm?: Array<{ type: 'I'; value: string; op: '+' | '-' }>;\n\t\ta?: Array<ModifyContactAttribute>;\n\t};\n}\n\nexport type ModifyContactResponse = GenericSoapPayload<typeof JSNS.mail> & {\n\tcn: Array<CnItem>;\n};\n\nexport const modifyContact = ({\n\tid,\n\taddedMembers,\n\tremovedMembers,\n\tattributes\n}: {\n\tid: string;\n\taddedMembers?: string[];\n\tremovedMembers?: string[];\n\tattributes?: Array<ModifyContactAttribute>;\n}): Promise<ModifyContactResponse> => {\n\tconst modifyContactRequest: ModifyContactRequest = {\n\t\tcn: {\n\t\t\tid,\n\t\t\tm:\n\t\t\t\taddedMembers || removedMembers\n\t\t\t\t\t? (addedMembers ?? [])\n\t\t\t\t\t\t\t.map<{ type: 'I'; value: string; op: '+' | '-' }>((m) => ({\n\t\t\t\t\t\t\t\ttype: 'I',\n\t\t\t\t\t\t\t\top: '+',\n\t\t\t\t\t\t\t\tvalue: m\n\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t.concat((removedMembers ?? []).map((m) => ({ type: 'I', op: '-', value: m })))\n\t\t\t\t\t: undefined,\n\t\t\ta: attributes\n\t\t},\n\t\t_jsns: JSNS.mail\n\t};\n\n\treturn soapFetch<ModifyContactRequest, ModifyContactResponse | ErrorSoapBodyResponse>(\n\t\t'ModifyContact',\n\t\tmodifyContactRequest\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t\treturn response;\n\t});\n};\n\nexport const modifyContactGroup = ({\n\tid,\n\taddedMembers,\n\tremovedMembers,\n\tname\n}: {\n\tid: string;\n\taddedMembers?: string[];\n\tremovedMembers?: string[];\n\tname?: string;\n}): Promise<ContactGroup> => {\n\tconst attributes: Array<ModifyContactAttribute> | undefined = name\n\t\t? [\n\t\t\t\t{ n: 'fullName', _content: name },\n\t\t\t\t{ n: 'fileAs', _content: `8:${name}` },\n\t\t\t\t{ n: 'nickname', _content: name }\n\t\t\t]\n\t\t: undefined;\n\treturn modifyContact({ id, addedMembers, removedMembers, attributes }).then(\n\t\t(res: ModifyContactResponse) => ({\n\t\t\tid: res.cn[0].id,\n\t\t\ttitle: res.cn[0]._attrs.fullName ?? '',\n\t\t\tmembers: res.cn[0].m?.map((value) => value.value) ?? []\n\t\t})\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { filter, isEqual, map, uniqWith } from 'lodash';\n\nimport { GenericSoapPayload } from './types';\nimport { FolderView } from '../../carbonio-ui-commons/types/folder';\nimport { ShareInfo } from '../../model/share-info';\n\nexport interface GetShareInfoRequest extends GenericSoapPayload<typeof JSNS.account> {\n\tincludeSelf?: 0 | 1;\n}\n\nexport type GetShareInfoResponse = GenericSoapPayload<typeof JSNS.account> & {\n\tshare: Array<{\n\t\tfolderId: string;\n\t\tfolderPath: string;\n\t\tfolderUuid: string;\n\t\tgranteeType: string;\n\t\townerEmail: string;\n\t\townerId: string;\n\t\townerName?: string;\n\t\trights: string;\n\t\tview: FolderView;\n\t}>;\n};\n\nconst normalizeResponse = (\n\tresponse: GetShareInfoResponse | undefined\n): Array<ShareInfo> | undefined => {\n\tif (response?.share === undefined || response.share.length === 0) {\n\t\treturn undefined;\n\t}\n\n\t// Filter shares that don't belong to Contacts\n\tconst shares = uniqWith(filter(response.share, ['view', 'contact']), isEqual);\n\n\t// Normalize the shares\n\treturn map(\n\t\tshares,\n\t\t(share): ShareInfo => ({\n\t\t\tfolderId: `${share.folderId}`, // Temporary workaround for IRIS-5125\n\t\t\tfolderPath: share.folderPath,\n\t\t\tfolderUuid: share.folderUuid,\n\t\t\tgranteeType: share.granteeType,\n\t\t\townerEmail: share.ownerEmail,\n\t\t\townerId: share.ownerId,\n\t\t\townerName: share.ownerName ?? share.ownerEmail,\n\t\t\trights: share.rights\n\t\t})\n\t);\n};\n\nexport const getShareInfo = (): Promise<Array<ShareInfo> | undefined> =>\n\tsoapFetch<GetShareInfoRequest, GetShareInfoResponse | ErrorSoapBodyResponse>('GetShareInfo', {\n\t\tincludeSelf: 0,\n\t\t_jsns: JSNS.account\n\t}).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t\treturn normalizeResponse(response);\n\t});\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { folderAction } from './folder-action';\n\nexport const deleteFolder = (folderId: string): Promise<void> =>\n\tfolderAction({ folderId, operation: 'delete' });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { folderAction } from './folder-action';\n\nexport const trashFolder = (folderId: string): Promise<void> =>\n\tfolderAction({ folderId, operation: 'trash' });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { folderAction } from './folder-action';\n\nexport const moveFolder = (folderId: string, parentId: string): Promise<void> =>\n\tfolderAction({ folderId, operation: 'move', parentId });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { folderAction } from './folder-action';\n\nexport const emptyFolder = (folderId: string): Promise<void> =>\n\tfolderAction({ folderId, operation: 'empty', recursive: true, type: 'contacts' });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { GenericSoapPayload } from './types';\n\nexport interface ExportContactsRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\tct: 'csv';\n\tcsvfmt: string;\n\tl: string;\n}\n\nexport type ExportContactsResponse = GenericSoapPayload<typeof JSNS.mail> & {\n\tcontent: Array<{\n\t\t_content: string;\n\t}>;\n};\n\nconst normalizeResponse = (response: ExportContactsResponse): string =>\n\tresponse.content?.[0]._content;\n\nexport const exportContacts = (folderId: string): Promise<string> => {\n\tconst body = {\n\t\t_jsns: 'urn:zimbraMail',\n\t\tct: 'csv',\n\t\tcsvfmt: 'thunderbird-csv',\n\t\tl: folderId\n\t} satisfies ExportContactsRequest;\n\treturn soapFetch<ExportContactsRequest, ExportContactsResponse | ErrorSoapBodyResponse>(\n\t\t'ExportContacts',\n\t\tbody\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\n\t\treturn normalizeResponse(response);\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { GenericSoapPayload } from './types';\n\nexport interface ImportContactsRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\tct: 'csv';\n\tcsvfmt: 'thunderbird-csv';\n\tl: string;\n\tcontent: { aid: string };\n}\n\nexport type ImportContactsResponse = GenericSoapPayload<typeof JSNS.mail> & {\n\tcn: Array<{ n?: number; ids: string }>;\n};\n\nexport type ImportContactsParams = {\n\tfolderId: string;\n\taid: string;\n};\n\nexport type ImportContactsResult = {\n\tcontactsCount?: number;\n\tcontactsIds: Array<string>;\n};\n\nconst normalizeResponse = (response: ImportContactsResponse): ImportContactsResult => ({\n\tcontactsCount: response.cn?.[0]?.n ?? 0,\n\tcontactsIds: response.cn?.[0]?.ids ? response.cn?.[0].ids.split(',') : []\n});\n\nexport const importContacts = async ({\n\tfolderId,\n\taid\n}: ImportContactsParams): Promise<ImportContactsResult> =>\n\tsoapFetch<ImportContactsRequest, ImportContactsResponse | ErrorSoapBodyResponse>(\n\t\t'ImportContacts',\n\t\t{\n\t\t\t_jsns: JSNS.mail,\n\t\t\tct: 'csv',\n\t\t\tcsvfmt: 'thunderbird-csv',\n\t\t\tl: folderId,\n\t\t\tcontent: { aid }\n\t\t}\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\n\t\treturn normalizeResponse(response);\n\t});\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { encodeNonAsciiAndQuotesToDecimal } from '../../legacy/helpers/file';\n\nexport type UploadResponseFileInfo = [\n\tnumber,\n\t'null',\n\tArray<{\n\t\taid: string;\n\t\tct: string;\n\t\tfilename: string;\n\t\ts: number;\n\t}>\n];\n\nexport type UploadedFileInfo = {\n\taid: string;\n\tcontentType: string;\n\tfileName: string;\n\tsize: number;\n};\n\nconst normalizeResponse = (rawResponse: string): Array<UploadedFileInfo> => {\n\t// eslint-disable-next-line no-new-func\n\tconst response: UploadResponseFileInfo = Function(`'use strict'; return ([${rawResponse}])`)();\n\tif (response.length !== 3) {\n\t\treturn [];\n\t}\n\n\tconst filesInfo = response[2];\n\treturn filesInfo.map((fileInfo) => ({\n\t\taid: fileInfo.aid,\n\t\tcontentType: fileInfo.ct,\n\t\tfileName: fileInfo.filename,\n\t\tsize: fileInfo.s\n\t}));\n};\n\nexport const upload = (file: File): Promise<Array<UploadedFileInfo>> =>\n\tfetch('/service/upload?fmt=extended,raw', {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Cache-Control': 'no-cache',\n\t\t\t'X-Requested-With': 'XMLHttpRequest',\n\t\t\t'Content-Type': `${file.type || 'application/octet-stream'};`,\n\t\t\t'Content-Disposition': `attachment; filename=\"${encodeNonAsciiAndQuotesToDecimal(file.name)}\"`\n\t\t},\n\t\tbody: file\n\t})\n\t\t.then((response) => response.text())\n\t\t.then((response) => {\n\t\t\tconst result = normalizeResponse(response);\n\t\t\tif (result.length === 0) {\n\t\t\t\tthrow new Error('No file uploaded');\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\nimport { isArray } from 'lodash';\n\nimport { FolderActionRequest, FolderActionResponse } from './folder-action';\nimport { GenericSoapPayload } from './types';\nimport { SoapFault } from '../../types/utils';\n\nexport interface BatchShareFolderRequest extends GenericSoapPayload<typeof JSNS.all> {\n\tFolderActionRequest: Array<FolderActionRequest>;\n}\n\nexport type BatchShareFolderResponse = GenericSoapPayload<typeof JSNS.all> & {\n\tFolderActionResponse?: Array<FolderActionResponse>;\n\tFault?: SoapFault | Array<SoapFault>;\n};\n\nexport type ShareFolderParams = {\n\taddresses: Array<string>;\n\trole: string;\n\tfolderId: string;\n};\n\nexport const shareFolder = ({ addresses, folderId, role }: ShareFolderParams): Promise<void> => {\n\tconst actionRequests: Array<FolderActionRequest> = addresses.map((address, key) => ({\n\t\taction: {\n\t\t\tid: folderId,\n\t\t\top: 'grant',\n\t\t\tgrant: {\n\t\t\t\tgt: 'usr',\n\t\t\t\td: address,\n\t\t\t\tperm: role\n\t\t\t}\n\t\t},\n\t\t_jsns: JSNS.mail\n\t}));\n\n\treturn soapFetch<BatchShareFolderRequest, BatchShareFolderResponse>('Batch', {\n\t\tFolderActionRequest: actionRequests,\n\t\t_jsns: JSNS.all\n\t}).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tif (isArray(response.Fault)) {\n\t\t\t\tthrow new Error(response.Fault?.map((fault) => fault.Reason.Text).join(',\\n'), {\n\t\t\t\t\tcause: response.Fault\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthrow new Error(response.Fault?.Reason.Text, {\n\t\t\t\tcause: response.Fault\n\t\t\t});\n\t\t}\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { folderAction } from './folder-action';\n\nexport const revokeFolderGrant = (folderId: string, granteeId: string): Promise<void> =>\n\tfolderAction({ folderId, operation: '!grant', granteeId });\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { map } from 'lodash';\n\nexport type SendShareNotificationParams = {\n\taccountName: string;\n\tfolderId: string;\n\taddresses: Array<string>;\n\tmessage?: string;\n};\n\n/*\n * TODO handle faults\n *\n * TODO JSON requests\n */\nexport const sendShareNotification = async ({\n\taccountName,\n\tfolderId,\n\taddresses,\n\tmessage\n}: SendShareNotificationParams): Promise<Array<void>> =>\n\tPromise.all(\n\t\tmap(addresses, (address) =>\n\t\t\tfetch('/service/soap/SendShareNotificationRequest', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/soap+xml'\n\t\t\t\t},\n\t\t\t\tbody: `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n                <soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\n                    <soap:Header>\n                        <context xmlns=\"urn:zimbra\">\n                            <account by=\"name\">${accountName}</account>\n                            <format type=\"js\"/>\n                        </context>\n                    </soap:Header>\n                    <soap:Body>\n                    <SendShareNotificationRequest xmlns=\"urn:zimbraMail\">\n                           <item id=\"${folderId}\"/>\n                           <e a=\"${address}\"/>\n                           ${message ? `<notes>${message}</notes>` : ''}\n                           \n                    </SendShareNotificationRequest>\t\t\t\t\n                    </soap:Body>\n                </soap:Envelope>\n            `\n\t\t\t}).then((response) => response.json())\n\t\t)\n\t);\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { folderAction } from './folder-action';\n\nexport type UpdateFolderParams = {\n\tfolderId: string;\n\tname?: string;\n\tparentId?: string;\n\tcolor?: number;\n};\n\nexport const updateFolder = ({\n\tfolderId,\n\tname,\n\tparentId,\n\tcolor\n}: UpdateFolderParams): Promise<void> =>\n\tfolderAction({\n\t\tfolderId,\n\t\tname,\n\t\tparentId,\n\t\tcolor,\n\t\toperation: 'update'\n\t});\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { ErrorSoapBodyResponse, JSNS, soapFetch } from '@zextras/carbonio-shell-ui';\n\nimport { GenericSoapPayload } from './types';\nimport { FOLDER_VIEW } from '../../carbonio-ui-commons/constants';\nimport { FolderView, SoapFolder } from '../../carbonio-ui-commons/types/folder';\n\nexport interface CreateFolderRequest extends GenericSoapPayload<typeof JSNS.mail> {\n\tfolder: {\n\t\tview: FolderView;\n\t\tl: string;\n\t\tname: string;\n\t};\n}\n\nexport type CreateFolderResponse = GenericSoapPayload<typeof JSNS.mail> & {\n\tfolder: SoapFolder;\n};\n\nexport type CreateFolderParams = {\n\tparentFolderId: string;\n\tname: string;\n};\n\nexport const createFolder = (params: CreateFolderParams): Promise<void> => {\n\tconst request: CreateFolderRequest = {\n\t\tfolder: {\n\t\t\tview: FOLDER_VIEW.contact,\n\t\t\tl: params.parentFolderId,\n\t\t\tname: params.name\n\t\t},\n\t\t_jsns: JSNS.mail\n\t};\n\treturn soapFetch<CreateFolderRequest, CreateFolderResponse | ErrorSoapBodyResponse>(\n\t\t'CreateFolder',\n\t\trequest\n\t).then((response) => {\n\t\tif ('Fault' in response) {\n\t\t\tthrow new Error(response.Fault.Reason.Text, { cause: response.Fault });\n\t\t}\n\t});\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { FOLDERS } from '@zextras/carbonio-shell-ui';\n\nimport { CnItem } from './types';\n\nexport const createContactFromVcard = (messageId: string, part: string): Promise<CnItem> =>\n\tfetch(`/service/soap/CreateContactRequest`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\tBody: {\n\t\t\t\tCreateContactRequest: {\n\t\t\t\t\t_jsns: 'urn:zimbraMail',\n\t\t\t\t\tcn: {\n\t\t\t\t\t\tl: FOLDERS.CONTACTS,\n\t\t\t\t\t\tvcard: {\n\t\t\t\t\t\t\tmid: messageId,\n\t\t\t\t\t\t\tpart\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tHeader: {\n\t\t\t\tcontext: {\n\t\t\t\t\t_jsns: 'urn:zimbra'\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t})\n\t\t.then((response) => {\n\t\t\tif (response.ok) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\tthrow new Error('Something went wrong');\n\t\t})\n\t\t.then(\n\t\t\t({ Body }: { Body: { CreateContactResponse: { cn: Array<CnItem> } } }) =>\n\t\t\t\tBody.CreateContactResponse.cn[0]\n\t\t);\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { sortBy, toLower } from 'lodash';\nimport { create } from 'zustand';\n\nimport { DistributionList } from '../model/distribution-list';\nimport { MakeOptional } from '../types/utils';\n\nexport type StoredDistributionList = MakeOptional<DistributionList, 'id'>;\ntype State = {\n\tdistributionLists?: Array<StoredDistributionList>;\n};\n\ntype Actions = {\n\tsetDistributionLists: (newItems: Array<StoredDistributionList>) => void;\n\tupsertDistributionList: (item: StoredDistributionList) => void;\n\treset: () => void;\n};\n\nconst initialState: State = {\n\tdistributionLists: undefined\n};\n\nexport const useDistributionListsStore = create<State & Actions>()((set, get) => ({\n\t...initialState,\n\tsetDistributionLists: (newItems): void => {\n\t\tset({ distributionLists: newItems });\n\t},\n\tupsertDistributionList: (item): void => {\n\t\tconst current = get().distributionLists;\n\t\tif (current !== undefined) {\n\t\t\tconst idx = current.findIndex((dl) => dl.id === item.id || dl.email === item.email);\n\t\t\t// TODO use toSpliced once available\n\t\t\tconst newDistributionLists = [...current];\n\t\t\tnewDistributionLists.splice(idx, idx === -1 ? 0 : 1, {\n\t\t\t\t...newDistributionLists[idx],\n\t\t\t\t...item\n\t\t\t});\n\t\t\t// Keep array sorted by \"name\" (display name in fallback to email) ascending\n\t\t\tset({\n\t\t\t\tdistributionLists: sortBy(newDistributionLists, (dl) => toLower(dl.displayName || dl.email))\n\t\t\t});\n\t\t}\n\t},\n\treset: (): void => {\n\t\tset(initialState);\n\t}\n}));\n"],"names":["getFolderRequest","async","id","view","account","body","omitBy","_jsns","folder","l","undefined","tr","isNil","soapFetch","ContactInputIntegrationWrapper","props","React","ContactInput","createContactIntegration","createSnackbar","t","context","apiClient","createContactFromVcard","messageId","part","then","key","Date","toLocaleString","type","label","catch","SyncDataHandler","notifyList","useNotify","seq","setSeq","useState","refresh","useRefresh","dispatch","useAppDispatch","initialized","setInitialized","useEffect","isEmpty","length","forEach","sortBy","notify","created","cn","handleCreatedContactsSync","normalizeSyncContactsFromSoap","modified","norm","handleModifiedContactsSync","deleted","handleDeletedContactsSync","LazyAppView","lazy","LazySecondaryBarView","LazyLegacySecondaryBarView","LazyGroupsAppView","LazySettingsView","LazySearchView","LazyBoardView","LazyNewContactGroupBoardView","LazyEditContactGroupBoardView","LazyEditDLBoardView","AppView","Suspense","fallback","Spinner","StoreProvider","ModalManager","SecondaryBarView","AppViewV2","BoardView","NewContactGroupBoardView","EditContactGroupBoardView","EditDLBoardView","SettingsView","SearchView","LegacySecondaryBarView","App","useTranslation","navigateTo","useNavigation","useSnackbar","addRoute","route","CONTACTS_ROUTE","position","visible","primaryBar","secondaryBar","appView","GROUPS_ROUTE","addSettingsView","component","addSearchView","addBoardView","NEW_CONTACT_GROUP_BOARD_ID","EDIT_CONTACT_GROUP_BOARD_ID","EDIT_DL_BOARD_ID","registerComponents","registerActions","action","icon","onClick","ev","preventDefault","addBoard","url","title","disabled","group","CONTACTS_APP_ID","primary","ACTION_TYPES","NEW","registerFunctions","fn","initializing","setInitializing","previous","rootFolders","result","includeSelf","Promise","reject","Fault","resolve","isFulfilled","folders","share","getShareInfoRequest","sharedFolders","sharedAccounts","filter","filteredLinks","link","all","map","ownerEmail","response","oname","name","owner","getFoldersByAccounts","folderWorker","postMessage","op","currentView","item","state","useFolderStore","getState","useFoldersController","FOLDER_VIEW","contact","search_folder","tag","conversation","message","document","appointment","virtual_conversation","remote_folder","wiki","task","chat","FOLDERID_REGEX","getFolderIdParts","folderId","zid","match","parts","exec","isA","folderType","isDefaultAccountRoot","FOLDERS","USER_ROOT","isRoot","isLink","isSharedAccountFolder","isSystemFolder","Object","values","includes","isTrashed","folderIdAbsPath","absFolderPath","path","toLowerCase","startsWith","isTrash","TRASH","isWriteAllowed","perm","isCreateAllowed","isDeleteAllowed","isAdministerAllowed","useFolder","s","getFolder","useFoldersMap","getRootFolderId","parent","ROOT_NAME","useRoot","rootFolderId","useRootsArray","f","split","create","set","linksIdMap","searches","updateFolder","opt","produce","onmessage","data","setState","isNestedInTrash","Worker","URL","CHIP_DISPLAY_NAME_VALUES","email","ACTION_IDS","editDL","expandDL","sendEmail","sendEmailCG","deleteCG","editCG","copyToClipboard","addSharedAddressBooks","trashAddressBook","deleteAddressBook","createAddressBook","moveAddressBook","editAddressBook","emptyAddressBook","emptyTrash","removeAddressBookLink","exportAddressBook","importContacts","showShareInfo","moveContacts","restoreContacts","trashContacts","exportContact","CONTACT_GROUP_NAME_MAX_LENGTH","DL_NAME_MAX_LENGTH","ROUTES","mainRoute","contactGroups","distributionLists","ROUTES_INTERNAL_PARAMS","member","manager","DISPLAYER_WIDTH","LIST_WIDTH","LIST_ITEM_HEIGHT","FIND_CONTACT_GROUP_LIMIT","DL_MEMBERS_LOAD_LIMIT","DL_TABS","details","members","managers","LOCAL_STORAGES","EXPANDED_ADDRESSBOOKS","TIMEOUTS","defaultSnackbar","useGetDistributionListMembers","limit","initialLimit","skip","upsertDistributionList","useDistributionListsStore","offsetRef","useRef","innerDistributionListMembersPage","setInnerDistributionListMembersPage","loading","setLoading","findStoredMembersPage","useCallback","items","find","storedDistributionListMembersPage","useMemo","distributionListMembersPage","updateDistributionListMembersPage","newState","offset","current","prevState","more","total","storedMembers","canRequireMembers","loadMembers","getDistributionListMembers","newMembersPage","toDateString","replace","autoHideTimeout","hideButton","finally","Error","shouldLoadFirstPage","dataIsPartial","findMore","REQUIRED_FIELDS","useGetDistributionList","storedItem","dl","distributionList","setDistributionList","shouldLoadData","some","field","getDistributionList","pushHistory","usePushHistoryCallback","replaceHistory","useReplaceHistoryCallback","options","useDispatch","useAppSelector","useSelector","StyledChip","styled","Chip","withConfig","displayName","componentId","theme","palette","gray3","regular","isChipItemDistributionList","isGroup","debounceUserInput","debounce","trailing","leading","DistributionListChip","contactInputOnChange","contactInputValue","actions","propActions","rest","open","setOpen","showMoreLabel","selectAllItemLabel","count","defaultValue_one","defaultValue_other","memberDropdownItems","keepOpen","itemIconSize","updateContactInputValue","newItems","newValue","value","onSelectAllClick","selectAllButton","tooltipLabel","customComponent","Container","width","mainAlignment","orientation","Button","size","shape","onShowMore","moreButton","expandDLAction","collapseDLAction","chipActions","push","onChipClick","e","stopPropagation","Dropdown","placement","forceOpen","disableAutoFocus","onClose","_extends","background","color","hasAvatar","closable","ContactInputCustomChipComponent","chipDisplayName","contactActions","chipLabel","reduce","contactAction","isVisible","emailRegex","isContactGroup","display","getChipLabel","firstName","middleName","lastName","trim","address","fullName","Hint","crossAlignment","minWidth","minHeight","Avatar","padding","left","Text","Row","takeAvailableSpace","SkeletonTile","height","radius","gray2","Loader","Math","random","style","marginBottom","ContactInputCore","onChange","defaultValue","placeholder","dragAndDropEnabled","orderedAccountIds","inputRef","propsInputRef","defaults","setDefaults","setOptions","idToRemove","setIdToRemove","useCombinedRefs","emptyDraggedChip","dragStartRef","draggedChip","isSameElement","buildDragStartHandler","chip","dataTransfer","setData","JSON","stringify","dropEffect","c","obj","draggable","onDragStart","noop","buildDraggableChip","isValidEmail","test","editChip","text","scrollWidth","onInputType","textContent","innerText","replaceAll","valueToAdd","now","toString","error","avatarIcon","AutoCompleteRequest","includeGal","autoCompleteResult","m","slice","remoteResults","normRemoteResults","first","last","company","full","exp","groupId","groups","def","derefGroupMember","newContacts","_attrs","updatedValue","uniqBy","onAdd","ChipComponent","onDragEnter","resetDraggedChip","onDragEnd","newDefaults","onDrop","chipJson","getData","parse","newChip","ChipInput","disableOptions","confirmChipOnBlur","requireUniqueChips","createChipOnPaste","pasteSeparators","separators","code","ctrlKey","onDragOver","createAsyncThunk","contactsIDs","destinationID","tagName","ids","join","tn","createContact","cnt","fileAsStr","a","normalizeContactToSoap","modifyContact","updatedContact","force","searchContacts","types","query","_content","storeReducers","combineReducers","contacts","contactSliceReducer","store","configureStore","devTools","reducer","children","Provider","folderAction","recursive","contactActionPending","request","meta","arg","status","pendingActions","findContactsInStore","cloneDeep","removeContactsFromStore","addContactsToStore","contactActionFulFilled","contactActionRejected","createContactPending","createContactFulFilled","payload","removeContactsWithoutID","createContactRejected","folderActionPending","prevFolderState","newFolder","applyFoldersChangesToStore","removeFoldersFromStore","newAcl","sharedWith","grant","rights","updatedFolder","console","warn","folderActionRejected","modifyContactPending","updateContactsInStore","modifyContactFulFilled","modifyContactRejected","editContact","searchContactsPending","searchContactsRejected","searchContactsFullFilled","normalizeContactsFromSoap","contactsSlice","createSlice","initialState","reducers","acc","v","oldContact","updated","orderBy","extraReducers","builder","addCase","pending","fulfilled","rejected","folderIdRegex","idsToDelete","cid","isFolderInStore","merge","contactsArray","k","acc2","v2","acc3","v3","contactInStore","sharedFolderParent","getFolderTranslatedName","folderName","translationKey","CONTACTS","AUTO_CONTACTS","ContactPhoneType","ContactUrlType","MAIL_REG","PHONE_REG","URL_REG","ADDR_PART_REG","contactPhoneTypeFromString","OTHER","MOBILE","WORK","HOME","contactUrlTypeFromString","normalizeContactAddresses","r","attr","subType","index","words","lowerFirst","parseInt","getParts","normalizeContactMails","pickBy","mail","normalizeContactPhones","number","normalizeContactUrls","tags","department","givenName","nickName","nickname","image","jobTitle","notes","phone","nameSuffix","namePrefix","getKey","lower","toUpperCase","pick","mails","phones","addresses","urls","k2","n","contactsIds","operation","actionRequests","JSNS","Reason","cause","params","parentId","granteeId","normalizeOwners","flatMap","encodeNonAsciiAndQuotesToDecimal","source","i","charCode","charCodeAt","temp","charAt","createContactGroup","fetch","method","headers","Body","CreateContactRequest","Header","ok","json","cnItem","CreateContactResponse","distributionListAction","description","membersToRemove","membersToAdd","attributes","by","requestId","dlm","DistributionListActionRequest","fault","needOwners","isOwner","isMember","owners","zimbraHideInGal","normalizeResponse","findContactGroups","SearchRequest","res","SearchResponse","hasMore","deleteContact","moveContact","getAccountDistributionLists","ownerOf","memberOf","attrs","d","modifyContactGroup","addedMembers","removedMembers","modifyContactRequest","concat","getShareInfo","shares","uniqWith","isEqual","folderPath","folderUuid","granteeType","ownerId","ownerName","createMountpoints","CreateMountpointRequest","mountpointName","rid","deleteFolder","trashFolder","moveFolder","emptyFolder","exportContacts","ct","csvfmt","content","aid","contactsCount","upload","file","rawResponse","Function","fileInfo","contentType","fileName","filename","shareFolder","role","gt","FolderActionRequest","isArray","revokeFolderGrant","sendShareNotification","accountName","createFolder","parentFolderId","getItem","itemId","relativeUrl","URLSearchParams","vcard","mid","get","setDistributionLists","idx","findIndex","newDistributionLists","splice","toLower","reset"],"sourceRoot":""}