{"version":3,"file":"newTaskView.d413f39a.chunk.js","mappings":"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","sources":["webpack://carbonio-tasks-ui/./src/apollo/cacheUtils.ts","webpack://carbonio-tasks-ui/./src/components/CustomSelectLabelFactory.tsx","webpack://carbonio-tasks-ui/./src/views/board/CommonTaskBoard.tsx","webpack://carbonio-tasks-ui/./src/views/board/NewTaskBoard.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { type Reference } from '@apollo/client';\nimport { type Modifier } from '@apollo/client/cache';\nimport { filter, findIndex, map } from 'lodash';\n\nimport { type Task } from '../gql/types';\n\nexport const removeTaskFromList: (\n\t...tasks: Pick<Task, '__typename' | 'id'>[]\n) => Modifier<readonly Reference[] | Reference> =\n\t(...tasks) =>\n\t(existing, { toReference }) => {\n\t\tif (existing && Array.isArray(existing)) {\n\t\t\tconst taskRefs = map(tasks, (task) => toReference(task)?.__ref);\n\t\t\treturn filter(existing, (itemRef) => !taskRefs.includes(itemRef.__ref));\n\t\t}\n\t\treturn existing;\n\t};\n\nexport const addTaskToList: (\n\ttask: Pick<Task, '__typename' | 'id'>\n) => Modifier<readonly Reference[] | Reference> =\n\t(task) =>\n\t(existing, { toReference, readField }) => {\n\t\tconst newTaskRef = toReference(task);\n\t\tif (existing && newTaskRef && Array.isArray(existing)) {\n\t\t\tconst updatedList = [...existing];\n\t\t\tconst index = findIndex(existing, (existingRef) => {\n\t\t\t\tconst existingTaskCreatedAt = readField<number>({\n\t\t\t\t\tfieldName: 'createdAt',\n\t\t\t\t\tfrom: existingRef\n\t\t\t\t});\n\t\t\t\tconst newTaskCreatedAt = readField<number>({ fieldName: 'createdAt', from: newTaskRef });\n\t\t\t\treturn (\n\t\t\t\t\texistingTaskCreatedAt !== undefined &&\n\t\t\t\t\tnewTaskCreatedAt !== undefined &&\n\t\t\t\t\texistingTaskCreatedAt < newTaskCreatedAt\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (index >= 0) {\n\t\t\t\tupdatedList.splice(index, 0, newTaskRef);\n\t\t\t} else {\n\t\t\t\tupdatedList.push(newTaskRef);\n\t\t\t}\n\t\t\treturn updatedList;\n\t\t}\n\t\treturn existing;\n\t};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { type ComponentProps, useMemo } from 'react';\n\nimport {\n\tContainer,\n\tDivider,\n\tgetColor,\n\tIcon,\n\tPadding,\n\tRow,\n\ttype SelectProps,\n\tText\n} from '@zextras/carbonio-design-system';\nimport { isEmpty } from 'lodash';\nimport styled, { css, type SimpleInterpolation } from 'styled-components';\n\nimport { Priority } from '../gql/types';\n\nconst CustomIcon = styled(Icon)`\n\talign-self: center;\n\tpointer-events: none;\n`;\n\nconst Label = styled(Text)<{ $selected: boolean }>`\n\tposition: absolute;\n\ttop: ${({ $selected, theme }): string =>\n\t\t$selected ? `calc(${theme.sizes.padding.small} - 0.0625rem)` : '50%'};\n\tleft: ${({ theme }): string => theme.sizes.padding.large};\n\ttransform: translateY(${({ $selected }): string => ($selected ? '0' : '-50%')});\n\ttransition: 150ms ease-out;\n`;\n\nconst ContainerEl = styled(Container)<{ $focus: boolean }>`\n\ttransition: background 0.2s ease-out;\n\t&:hover {\n\t\tbackground: ${({ theme }): string => getColor(`gray5.hover`, theme)};\n\t}\n\t${({ $focus, theme }): SimpleInterpolation =>\n\t\t$focus &&\n\t\tcss`\n\t\t\tbackground: ${getColor(`gray5.focus`, theme)};\n\t\t`};\n`;\n\nconst CustomText = styled(Text)`\n\tmin-height: 1.167em;\n\tline-height: 1.5rem;\n`;\n\nexport const CustomSelectLabelFactory: React.VFC<\n\tComponentProps<NonNullable<SelectProps['LabelFactory']>>\n> = ({ selected, label, open, focus, background, disabled }) => {\n\tconst selectedLabels = useMemo(\n\t\t() =>\n\t\t\t!isEmpty(selected) &&\n\t\t\tselected.reduce<string[]>((arr, obj) => [...arr, obj.label], []).join(', '),\n\t\t[selected]\n\t);\n\n\tconst selectedIcon = useMemo(() => {\n\t\tif (selected.length !== 1) {\n\t\t\tthrow new Error('invalid selected length');\n\t\t}\n\t\tconst priority = selected[0].value as Priority;\n\t\treturn (\n\t\t\t(priority === Priority.Low && <Icon icon={'ArrowheadDown'} color=\"info\" />) ||\n\t\t\t(priority === Priority.High && <Icon icon={'ArrowheadUp'} color=\"error\" />) || (\n\t\t\t\t<Icon icon={'MinusOutline'} color=\"gray1\" />\n\t\t\t)\n\t\t);\n\t}, [selected]);\n\n\treturn (\n\t\t<>\n\t\t\t<ContainerEl\n\t\t\t\torientation=\"horizontal\"\n\t\t\t\twidth=\"fill\"\n\t\t\t\tcrossAlignment=\"flex-end\"\n\t\t\t\tmainAlignment=\"space-between\"\n\t\t\t\tborderRadius=\"half\"\n\t\t\t\tpadding={{\n\t\t\t\t\thorizontal: 'large',\n\t\t\t\t\ttop: 'small'\n\t\t\t\t}}\n\t\t\t\tbackground={background}\n\t\t\t\t$focus={focus}\n\t\t\t>\n\t\t\t\t<Row takeAvailableSpace mainAlignment=\"unset\">\n\t\t\t\t\t<Padding top=\"medium\" width=\"100%\">\n\t\t\t\t\t\t<Container orientation={'horizontal'} mainAlignment={'flex-start'} gap={'1rem'}>\n\t\t\t\t\t\t\t{selectedIcon}\n\t\t\t\t\t\t\t<CustomText size=\"medium\" color={disabled ? 'secondary' : 'text'}>\n\t\t\t\t\t\t\t\t{selectedLabels}\n\t\t\t\t\t\t\t</CustomText>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Padding>\n\t\t\t\t\t<Label\n\t\t\t\t\t\t$selected={!isEmpty(selected)}\n\t\t\t\t\t\tsize={!isEmpty(selected) ? 'small' : 'medium'}\n\t\t\t\t\t\tcolor={(disabled && 'gray2') || ((open || focus) && 'primary') || 'secondary'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</Label>\n\t\t\t\t</Row>\n\t\t\t\t<CustomIcon\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\ticon={open ? 'ArrowUp' : 'ArrowDown'}\n\t\t\t\t\tcolor={(disabled && 'gray2') || ((open || focus) && 'primary') || 'secondary'}\n\t\t\t\t/>\n\t\t\t</ContainerEl>\n\t\t\t<Divider color={open || focus ? 'primary' : 'gray3'} />\n\t\t</>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport {\n\tButton,\n\ttype ButtonProps,\n\tCheckbox,\n\ttype CheckboxProps,\n\tContainer,\n\tDateTimePicker,\n\ttype DateTimePickerProps,\n\tIcon,\n\ttype IconProps,\n\tInput,\n\ttype InputProps,\n\tPadding,\n\tSelect,\n\ttype SelectItem,\n\ttype SingleSelectionOnChange,\n\tSwitch,\n\ttype SwitchProps,\n\tTextArea,\n\ttype TextAreaProps\n} from '@zextras/carbonio-design-system';\nimport { t, useBoardHooks } from '@zextras/carbonio-shell-ui';\nimport { find, size, trim } from 'lodash';\n\nimport { CustomSelectLabelFactory } from '../../components/CustomSelectLabelFactory';\nimport { Text } from '../../components/Text';\nimport {\n\tALL_DAY_DATE_TIME_PICKER_DATE_FORMAT,\n\tTASK_DESCRIPTION_MAX_LENGTH,\n\tTASK_TITLE_MAX_LENGTH,\n\tTIME_SPECIFIC_DATE_TIME_PICKER_DATE_FORMAT\n} from '../../constants';\nimport { Priority } from '../../gql/types';\nimport { Divider, TextField } from '@mui/material';\n\nconst PrioritySelectionItem = ({\n\ticon,\n\ticonColor,\n\tlabel\n}: {\n\ticon: IconProps['icon'];\n\ticonColor: IconProps['color'];\n\tlabel: string;\n}): React.JSX.Element => (\n\t<Container width=\"fit\" mainAlignment=\"flex-start\" orientation=\"horizontal\" gap={'1rem'}>\n\t\t<Icon icon={icon} color={iconColor} />\n\t\t<Text>{label}</Text>\n\t</Container>\n);\n\nconst priorityItems: Array<SelectItem> = [\n\t{\n\t\tlabel: t('task.priority', {\n\t\t\tcontext: 'high',\n\t\t\tdefaultValue: 'High'\n\t\t}),\n\t\tvalue: Priority.High,\n\t\tcustomComponent: (\n\t\t\t<PrioritySelectionItem\n\t\t\t\ticon={'ArrowheadUp'}\n\t\t\t\ticonColor={'error'}\n\t\t\t\tlabel={t('task.priority', {\n\t\t\t\t\tcontext: 'high',\n\t\t\t\t\tdefaultValue: 'High'\n\t\t\t\t})}\n\t\t\t/>\n\t\t)\n\t},\n\t{\n\t\tlabel: t('task.priority', {\n\t\t\tcontext: 'medium',\n\t\t\tdefaultValue: 'Medium'\n\t\t}),\n\t\tvalue: Priority.Medium,\n\t\tcustomComponent: (\n\t\t\t<PrioritySelectionItem\n\t\t\t\ticon={'MinusOutline'}\n\t\t\t\ticonColor={'gray1'}\n\t\t\t\tlabel={t('task.priority', {\n\t\t\t\t\tcontext: 'medium',\n\t\t\t\t\tdefaultValue: 'Medium'\n\t\t\t\t})}\n\t\t\t/>\n\t\t)\n\t},\n\t{\n\t\tlabel: t('task.priority', {\n\t\t\tcontext: 'low',\n\t\t\tdefaultValue: 'Low'\n\t\t}),\n\t\tvalue: Priority.Low,\n\t\tcustomComponent: (\n\t\t\t<PrioritySelectionItem\n\t\t\t\ticon={'ArrowheadDown'}\n\t\t\t\ticonColor={'info'}\n\t\t\t\tlabel={t('task.priority', {\n\t\t\t\t\tcontext: 'low',\n\t\t\t\t\tdefaultValue: 'Low'\n\t\t\t\t})}\n\t\t\t/>\n\t\t)\n\t}\n];\n\nfunction isPriorityValidValue(value: string): value is Priority {\n\treturn (Object.values(Priority) as string[]).includes(value);\n}\n\ntype OnConfirmArg = {\n\ttitle: string;\n\tdescription: string;\n\tpriority: Priority;\n} & (\n\t| {\n\t\t\tenableReminder: false;\n\t\t\treminderAllDay?: never;\n\t\t\treminderAt?: never;\n\t  }\n\t| {\n\t\t\tenableReminder: true;\n\t\t\treminderAllDay: boolean;\n\t\t\treminderAt: Date;\n\t  }\n);\n\nexport interface CommonTaskBoardProps {\n\tinitialTitle: string;\n\tinitialPriority: Priority;\n\tinitialDescription: string;\n\tinitialEnableReminder: boolean;\n\tinitialIsAllDay: boolean;\n\tinitialDate: Date;\n\tonConfirm: (arg: OnConfirmArg) => void;\n\tbanner?: React.JSX.Element;\n\tconfirmLabel: string;\n\tdefaultBoardTabTitle: string;\n}\n\nexport const CommonTaskBoard = ({\n\tinitialTitle,\n\tinitialPriority,\n\tinitialDescription,\n\tinitialEnableReminder,\n\tinitialIsAllDay,\n\tinitialDate,\n\tonConfirm,\n\tbanner,\n\tconfirmLabel,\n\tdefaultBoardTabTitle\n}: CommonTaskBoardProps): React.JSX.Element => {\n\tconst { updateBoard } = useBoardHooks();\n\tuseEffect(() => {\n\t\tif (initialTitle) {\n\t\t\tupdateBoard({ title: initialTitle });\n\t\t}\n\t}, [initialTitle, updateBoard]);\n\n\tconst [titleValue, setTitleValue] = useState(initialTitle);\n\n\tconst onTitleChange = useCallback<NonNullable<InputProps['onChange']>>(\n\t\t(ev) => {\n\t\t\tsetTitleValue(ev.target.value);\n\t\t\tif (size(ev.target.value) === 0) {\n\t\t\t\tupdateBoard({ title: defaultBoardTabTitle });\n\t\t\t} else {\n\t\t\t\tupdateBoard({ title: ev.target.value });\n\t\t\t}\n\t\t},\n\t\t[defaultBoardTabTitle, updateBoard]\n\t);\n\n\tconst [selectedPriority, setSelectedPriority] = useState(initialPriority);\n\n\tconst onPriorityChange = useCallback<SingleSelectionOnChange>((value) => {\n\t\tif (value && isPriorityValidValue(value)) {\n\t\t\tsetSelectedPriority(value);\n\t\t}\n\t}, []);\n\n\tconst prioritySelection = useMemo(() => {\n\t\tconst selectItem = find(\n\t\t\tpriorityItems,\n\t\t\t(priorityItem) => priorityItem.value === selectedPriority\n\t\t);\n\t\tif (selectItem) {\n\t\t\treturn selectItem;\n\t\t}\n\t\tconsole.error('Invalid priority select item');\n\t\treturn priorityItems[1];\n\t}, [selectedPriority]);\n\n\tconst [enableReminder, setEnableReminder] = useState(initialEnableReminder);\n\n\tconst [date, setDate] = useState<Date | null>(initialDate);\n\n\tconst handleChange = useCallback<NonNullable<DateTimePickerProps['onChange']>>((newDateValue) => {\n\t\tsetDate(newDateValue);\n\t}, []);\n\n\tconst onClickEnableReminder = useCallback<NonNullable<SwitchProps['onClick']>>(\n\t\t() =>\n\t\t\tsetEnableReminder((prevState) => {\n\t\t\t\tif (prevState) {\n\t\t\t\t\tsetDate(initialDate);\n\t\t\t\t}\n\t\t\t\treturn !prevState;\n\t\t\t}),\n\t\t[initialDate]\n\t);\n\n\tconst [isAllDay, setIsAllDay] = useState(initialIsAllDay);\n\n\tconst onClickAllDayCheckbox = useCallback<NonNullable<CheckboxProps['onClick']>>(\n\t\t() =>\n\t\t\tsetIsAllDay((prevState) => {\n\t\t\t\tif (!prevState && date === null) {\n\t\t\t\t\tsetDate(initialDate);\n\t\t\t\t}\n\t\t\t\treturn !prevState;\n\t\t\t}),\n\t\t[date, initialDate]\n\t);\n\n\tconst [descriptionValue, setDescriptionValue] = useState(initialDescription);\n\n\tconst onChangeDescription = useCallback<NonNullable<TextAreaProps['onChange']>>((event) => {\n\t\tsetDescriptionValue(event.currentTarget.value);\n\t}, []);\n\n\tconst isConfirmDisabled = useMemo(\n\t\t() =>\n\t\t\tdate === null ||\n\t\t\ttitleValue.length > TASK_TITLE_MAX_LENGTH ||\n\t\t\ttrim(titleValue).length === 0 ||\n\t\t\tdescriptionValue.length > TASK_DESCRIPTION_MAX_LENGTH,\n\t\t[date, descriptionValue.length, titleValue]\n\t);\n\n\tconst onClickConfirmButton = useCallback<NonNullable<ButtonProps['onClick']>>(() => {\n\t\tif (enableReminder) {\n\t\t\tonConfirm({\n\t\t\t\ttitle: titleValue,\n\t\t\t\tdescription: descriptionValue,\n\t\t\t\tpriority: selectedPriority,\n\t\t\t\treminderAllDay: isAllDay,\n\t\t\t\tenableReminder: true,\n\t\t\t\treminderAt: date as Date\n\t\t\t});\n\t\t} else {\n\t\t\tonConfirm({\n\t\t\t\ttitle: titleValue,\n\t\t\t\tdescription: descriptionValue,\n\t\t\t\tpriority: selectedPriority,\n\t\t\t\tenableReminder: false\n\t\t\t});\n\t\t}\n\t}, [date, descriptionValue, enableReminder, isAllDay, onConfirm, selectedPriority, titleValue]);\n\n\treturn (\n\t\t// <Container\n\t\t// \tcrossAlignment={'flex-end'}\n\t\t// \tbackground={'gray5'}\n\t\t// \tpadding={{ horizontal: 'large', bottom: '2.625rem' }}\n\t\t// \tminHeight={'30rem'}\n\t\t// >\n\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\twidth: '100%',\n\t\t\t\theight: '100%',\n\t\t\t\tdisplay: 'flex',\n\t\t\t\tflexDirection: 'column',\n\t\t\t\tjustifyContent: 'space-between'\n\t\t\t}}\n\t\t>\n\t\t\t<div style={{ display: 'flex', justifyContent: 'flex-start', flexDirection: 'column' }}>\n\t\t\t\t<div style={{ display: 'flex', flexDirection: 'column', padding: '16px' }}>\n\t\t\t\t\t<Container\n\t\t\t\t\t\tbackground={'gray6'}\n\t\t\t\t\t\tmainAlignment={'flex-start'}\n\t\t\t\t\t\tcrossAlignment={'flex-start'}\n\t\t\t\t\t\tpadding={{ horizontal: 'small', top: 'small' }}\n\t\t\t\t\t\tgap={'0.5rem'}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Text weight={'bold'} overflow={'ellipsis'}>\n\t\t\t\t\t\t\t{t('board.label.details', 'Details')}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t<Container\n\t\t\t\t\t\t\torientation={'horizontal'}\n\t\t\t\t\t\t\theight={'fit'}\n\t\t\t\t\t\t\tgap={'0.5rem'}\n\t\t\t\t\t\t\tcrossAlignment={'flex-start'}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\t\t\t\tlabel={t('board.input.title.label', 'Title*')}\n\t\t\t\t\t\t\t\tvalue={titleValue}\n\t\t\t\t\t\t\t\tonChange={onTitleChange}\n\t\t\t\t\t\t\t\terror={titleValue.length > TASK_TITLE_MAX_LENGTH}\n\t\t\t\t\t\t\t\taria-describedby={\n\t\t\t\t\t\t\t\t\ttitleValue.length > TASK_TITLE_MAX_LENGTH\n\t\t\t\t\t\t\t\t\t\t? t(\n\t\t\t\t\t\t\t\t\t\t\t\t'board.input.description.error.label',\n\t\t\t\t\t\t\t\t\t\t\t\t'Maximum length allowed is 1024 characters'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\titems={priorityItems}\n\t\t\t\t\t\t\t\tbackground={'white'}\n\t\t\t\t\t\t\t\tlabel={t('board.select.priority.label', 'Priority')}\n\t\t\t\t\t\t\t\tonChange={onPriorityChange}\n\t\t\t\t\t\t\t\tselection={prioritySelection}\n\t\t\t\t\t\t\t\tLabelFactory={CustomSelectLabelFactory}\n\t\t\t\t\t\t\t\tstyle={{ border: '1px solid lightgray', height: '56px' }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\tvalue={enableReminder}\n\t\t\t\t\t\t\tonClick={onClickEnableReminder}\n\t\t\t\t\t\t\tlabel={t('board.switch.enableReminder.label', 'Enable reminder')}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{enableReminder && (\n\t\t\t\t\t\t\t<DateTimePicker\n\t\t\t\t\t\t\t\tbackgroundColor=\"transparent\"\n\t\t\t\t\t\t\t\twidth={'fill'}\n\t\t\t\t\t\t\t\tlabel={t('board.dateTimePicker.reminder.label', 'Reminder')}\n\t\t\t\t\t\t\t\tdefaultValue={date || undefined}\n\t\t\t\t\t\t\t\tincludeTime={!isAllDay}\n\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\tdateFormat={\n\t\t\t\t\t\t\t\t\tisAllDay\n\t\t\t\t\t\t\t\t\t\t? ALL_DAY_DATE_TIME_PICKER_DATE_FORMAT\n\t\t\t\t\t\t\t\t\t\t: TIME_SPECIFIC_DATE_TIME_PICKER_DATE_FORMAT\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\thasError={date === null}\n\t\t\t\t\t\t\t\terrorLabel={\n\t\t\t\t\t\t\t\t\tdate === null\n\t\t\t\t\t\t\t\t\t\t? t(\n\t\t\t\t\t\t\t\t\t\t\t\t'board.dateTimePicker.description.error.label',\n\t\t\t\t\t\t\t\t\t\t\t\t'The reminder option is enabled, set date and time for it or disable the reminder'\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{enableReminder && (\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tvalue={isAllDay}\n\t\t\t\t\t\t\t\tonClick={onClickAllDayCheckbox}\n\t\t\t\t\t\t\t\tlabel={t(\n\t\t\t\t\t\t\t\t\t'board.checkbox.allDay.label',\n\t\t\t\t\t\t\t\t\t'Remind me at every login throughout the day'\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Text weight={'bold'}>{t('board.label.description', 'Description')}</Text>\n\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\tmultiline\n\t\t\t\t\t\t\trows={4}\n\t\t\t\t\t\t\tlabel={t('board.textArea.taskDescription.label', 'Task Description')}\n\t\t\t\t\t\t\tvalue={descriptionValue}\n\t\t\t\t\t\t\tonChange={onChangeDescription}\n\t\t\t\t\t\t\terror={descriptionValue.length > TASK_DESCRIPTION_MAX_LENGTH}\n\t\t\t\t\t\t\taria-describedby={\n\t\t\t\t\t\t\t\tdescriptionValue.length > TASK_DESCRIPTION_MAX_LENGTH\n\t\t\t\t\t\t\t\t\t? t(\n\t\t\t\t\t\t\t\t\t\t\t'board.textArea.description.error.label',\n\t\t\t\t\t\t\t\t\t\t\t'Maximum length allowed is 4096 characters'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/* <TextArea\n\t\t\t\t\t\t\tborderColor={'white'}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlabel={t('board.textArea.taskDescription.label', 'Task Description')}\n\t\t\t\t\t\t\tvalue={descriptionValue}\n\t\t\t\t\t\t\tonChange={onChangeDescription}\n\t\t\t\t\t\t\thasError={descriptionValue.length > TASK_DESCRIPTION_MAX_LENGTH}\n\t\t\t\t\t\t\tdescription={\n\t\t\t\t\t\t\t\tdescriptionValue.length > TASK_DESCRIPTION_MAX_LENGTH\n\t\t\t\t\t\t\t\t\t? t(\n\t\t\t\t\t\t\t\t\t\t\t'board.textArea.description.error.label',\n\t\t\t\t\t\t\t\t\t\t\t'Maximum length allowed is 4096 characters'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/> */}\n\t\t\t\t\t</Container>\n\t\t\t\t</div>\n\n\t\t\t\t<div>{banner}</div>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\tjustifyContent: 'flex-start',\n\t\t\t\t\tpadding: '16px',\n\t\t\t\t\twidth: '100%'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Divider style={{ marginBottom: '8px' }} />\n\t\t\t\t<Button\n\t\t\t\t\tdisabled={isConfirmDisabled}\n\t\t\t\t\tsize={'medium'}\n\t\t\t\t\tlabel={confirmLabel}\n\t\t\t\t\tonClick={onClickConfirmButton}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\n\t\t// </Container>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useMemo } from 'react';\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { Banner, useSnackbar } from '@zextras/carbonio-design-system';\nimport { t, useBoardHooks } from '@zextras/carbonio-shell-ui';\nimport { filter, trim } from 'lodash';\n\nimport { CommonTaskBoard, type CommonTaskBoardProps } from './CommonTaskBoard';\nimport { addTaskToList } from '../../apollo/cacheUtils';\nimport { MAX_TASKS_LIMIT } from '../../constants';\nimport {\n\tCreateTaskDocument,\n\tFindTasksDocument,\n\ttype FindTasksQuery,\n\tPriority,\n\tStatus\n} from '../../gql/types';\nimport { type NonNullableList } from '../../types/utils';\nimport { identity } from '../../utils';\n\nconst NewTaskBoard = (): React.JSX.Element => {\n\tconst { closeBoard } = useBoardHooks();\n\tconst createSnackbar = useSnackbar();\n\n\tconst { data: findTasksResult } = useQuery(FindTasksDocument, {\n\t\tfetchPolicy: 'cache-first',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\terrorPolicy: 'all'\n\t});\n\n\tconst tasks = useMemo(\n\t\t(): NonNullableList<FindTasksQuery['findTasks']> =>\n\t\t\tfilter(findTasksResult?.findTasks, identity),\n\t\t[findTasksResult]\n\t);\n\n\tconst [createTaskMutation] = useMutation(CreateTaskDocument);\n\n\tconst onConfirm = useCallback<CommonTaskBoardProps['onConfirm']>(\n\t\t({ title, priority, description, reminderAt, reminderAllDay, enableReminder }) => {\n\t\t\tif (tasks.length >= MAX_TASKS_LIMIT) {\n\t\t\t\tcreateSnackbar({\n\t\t\t\t\tkey: new Date().toLocaleString(),\n\t\t\t\t\ttype: 'warning',\n\t\t\t\t\tlabel: t(\n\t\t\t\t\t\t'snackbar.tasksLimitReached',\n\t\t\t\t\t\t'You have reached your 200 tasks. Delete your previous tasks to create more.'\n\t\t\t\t\t),\n\t\t\t\t\treplace: false,\n\t\t\t\t\thideButton: true\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcreateTaskMutation({\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tnewTask: {\n\t\t\t\t\t\t\tstatus: Status.Open,\n\t\t\t\t\t\t\tdescription: trim(description).length > 0 ? trim(description) : undefined,\n\t\t\t\t\t\t\tpriority,\n\t\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t\treminderAt: enableReminder ? reminderAt.getTime() : undefined,\n\t\t\t\t\t\t\treminderAllDay: enableReminder ? reminderAllDay : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tupdate(cache, { data }) {\n\t\t\t\t\t\tif (data?.createTask) {\n\t\t\t\t\t\t\tcache.modify({\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tfindTasks: addTaskToList(data.createTask)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcloseBoard();\n\t\t\t}\n\t\t},\n\t\t[closeBoard, createSnackbar, createTaskMutation, tasks.length]\n\t);\n\n\treturn (\n\t\t<CommonTaskBoard\n\t\t\tinitialTitle={''}\n\t\t\tinitialPriority={Priority.Medium}\n\t\t\tinitialDescription={''}\n\t\t\tinitialEnableReminder={false}\n\t\t\tinitialIsAllDay={false}\n\t\t\tinitialDate={new Date()}\n\t\t\tonConfirm={onConfirm}\n\t\t\tconfirmLabel={t('board.confirmButton.create', 'create')}\n\t\t\tbanner={\n\t\t\t\t(tasks.length === MAX_TASKS_LIMIT - 1 && (\n\t\t\t\t\t<Banner\n\t\t\t\t\t\tdescription={t(\n\t\t\t\t\t\t\t'newTaskBoard.banner.lastTask',\n\t\t\t\t\t\t\t'This is the last task you can create. Delete your previous tasks to create more.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tseverity={'info'}\n\t\t\t\t\t\ttype={'outline'}\n\t\t\t\t\t/>\n\t\t\t\t)) ||\n\t\t\t\t(tasks.length >= MAX_TASKS_LIMIT && (\n\t\t\t\t\t<Banner\n\t\t\t\t\t\tdescription={t(\n\t\t\t\t\t\t\t'newTaskBoard.banner.limitReached',\n\t\t\t\t\t\t\t'You have reached your 200 tasks. Delete your previous tasks to create more.'\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tseverity={'warning'}\n\t\t\t\t\t\ttype={'outline'}\n\t\t\t\t\t/>\n\t\t\t\t)) ||\n\t\t\t\tundefined\n\t\t\t}\n\t\t\tdefaultBoardTabTitle={t('board.newTask.title', 'New Task')}\n\t\t/>\n\t);\n};\n\nexport default NewTaskBoard;\n"],"names":["removeTaskFromList","tasks","existing","toReference","Array","isArray","taskRefs","map","task","__ref","filter","itemRef","includes","addTaskToList","readField","newTaskRef","updatedList","index","findIndex","existingRef","existingTaskCreatedAt","fieldName","from","newTaskCreatedAt","undefined","splice","push","CustomIcon","styled","Icon","withConfig","displayName","componentId","Label","Text","$selected","theme","sizes","padding","small","large","ContainerEl","Container","getColor","$focus","css","CustomText","CustomSelectLabelFactory","selected","label","open","focus","background","disabled","selectedLabels","useMemo","isEmpty","reduce","arr","obj","join","selectedIcon","length","Error","priority","value","Priority","Low","React","icon","color","High","orientation","width","crossAlignment","mainAlignment","borderRadius","horizontal","top","Row","takeAvailableSpace","Padding","gap","size","Divider","PrioritySelectionItem","iconColor","priorityItems","t","context","defaultValue","customComponent","Medium","CommonTaskBoard","initialTitle","initialPriority","initialDescription","initialEnableReminder","initialIsAllDay","initialDate","onConfirm","banner","confirmLabel","defaultBoardTabTitle","updateBoard","useBoardHooks","useEffect","title","titleValue","setTitleValue","useState","onTitleChange","useCallback","ev","target","selectedPriority","setSelectedPriority","onPriorityChange","Object","values","isPriorityValidValue","prioritySelection","find","priorityItem","console","error","enableReminder","setEnableReminder","date","setDate","handleChange","newDateValue","onClickEnableReminder","prevState","isAllDay","setIsAllDay","onClickAllDayCheckbox","descriptionValue","setDescriptionValue","onChangeDescription","event","currentTarget","isConfirmDisabled","TASK_TITLE_MAX_LENGTH","trim","TASK_DESCRIPTION_MAX_LENGTH","onClickConfirmButton","description","reminderAllDay","reminderAt","style","height","display","flexDirection","justifyContent","weight","overflow","TextField","fullWidth","onChange","Select","items","selection","LabelFactory","border","Switch","onClick","DateTimePicker","backgroundColor","includeTime","dateFormat","ALL_DAY_DATE_TIME_PICKER_DATE_FORMAT","TIME_SPECIFIC_DATE_TIME_PICKER_DATE_FORMAT","hasError","errorLabel","Checkbox","multiline","rows","marginBottom","Button","NewTaskBoard","closeBoard","createSnackbar","useSnackbar","data","findTasksResult","useQuery","FindTasksDocument","fetchPolicy","notifyOnNetworkStatusChange","errorPolicy","findTasks","identity","createTaskMutation","useMutation","CreateTaskDocument","MAX_TASKS_LIMIT","key","Date","toLocaleString","type","replace","hideButton","variables","newTask","status","Status","Open","getTime","update","cache","createTask","modify","fields","Banner","severity"],"sourceRoot":""}