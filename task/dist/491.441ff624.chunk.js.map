{"version":3,"file":"491.441ff624.chunk.js","mappings":"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","sources":["webpack://carbonio-tasks-ui/./src/components/ReminderModalContent.tsx","webpack://carbonio-tasks-ui/./src/components/ReminderModalFooter.tsx","webpack://carbonio-tasks-ui/./src/components/RemindersManager.tsx","webpack://carbonio-tasks-ui/./src/app.tsx","webpack://carbonio-tasks-ui/./src/components/PriorityIcon.tsx","webpack://carbonio-tasks-ui/./src/components/Text.tsx","webpack://carbonio-tasks-ui/./src/constants/index.ts","webpack://carbonio-tasks-ui/./src/gql/types.ts","webpack://carbonio-tasks-ui/./src/providers/StyledWrapper.tsx","webpack://carbonio-tasks-ui/./src/apollo/typePolicies.ts","webpack://carbonio-tasks-ui/./src/gql/possible-types.ts","webpack://carbonio-tasks-ui/./src/apollo/index.ts","webpack://carbonio-tasks-ui/./src/providers/ProvidersWrapper.tsx","webpack://carbonio-tasks-ui/./src/sruvi/EditedColors.ts","webpack://carbonio-tasks-ui/./src/utils/index.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useMemo } from 'react';\n\nimport { Container, Icon, IconButton, Row, Tooltip } from '@zextras/carbonio-design-system';\nimport { map } from 'lodash';\nimport { useTranslation } from 'react-i18next';\n\nimport { PriorityIcon } from './PriorityIcon';\nimport { Text } from './Text';\nimport { type Priority, Status, type Task } from '../gql/types';\n\ntype ReminderItemType = Pick<Task, 'id' | 'title' | 'priority' | 'status'>;\n\ntype ReminderGroupType = { date: string; reminders: Array<ReminderItemType> };\n\ninterface ReminderGroupProps extends ReminderGroupType {\n\tcompleteAction: (item: ReminderItemType) => () => void;\n\tundoCompleteAction: (item: ReminderItemType) => () => void;\n}\n\ninterface ReminderItemProps {\n\ttitle: string;\n\tstatus: Status;\n\tpriority: Priority;\n\tcompleteAction: () => void;\n\tundoCompleteAction: () => void;\n}\ninterface ReminderModalContentProps {\n\treminders: Array<ReminderGroupType>;\n\tcompleteAction: (item: ReminderItemType) => () => void;\n\tundoCompleteAction: (item: ReminderItemType) => () => void;\n}\n\nconst ReminderItem = ({\n\ttitle,\n\tstatus,\n\tpriority,\n\tcompleteAction,\n\tundoCompleteAction\n}: ReminderItemProps): React.JSX.Element => {\n\tconst [t] = useTranslation();\n\n\treturn (\n\t\t<Row wrap={'nowrap'} mainAlignment={'space-between'} gap={'0.25rem'} width={'fill'}>\n\t\t\t<Row flexShrink={1} flexBasis={'fit-content'} gap={'0.25rem'} wrap={'nowrap'} minWidth={'0'}>\n\t\t\t\t<Row flexShrink={0} minWidth={'fit'}>\n\t\t\t\t\t{status !== Status.Complete && <PriorityIcon priority={priority} />}\n\t\t\t\t\t{status === Status.Complete && <Icon icon={'Checkmark'} color={'success'} />}\n\t\t\t\t</Row>\n\t\t\t\t<Row wrap={'nowrap'} flexShrink={1} minWidth={0} flexGrow={1} mainAlignment={'flex-start'}>\n\t\t\t\t\t<Text size={'medium'}>{title}</Text>\n\t\t\t\t</Row>\n\t\t\t\t<Row flexShrink={1} flexBasis={'fit-content'}>\n\t\t\t\t\t{status === Status.Complete && (\n\t\t\t\t\t\t<Text size={'medium'} weight={'bold'}>\n\t\t\t\t\t\t\t{t('task.status', {\n\t\t\t\t\t\t\t\tcontext: status.toLowerCase(),\n\t\t\t\t\t\t\t\tdefaultValue: 'Completed'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t)}\n\t\t\t\t</Row>\n\t\t\t</Row>\n\t\t\t<Row flexShrink={0} minWidth={'fit'}>\n\t\t\t\t{status === Status.Complete && (\n\t\t\t\t\t<Tooltip label={t('action.undo')}>\n\t\t\t\t\t\t<IconButton onClick={undoCompleteAction} icon={'UndoOutline'} size={'large'} />\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t\t{status !== Status.Complete && (\n\t\t\t\t\t<Tooltip label={t('action.complete')}>\n\t\t\t\t\t\t<IconButton onClick={completeAction} icon={'CheckmarkCircleOutline'} size={'large'} />\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t</Row>\n\t\t</Row>\n\t);\n};\n\nconst ReminderGroup = ({\n\tdate,\n\treminders,\n\tcompleteAction,\n\tundoCompleteAction\n}: ReminderGroupProps): React.JSX.Element | null => {\n\tconst [t] = useTranslation();\n\n\tconst items = useMemo(\n\t\t() =>\n\t\t\tmap(reminders, (reminder) => (\n\t\t\t\t<ReminderItem\n\t\t\t\t\tkey={reminder.id}\n\t\t\t\t\ttitle={reminder.title}\n\t\t\t\t\tstatus={reminder.status}\n\t\t\t\t\tpriority={reminder.priority}\n\t\t\t\t\tcompleteAction={completeAction(reminder)}\n\t\t\t\t\tundoCompleteAction={undoCompleteAction(reminder)}\n\t\t\t\t/>\n\t\t\t)),\n\t\t[completeAction, reminders, undoCompleteAction]\n\t);\n\n\tif (reminders.length === 0) {\n\t\treturn null;\n\t}\n\treturn (\n\t\t<Container gap={'0.5rem'} height={'fit'} crossAlignment={'flex-start'}>\n\t\t\t<Row gap={'0.5rem'} wrap={'nowrap'}>\n\t\t\t\t<Text color={'secondary'} size={'medium'}>\n\t\t\t\t\t{t('modal.reminder.remindMeOn', 'Remind me on')}\n\t\t\t\t</Text>\n\t\t\t\t<Text color={'primary'} size={'medium'}>\n\t\t\t\t\t{date}\n\t\t\t\t</Text>\n\t\t\t</Row>\n\t\t\t<Container gap={'0.5rem'}>{items}</Container>\n\t\t</Container>\n\t);\n};\n\nexport const ReminderModalContent = ({\n\treminders,\n\tcompleteAction,\n\tundoCompleteAction\n}: ReminderModalContentProps): React.JSX.Element => {\n\tconst groups = useMemo(\n\t\t() =>\n\t\t\tmap(reminders, (reminder) => (\n\t\t\t\t<ReminderGroup\n\t\t\t\t\tkey={reminder.date}\n\t\t\t\t\tcompleteAction={completeAction}\n\t\t\t\t\tundoCompleteAction={undoCompleteAction}\n\t\t\t\t\tdate={reminder.date}\n\t\t\t\t\treminders={reminder.reminders}\n\t\t\t\t/>\n\t\t\t)),\n\t\t[completeAction, reminders, undoCompleteAction]\n\t);\n\n\treturn <Container gap={'1rem'}>{groups}</Container>;\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react';\n\nimport { Button, Row } from '@zextras/carbonio-design-system';\nimport { useTranslation } from 'react-i18next';\n\ninterface ReminderModalFooterProps {\n\tcloseAction: () => void;\n\tsecondaryAction: () => void;\n\tshowSecondaryAction: boolean;\n\tsecondaryLabel: string;\n\tsecondaryIcon: string;\n}\n\nexport const ReminderModalFooter = ({\n\tcloseAction,\n\tsecondaryAction,\n\tshowSecondaryAction,\n\tsecondaryLabel,\n\tsecondaryIcon\n}: ReminderModalFooterProps): React.JSX.Element => {\n\tconst [t] = useTranslation();\n\n\treturn (\n\t\t<Row gap={'0.5rem'}>\n\t\t\t{showSecondaryAction && (\n\t\t\t\t<Button\n\t\t\t\t\ttype={'outlined'}\n\t\t\t\t\tlabel={secondaryLabel}\n\t\t\t\t\ticon={secondaryIcon}\n\t\t\t\t\tonClick={secondaryAction}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<Button label={t('modal.reminder.dismiss', 'Dismiss')} onClick={closeAction} />\n\t\t</Row>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\nimport { Modal } from '@zextras/carbonio-design-system';\nimport { getNotificationManager, updatePrimaryBadge } from '@zextras/carbonio-shell-ui';\nimport { isAfter, isBefore, isToday, startOfDay } from 'date-fns';\nimport {\n\tchain,\n\tcloneDeep,\n\tdifferenceBy,\n\tfilter,\n\tfind,\n\tfindIndex,\n\tflatMap,\n\tflatten,\n\tforEach,\n\tgroupBy,\n\tintersectionWith,\n\tisEqual,\n\tmap,\n\tpullAt,\n\treduce,\n\tremove,\n\tsome\n} from 'lodash';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\n\nimport { ReminderModalContent } from './ReminderModalContent';\nimport { ReminderModalFooter } from './ReminderModalFooter';\nimport { REMINDER_TIMEOUT_LIMIT, REMINDERS_INTERVAL_UPDATE, TASKS_ROUTE } from '../constants';\nimport { FindTasksDocument, Status, type Task, UpdateTaskStatusDocument } from '../gql/types';\nimport { debounceWithAllArgs, formatDateFromTimestamp } from '../utils';\n\ntype TaskWithReminder = Pick<Task, 'id' | 'title' | 'priority' | 'reminderAllDay' | 'status'> & {\n\treminderAt: NonNullable<Task['reminderAt']>;\n};\n\ntype ReminderEntity = TaskWithReminder & {\n\t_reminderTimeout: NodeJS.Timeout | boolean;\n\tgetKey(): string;\n\t/** Whether the reminder is within the range of time inside which it has to be shown to the user */\n\tisVisible(): boolean;\n\t/** Whether the reminder is valid to trigger a notification */\n\tisValid(): boolean;\n\t/** Start the timeout for the reminder */\n\tstartTimeout(callback: (...reminders: ReminderEntity[]) => void): NodeJS.Timeout | boolean;\n\t/** Clear the timeout for the reminder */\n\tclearTimout(): void;\n\t/** Identify reminders which have already been shown from the ones which have not */\n\thasAlreadyBeenReminded(): boolean;\n\t/** Identify reminders which have a timeout not yet started */\n\tisFutureReminder(): boolean;\n};\n\nfunction buildReminderEntity(task: TaskWithReminder, locale: string): ReminderEntity {\n\treturn {\n\t\t...task,\n\t\t_reminderTimeout: false,\n\t\tgetKey(): string {\n\t\t\treturn formatDateFromTimestamp(task.reminderAt, {\n\t\t\t\tincludeTime: task.reminderAllDay !== true,\n\t\t\t\tlocale\n\t\t\t});\n\t\t},\n\t\tisVisible(): boolean {\n\t\t\t// show only reminders of the current day\n\t\t\treturn (\n\t\t\t\tisToday(task.reminderAt) && (task.reminderAllDay || isBefore(task.reminderAt, Date.now()))\n\t\t\t);\n\t\t},\n\t\tisValid(): boolean {\n\t\t\t// reminder could trigger a notification if it is set for the current day, but also for the future,\n\t\t\t// because the session could be open at midnight, and at that moment the reminders of\n\t\t\t// tomorrow should be shown instead of the one of today\n\t\t\treturn isToday(task.reminderAt) || isAfter(task.reminderAt, Date.now());\n\t\t},\n\t\tstartTimeout(callback): NodeJS.Timeout | boolean {\n\t\t\t// start a timeout to trigger the reminder only when the reminder is in the future or in the current moment\n\t\t\tconst reminderTime = task.reminderAllDay\n\t\t\t\t? startOfDay(task.reminderAt).getTime()\n\t\t\t\t: task.reminderAt;\n\t\t\tconst epochDiffFromNow = reminderTime - Date.now();\n\t\t\tif (epochDiffFromNow >= 0) {\n\t\t\t\tif (epochDiffFromNow <= REMINDER_TIMEOUT_LIMIT) {\n\t\t\t\t\tthis._reminderTimeout = setTimeout(() => {\n\t\t\t\t\t\tcallback(this);\n\t\t\t\t\t}, epochDiffFromNow);\n\t\t\t\t} else {\n\t\t\t\t\tthis._reminderTimeout = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._reminderTimeout;\n\t\t},\n\t\tclearTimout(): void {\n\t\t\tif (typeof this._reminderTimeout !== 'boolean') {\n\t\t\t\tclearTimeout(this._reminderTimeout);\n\t\t\t\tthis._reminderTimeout = false;\n\t\t\t}\n\t\t},\n\t\thasAlreadyBeenReminded(): boolean {\n\t\t\treturn this._reminderTimeout === false;\n\t\t},\n\t\tisFutureReminder(): boolean {\n\t\t\treturn this._reminderTimeout === true;\n\t\t}\n\t} satisfies ReminderEntity;\n}\n\nfunction isTaskWithReminder(task: Partial<Task> | null | undefined): task is TaskWithReminder {\n\treturn typeof task?.reminderAt === 'number';\n}\n\nexport const RemindersManager = (): React.JSX.Element => {\n\tconst [t, { language }] = useTranslation();\n\tconst notificationManager = getNotificationManager();\n\n\t// query used to register new task when the list changes\n\tconst { data: remindersData, previousData: remindersPreviousData } = useQuery(FindTasksDocument, {\n\t\tvariables: {\n\t\t\tstatus: Status.Open\n\t\t},\n\t\tfetchPolicy: 'cache-only',\n\t\terrorPolicy: 'all'\n\t});\n\t// lazy query used to load data at first load\n\tconst [findRemindersLazyQuery] = useLazyQuery(FindTasksDocument, {\n\t\tvariables: { status: Status.Open }\n\t});\n\tconst [updateTaskStatus] = useMutation(UpdateTaskStatusDocument);\n\tconst [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n\t// Array of group of reminders.\n\t// Each group represents a date block,\n\t// with the date formatted and the list of reminders for that date\n\tconst [modalReminders, setModalReminders] = useState<\n\t\tArray<{ date: string; reminders: TaskWithReminder[] }>\n\t>([]);\n\tconst modalRemindersRef = useRef<Array<{ date: string; reminders: TaskWithReminder[] }>>([]);\n\t// map of tasks keyed by reminder date (formatted)\n\tconst remindersByDateRef = useRef<Record<string, ReminderEntity[]>>({});\n\tconst location = useLocation();\n\t// both memo and ref to have a var which trigger rerender on update and one which does not\n\tconst isTasksView = useMemo(() => location.pathname.includes(TASKS_ROUTE), [location.pathname]);\n\tconst isTasksViewRef = useRef<boolean>(isTasksView);\n\tconst isBadgeVisibleRef = useRef<boolean>(false);\n\tconst remindersToStartRef = useRef<ReminderEntity[]>([]);\n\tconst updateTimeoutsIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n\tuseEffect(() => {\n\t\tisTasksViewRef.current = isTasksView;\n\t}, [isTasksView]);\n\n\tconst getVisibleReminders = useCallback(\n\t\t() =>\n\t\t\t// Extract all reminders that have to be shown and order them by date ascending.\n\t\t\t// Exclude from this list the ones that have an active timer\n\t\t\tchain(remindersByDateRef.current)\n\t\t\t\t.reduce<typeof modalReminders>((accumulator, reminderGroup, dateKey) => {\n\t\t\t\t\t// show reminders which are visible\n\t\t\t\t\t// (check only the first one since they are grouped by datetime)\n\t\t\t\t\tif (reminderGroup.length > 0 && reminderGroup[0].isVisible()) {\n\t\t\t\t\t\t// Pick only reminders which cannot trigger a notification anymore. In other words,\n\t\t\t\t\t\t// filter out reminders with an active timout, which need to be shown in a different group\n\t\t\t\t\t\tconst remindersToShow = reminderGroup.filter((reminder) =>\n\t\t\t\t\t\t\treminder.hasAlreadyBeenReminded()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (remindersToShow.length > 0) {\n\t\t\t\t\t\t\taccumulator.push({\n\t\t\t\t\t\t\t\tdate: dateKey,\n\t\t\t\t\t\t\t\treminders: remindersToShow\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn accumulator;\n\t\t\t\t}, [])\n\t\t\t\t// Sort reminders by date. All-day entries are shown as first group for the day\n\t\t\t\t.sortBy((reminderModalEntry) => reminderModalEntry.date)\n\t\t\t\t.value(),\n\t\t[]\n\t);\n\n\tconst notifyReminders = useCallback(\n\t\t(badgeCount: number | undefined) => {\n\t\t\tnotificationManager.notify({ showPopup: false, playSound: true });\n\t\t\t// show badge only if view is not within \"tasks\" module\n\t\t\tif (!isTasksViewRef.current) {\n\t\t\t\tupdatePrimaryBadge(\n\t\t\t\t\t{ show: true, count: badgeCount, showCount: badgeCount !== undefined },\n\t\t\t\t\tTASKS_ROUTE\n\t\t\t\t);\n\t\t\t\tisBadgeVisibleRef.current = true;\n\t\t\t}\n\t\t},\n\t\t[notificationManager]\n\t);\n\n\tconst _showReminder = useCallback(\n\t\t(...reminders: ReminderEntity[]): void => {\n\t\t\tsetIsModalOpen((alreadyOpen) => {\n\t\t\t\tif (alreadyOpen) {\n\t\t\t\t\t// Distinguish between new reminders and already existing reminders:\n\t\t\t\t\t// place new reminders on the bottom of the existing list,\n\t\t\t\t\t// and keep already existing reminders at same position. For these, update only the status\n\t\t\t\t\t// (for now), to avoid having updated titles under a wrong reminder date.\n\t\t\t\t\tsetModalReminders((prevState) => {\n\t\t\t\t\t\tconst newState = cloneDeep(prevState);\n\t\t\t\t\t\tconst newReminders: ReminderEntity[] = [];\n\t\t\t\t\t\tconst prevRemindersFlat = flatMap(\n\t\t\t\t\t\t\tnewState,\n\t\t\t\t\t\t\t(prevStateEntry) => prevStateEntry.reminders\n\t\t\t\t\t\t);\n\t\t\t\t\t\tforEach(reminders, (reminder) => {\n\t\t\t\t\t\t\tconst existingReminder = find(\n\t\t\t\t\t\t\t\tprevRemindersFlat,\n\t\t\t\t\t\t\t\t(prevReminder) => prevReminder.id === reminder.id\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (existingReminder) {\n\t\t\t\t\t\t\t\texistingReminder.status = reminder.status;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewReminders.push(reminder);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst remindersByDate = groupBy(newReminders, (reminder) => reminder.getKey());\n\t\t\t\t\t\tconst newReminderEntries = map(remindersByDate, (reminderGroup, dateKey) => ({\n\t\t\t\t\t\t\tdate: dateKey,\n\t\t\t\t\t\t\treminders: reminderGroup\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tnewState.push(...newReminderEntries);\n\t\t\t\t\t\treturn newState;\n\t\t\t\t\t});\n\t\t\t\t\t// keep modal open\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tconst remindersByDate = groupBy(reminders, (reminder) => reminder.getKey());\n\t\t\t\tconst reminderEntries = map(remindersByDate, (reminderGroup, dateKey) => ({\n\t\t\t\t\tdate: dateKey,\n\t\t\t\t\treminders: reminderGroup\n\t\t\t\t}));\n\t\t\t\tconst remindersByDateList = getVisibleReminders();\n\t\t\t\t// re-build list entirely and place new reminders on top\n\t\t\t\tconst newModalReminders = [...reminderEntries, ...remindersByDateList];\n\t\t\t\tsetModalReminders(newModalReminders);\n\t\t\t\t// open modal if there is something to show\n\t\t\t\tconst shouldOpenModal = newModalReminders.length > 0;\n\t\t\t\t// reset timout for reminders shown with this call so that they result as already seen in next modals\n\t\t\t\tforEach(reminders, (reminder) => {\n\t\t\t\t\treminder.clearTimout();\n\t\t\t\t});\n\t\t\t\treturn shouldOpenModal;\n\t\t\t});\n\t\t},\n\t\t[getVisibleReminders]\n\t);\n\n\tuseEffect(() => {\n\t\tconst diffNewDate = differenceBy(\n\t\t\tmodalReminders,\n\t\t\tmodalRemindersRef.current,\n\t\t\t(item) => item.date\n\t\t);\n\n\t\tmodalRemindersRef.current = modalReminders;\n\n\t\tif (diffNewDate.length > 0) {\n\t\t\t// notify with a sound the opening of the modal or the adding of a new reminder in the modal\n\t\t\tnotifyReminders(flatMap(modalReminders, (reminderGroup) => reminderGroup.reminders).length);\n\t\t}\n\t}, [modalReminders, notifyReminders]);\n\n\tconst showReminderDebounced = useMemo(() => debounceWithAllArgs(_showReminder), [_showReminder]);\n\n\tconst registerReminder = useCallback(\n\t\t(reminder: ReminderEntity): void => {\n\t\t\tconst remindersByDate = remindersByDateRef.current;\n\t\t\tconst dateKey = reminder.getKey();\n\t\t\tif (remindersByDate[dateKey] === undefined) {\n\t\t\t\tremindersByDate[dateKey] = [];\n\t\t\t}\n\t\t\t// add reminder to the map only if it is not completed, and it is not yet registered\n\t\t\tif (\n\t\t\t\treminder.status !== Status.Complete &&\n\t\t\t\t!some(\n\t\t\t\t\tremindersByDate[dateKey],\n\t\t\t\t\t(registeredReminder) => registeredReminder.id === reminder.id\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treminder.startTimeout(showReminderDebounced);\n\t\t\t\tremindersByDate[dateKey].push(reminder);\n\t\t\t}\n\t\t},\n\t\t[showReminderDebounced]\n\t);\n\n\tconst unregisterReminder = useCallback((reminder: ReminderEntity): void => {\n\t\tconst remindersByDate = remindersByDateRef.current;\n\t\tconst dateKey = reminder.getKey();\n\t\tif (remindersByDate[dateKey] !== undefined) {\n\t\t\tconst removedItems = remove(\n\t\t\t\tremindersByDate[dateKey],\n\t\t\t\t(registeredReminder) => registeredReminder.id === reminder.id\n\t\t\t);\n\t\t\tif (remindersByDate[dateKey].length === 0) {\n\t\t\t\tdelete remindersByDate[dateKey];\n\t\t\t}\n\t\t\tforEach(removedItems, (item) => {\n\t\t\t\t// clear timout for the removed reminders\n\t\t\t\titem.clearTimout();\n\t\t\t});\n\t\t}\n\t}, []);\n\n\tconst findRegisteredReminder = useCallback(\n\t\t(\n\t\t\treminder: Pick<ReminderEntity, 'id'>\n\t\t): { key: string; index: number } | { key: undefined; index: undefined } =>\n\t\t\t// Find the previous position of the reminder by searching inside all the entries.\n\t\t\t// Retrieve both the dateKey and the index with a \"reduce\" to make a single cycle.\n\t\t\t// The two fields are both valued or both undefined, there cannot be a hybrid situation.\n\t\t\treduce<\n\t\t\t\ttypeof remindersByDateRef.current,\n\t\t\t\t{ key: string; index: number } | { key: undefined; index: undefined }\n\t\t\t>(\n\t\t\t\tremindersByDateRef.current,\n\t\t\t\t(result, reminders, key) => {\n\t\t\t\t\tconst reminderIndex = findIndex(reminders, (item) => item.id === reminder.id);\n\t\t\t\t\tif (reminderIndex >= 0) {\n\t\t\t\t\t\treturn { key, index: reminderIndex };\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t{ key: undefined, index: undefined }\n\t\t\t),\n\t\t[]\n\t);\n\n\tconst updateRegisteredReminder = useCallback(\n\t\t(reminder: ReminderEntity): void => {\n\t\t\tconst remindersByDate = remindersByDateRef.current;\n\t\t\tconst { key: prevKey, index: prevIndex } = findRegisteredReminder(reminder);\n\t\t\tconst newDateKey = reminder.getKey();\n\t\t\tif (!prevKey || remindersByDate[prevKey] === undefined || prevIndex < 0) {\n\t\t\t\t// if the reminder was not truly registered, register it\n\t\t\t\tregisterReminder(reminder);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// if the reminder was truly registered\n\t\t\t// clear the timeout of the previous object\n\t\t\tremindersByDate[prevKey][prevIndex].clearTimout();\n\t\t\tif (reminder.status === Status.Complete) {\n\t\t\t\t// if the status has changed and now the task is completed, clear the previous position\n\t\t\t\tpullAt(remindersByDate[prevKey], prevIndex);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// if the status is still not complete, start the new timer\n\t\t\treminder.startTimeout(showReminderDebounced);\n\t\t\tif (prevKey === newDateKey) {\n\t\t\t\t// if the key is not changed (reminderAt and reminderAllDay are not changed) update the reminder keeping the same position\n\t\t\t\tremindersByDate[prevKey][prevIndex] = reminder;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// otherwise clear the previous position and push the item to the new dateKey map\n\t\t\tpullAt(remindersByDate[prevKey], prevIndex);\n\t\t\t// delete the entry from the map if there is no reminder left for it\n\t\t\tif (remindersByDate[prevKey].length === 0) {\n\t\t\t\tdelete remindersByDate[prevKey];\n\t\t\t}\n\t\t\tif (remindersByDate[newDateKey] === undefined) {\n\t\t\t\tremindersByDate[newDateKey] = [];\n\t\t\t}\n\t\t\tremindersByDate[newDateKey].push(reminder);\n\t\t},\n\t\t[findRegisteredReminder, registerReminder, showReminderDebounced]\n\t);\n\n\tconst registerRemindersFromTasks = useCallback(\n\t\t(tasks: Array<Partial<Task> | null>) => {\n\t\t\tforEach(tasks, (task) => {\n\t\t\t\tif (isTaskWithReminder(task)) {\n\t\t\t\t\tconst reminder = buildReminderEntity(task, language);\n\t\t\t\t\tif (reminder.isValid()) {\n\t\t\t\t\t\tregisterReminder(reminder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t[language, registerReminder]\n\t);\n\n\tuseEffect(() => {\n\t\t// init reminders manager by requesting all tasks with the lazy query\n\t\tremindersByDateRef.current = {};\n\t\tfindRemindersLazyQuery()\n\t\t\t.then((result) => {\n\t\t\t\tif (result?.data?.findTasks) {\n\t\t\t\t\tregisterRemindersFromTasks(result.data.findTasks);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// show reminders on the first load of the module\n\t\t\t\tshowReminderDebounced();\n\t\t\t});\n\n\t\treturn (): void => {\n\t\t\t// on unload cleanup timers\n\t\t\tconst allReminders = flatten(Object.values(remindersByDateRef.current));\n\t\t\tallReminders.forEach((reminder) => {\n\t\t\t\treminder.clearTimout();\n\t\t\t});\n\t\t\tshowReminderDebounced.cancel();\n\t\t\tupdateTimeoutsIntervalRef.current && clearInterval(updateTimeoutsIntervalRef.current);\n\t\t};\n\t}, [findRemindersLazyQuery, registerRemindersFromTasks, showReminderDebounced]);\n\n\tconst startFutureReminders = useCallback(() => {\n\t\tforEach(remindersToStartRef.current, (reminder) => {\n\t\t\treminder.startTimeout(showReminderDebounced);\n\t\t});\n\t}, [showReminderDebounced]);\n\n\tconst checkForFutureRemindersToStart = useCallback(() => {\n\t\tconst remindersToStart = reduce<typeof remindersByDateRef.current, ReminderEntity[]>(\n\t\t\tremindersByDateRef.current,\n\t\t\t(accumulator, remindersForDate) =>\n\t\t\t\taccumulator.concat(filter(remindersForDate, (reminder) => reminder.isFutureReminder())),\n\t\t\t[]\n\t\t);\n\t\tremindersToStartRef.current = remindersToStart;\n\t\tif (remindersToStart.length === 0 && updateTimeoutsIntervalRef.current) {\n\t\t\tclearInterval(updateTimeoutsIntervalRef.current);\n\t\t} else if (remindersToStart.length > 0 && !updateTimeoutsIntervalRef.current) {\n\t\t\tupdateTimeoutsIntervalRef.current = setInterval(\n\t\t\t\tstartFutureReminders,\n\t\t\t\tREMINDERS_INTERVAL_UPDATE\n\t\t\t);\n\t\t}\n\t}, [startFutureReminders]);\n\n\tuseEffect(() => {\n\t\t// listen for changes to the list which don't trigger an update of the modal:\n\t\t// - remove those which have been removed (compare previous data with current one)\n\t\t// - register those which have been added (compare current data with previous one)\n\t\tconst removedTasks = differenceBy(\n\t\t\tremindersPreviousData?.findTasks ?? [],\n\t\t\tremindersData?.findTasks ?? [],\n\t\t\t(task) => task?.id\n\t\t);\n\t\tremovedTasks.forEach((task) => {\n\t\t\tif (isTaskWithReminder(task)) {\n\t\t\t\tconst reminder = buildReminderEntity(task, language);\n\t\t\t\tunregisterReminder(reminder);\n\t\t\t}\n\t\t});\n\t\tconst addedTasks = differenceBy(\n\t\t\tremindersData?.findTasks ?? [],\n\t\t\tremindersPreviousData?.findTasks ?? [],\n\t\t\t(task) => task?.id\n\t\t);\n\t\tregisterRemindersFromTasks(addedTasks);\n\t\tcheckForFutureRemindersToStart();\n\t}, [\n\t\tcheckForFutureRemindersToStart,\n\t\tlanguage,\n\t\tregisterRemindersFromTasks,\n\t\tremindersData?.findTasks,\n\t\tremindersPreviousData?.findTasks,\n\t\tunregisterReminder,\n\t\tupdateRegisteredReminder\n\t]);\n\n\tuseEffect(() => {\n\t\t// listen for changes to the list which need to trigger an update of the modal:\n\t\t// - update registered reminders of those which reminder has been updated\n\t\tconst modifiedTasks = intersectionWith(\n\t\t\tremindersData?.findTasks ?? [],\n\t\t\tremindersPreviousData?.findTasks ?? [],\n\t\t\t(newTask, prevTask) =>\n\t\t\t\tnewTask !== null &&\n\t\t\t\tprevTask !== null &&\n\t\t\t\tnewTask.id === prevTask.id &&\n\t\t\t\t!isEqual(newTask, prevTask)\n\t\t);\n\t\tconst updatedReminders = modifiedTasks.reduce<ReminderEntity[]>((accumulator, task) => {\n\t\t\tif (isTaskWithReminder(task)) {\n\t\t\t\tconst reminder = buildReminderEntity(task, language);\n\t\t\t\tupdateRegisteredReminder(reminder);\n\t\t\t\taccumulator.push(reminder);\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, []);\n\t\tif (modifiedTasks.length > 0 && isModalOpen) {\n\t\t\tshowReminderDebounced(...updatedReminders);\n\t\t}\n\t\tcheckForFutureRemindersToStart();\n\t}, [\n\t\tcheckForFutureRemindersToStart,\n\t\tisModalOpen,\n\t\tlanguage,\n\t\tremindersData?.findTasks,\n\t\tremindersPreviousData?.findTasks,\n\t\tshowReminderDebounced,\n\t\tupdateRegisteredReminder\n\t]);\n\n\tconst flatMapOfModalReminders = useMemo(\n\t\t() => flatMap(modalReminders, ({ reminders }) => reminders),\n\t\t[modalReminders]\n\t);\n\n\tconst closeModalHandler = useCallback(() => {\n\t\tsetIsModalOpen(false);\n\t}, []);\n\n\tconst completeTaskHandler = useCallback(\n\t\t(task: Pick<Task, 'id'>) => () =>\n\t\t\tupdateTaskStatus({\n\t\t\t\tvariables: {\n\t\t\t\t\tid: task.id,\n\t\t\t\t\tstatus: Status.Complete\n\t\t\t\t},\n\t\t\t\toptimisticResponse: {\n\t\t\t\t\tupdateTask: {\n\t\t\t\t\t\tid: task.id,\n\t\t\t\t\t\tstatus: Status.Complete\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t[updateTaskStatus]\n\t);\n\n\tconst updateTaskToOpen = useCallback(\n\t\t(task: Pick<Task, 'id'>) => () =>\n\t\t\tupdateTaskStatus({\n\t\t\t\tvariables: {\n\t\t\t\t\tid: task.id,\n\t\t\t\t\tstatus: Status.Open\n\t\t\t\t},\n\t\t\t\toptimisticResponse: {\n\t\t\t\t\tupdateTask: {\n\t\t\t\t\t\tid: task.id,\n\t\t\t\t\t\tstatus: Status.Open\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}),\n\t\t[updateTaskStatus]\n\t);\n\n\tconst completeAllHandler = useCallback(() => {\n\t\tforEach(flatMapOfModalReminders, (reminder) => {\n\t\t\tif (reminder.status !== Status.Complete) {\n\t\t\t\tcompleteTaskHandler(reminder)();\n\t\t\t}\n\t\t});\n\t}, [completeTaskHandler, flatMapOfModalReminders]);\n\n\tconst undoAllHandler = useCallback(() => {\n\t\tforEach(flatMapOfModalReminders, (reminder) => {\n\t\t\tif (reminder.status === Status.Complete) {\n\t\t\t\tupdateTaskToOpen(reminder)();\n\t\t\t}\n\t\t});\n\t}, [flatMapOfModalReminders, updateTaskToOpen]);\n\n\tconst isActionForAllAvailable = useMemo(\n\t\t() => flatMapOfModalReminders.length > 1,\n\t\t[flatMapOfModalReminders]\n\t);\n\n\tconst showCompleteAll = useMemo(\n\t\t() =>\n\t\t\tisActionForAllAvailable &&\n\t\t\tsome(flatMapOfModalReminders, (reminder) => reminder.status !== Status.Complete),\n\t\t[flatMapOfModalReminders, isActionForAllAvailable]\n\t);\n\n\tconst secondaryActionLabel = useMemo(\n\t\t() =>\n\t\t\tshowCompleteAll\n\t\t\t\t? t('modal.reminder.completeAll', 'Complete all')\n\t\t\t\t: t('modal.reminder.undoAll', 'Undo all'),\n\t\t[showCompleteAll, t]\n\t);\n\n\tconst secondaryActionHandler = useMemo(\n\t\t() => (showCompleteAll ? completeAllHandler : undoAllHandler),\n\t\t[completeAllHandler, showCompleteAll, undoAllHandler]\n\t);\n\n\tconst secondaryActionIcon = useMemo(\n\t\t() => (showCompleteAll ? 'CheckmarkCircleOutline' : 'UndoOutline'),\n\t\t[showCompleteAll]\n\t);\n\n\tuseEffect(() => {\n\t\tif (isTasksView && isBadgeVisibleRef.current) {\n\t\t\t// hide badge when entering tasks view if it is visible\n\t\t\tupdatePrimaryBadge({ show: false }, TASKS_ROUTE);\n\t\t}\n\t}, [isTasksView]);\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle={t('modal.reminder.title', 'Tasks reminders')}\n\t\t\topen={isModalOpen && isTasksView}\n\t\t\tonClose={closeModalHandler}\n\t\t\tcloseIconTooltip={t('modal.close', 'Close')}\n\t\t\tcustomFooter={\n\t\t\t\t<ReminderModalFooter\n\t\t\t\t\tcloseAction={closeModalHandler}\n\t\t\t\t\tshowSecondaryAction={isActionForAllAvailable}\n\t\t\t\t\tsecondaryAction={secondaryActionHandler}\n\t\t\t\t\tsecondaryLabel={secondaryActionLabel}\n\t\t\t\t\tsecondaryIcon={secondaryActionIcon}\n\t\t\t\t/>\n\t\t\t}\n\t\t\tmaxHeight={'90vh'}\n\t\t>\n\t\t\t<ReminderModalContent\n\t\t\t\treminders={modalReminders}\n\t\t\t\tcompleteAction={completeTaskHandler}\n\t\t\t\tundoCompleteAction={updateTaskToOpen}\n\t\t\t/>\n\t\t</Modal>\n\t);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { lazy, Suspense, useEffect } from 'react';\n\nimport {\n\tACTION_TYPES,\n\taddBoard,\n\taddBoardView,\n\taddRoute,\n\tregisterActions,\n\ttype SecondaryBarComponentProps,\n\tSpinner\n} from '@zextras/carbonio-shell-ui';\nimport { useTranslation } from 'react-i18next';\nimport { Route } from 'react-router-dom';\nimport './styles.less';\n\nimport { RemindersManager } from './components/RemindersManager';\nimport { TASKS_APP_ID, TASKS_ROUTE } from './constants';\nimport { ProvidersWrapper } from './providers/ProvidersWrapper';\n\nconst LazyAppView = lazy(() => import(/* webpackChunkName: \"appView\" */ './views/app/AppView'));\n\nconst LazySecondaryBarView = lazy(\n\t() => import(/* webpackChunkName: \"secondaryView\" */ './views/secondary-bar/SecondaryBarView')\n);\n\nconst LazyNewTaskBoardView = lazy(\n\t() => import(/* webpackChunkName: \"newTaskView\" */ './views/board/NewTaskBoard')\n);\n\nconst LazyEditTaskBoardView = lazy(\n\t() => import(/* webpackChunkName: \"editTaskView\" */ './views/board/EditTaskBoard')\n);\n\nconst AppView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<LazyAppView />\n\t</Suspense>\n);\n\nconst SecondaryBarView = (props: SecondaryBarComponentProps): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<LazySecondaryBarView {...props} />\n\t</Suspense>\n);\n\nconst NewTaskBoardView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<ProvidersWrapper>\n\t\t\t<LazyNewTaskBoardView />\n\t\t</ProvidersWrapper>\n\t</Suspense>\n);\n\nconst EditTaskBoardView = (): React.JSX.Element => (\n\t<Suspense fallback={<Spinner />}>\n\t\t<ProvidersWrapper>\n\t\t\t<LazyEditTaskBoardView />\n\t\t</ProvidersWrapper>\n\t</Suspense>\n);\n\nconst App = (): React.ReactNode => {\n\tconst [t] = useTranslation();\n\n\tuseEffect(() => {\n\t\tconst appNameLabel = t('label.app_name', 'Tasks');\n\n\t\taddRoute({\n\t\t\troute: TASKS_ROUTE,\n\t\t\tposition: 600,\n\t\t\tvisible: true,\n\t\t\tlabel: appNameLabel,\n\t\t\tprimaryBar: 'CheckmarkCircle2Outline',\n\t\t\tsecondaryBar: SecondaryBarView,\n\t\t\tappView: AppView\n\t\t});\n\n\t\t// boards\n\t\taddBoardView({\n\t\t\troute: `${TASKS_ROUTE}/new`,\n\t\t\tcomponent: NewTaskBoardView\n\t\t});\n\t\taddBoardView({\n\t\t\troute: `${TASKS_ROUTE}/edit`,\n\t\t\tcomponent: EditTaskBoardView\n\t\t});\n\t}, [t]);\n\n\tuseEffect(() => {\n\t\t// create button actions\n\t\tregisterActions({\n\t\t\tid: 'new-task',\n\t\t\ttype: ACTION_TYPES.NEW,\n\t\t\taction: () => ({\n\t\t\t\tid: 'new-task',\n\t\t\t\tlabel: t('label.new', 'New Task'),\n\t\t\t\ticon: 'CheckmarkCircle2Outline',\n\t\t\t\tonClick: (): void => {\n\t\t\t\t\taddBoard({ url: `${TASKS_ROUTE}/new`, title: t('board.newTask.title', 'New Task') });\n\t\t\t\t},\n\t\t\t\tdisabled: false,\n\t\t\t\tprimary: true,\n\t\t\t\tgroup: TASKS_APP_ID\n\t\t\t})\n\t\t});\n\t}, [t]);\n\n\treturn (\n\t\t<Route path={`/:module/:taskId?`}>\n\t\t\t<ProvidersWrapper>\n\t\t\t\t<RemindersManager />\n\t\t\t</ProvidersWrapper>\n\t\t</Route>\n\t);\n};\n\nexport default App;\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react';\n\nimport { Icon } from '@zextras/carbonio-design-system';\nimport { Filter1Rounded, PriorityHighRounded } from '@mui/icons-material';\n\nimport { Priority } from '../gql/types';\nimport TaskRoundedIcon from '@mui/icons-material/TaskRounded';\nimport { HIGH_PRIORITY, LOW_PRIORITY, MEDIUM_PRIORITY } from '../sruvi/EditedColors';\n\ninterface PriorityIconProps {\n\tpriority: Priority;\n}\n\nexport const PriorityIcon = ({ priority }: PriorityIconProps): React.JSX.Element => (\n\t<>\n\t\t{priority === Priority.High && <PriorityHighRounded style={{ color: HIGH_PRIORITY }} />}\n\t\t{priority === Priority.Low && <PriorityHighRounded style={{ color: LOW_PRIORITY }} />}\n\t\t{priority === Priority.Medium && <PriorityHighRounded style={{ color: MEDIUM_PRIORITY }} />}\n\t</>\n);\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport React from 'react';\n\nimport {\n\tText as DSText,\n\ttype TextProps,\n\tTextWithTooltip,\n\ttype TextWithTooltipProps\n} from '@zextras/carbonio-design-system';\nimport styled, { type SimpleInterpolation } from 'styled-components';\n\nimport type { MakeOptional } from '../gql/types';\n\ninterface TextExtendedProps {\n\twidth?: string;\n\tcentered?: boolean;\n\titalic?: boolean;\n\tinline?: boolean;\n\tlineHeight?: number;\n}\n\ntype WithDollarPrefix<S extends string> = `$${S}`;\n\ntype WithoutDollarPrefix<S extends string> = S extends `$${infer WithoutDollarString}`\n\t? WithoutDollarString\n\t: S;\n\ntype StyledTextProps = {\n\t[K in WithDollarPrefix<\n\t\tkeyof Omit<TextExtendedProps, 'withTooltip'>\n\t>]: TextExtendedProps[WithoutDollarPrefix<K>];\n};\n\ntype TextWithOptionalTooltipProps =\n\t| ({ withTooltip: true } & MakeOptional<TextWithTooltipProps, 'children'>)\n\t| ({ withTooltip?: false } & TextProps);\n\nconst TextWithOptionalTooltip = ({\n\twithTooltip,\n\tchildren = null,\n\t...rest\n}: TextWithOptionalTooltipProps): React.JSX.Element =>\n\twithTooltip ? (\n\t\t<TextWithTooltip {...rest}>{children}</TextWithTooltip>\n\t) : (\n\t\t<DSText {...rest}>{children}</DSText>\n\t);\n\nconst StyledText = styled(TextWithOptionalTooltip)<StyledTextProps>`\n\twidth: ${({ $width }): SimpleInterpolation => $width};\n\tdisplay: ${({ $inline }): SimpleInterpolation => $inline && 'inline'};\n\tfont-style: ${({ $italic }): SimpleInterpolation => $italic && 'italic'};\n\ttext-align: ${({ $centered }): SimpleInterpolation => $centered && 'center'};\n\tline-height: ${({ $lineHeight }): SimpleInterpolation => $lineHeight};\n`;\nexport const Text = ({\n\twidth,\n\tcentered,\n\titalic,\n\tinline,\n\tlineHeight = 1.5,\n\twithTooltip = false,\n\t...dsProps\n}: TextExtendedProps & TextWithOptionalTooltipProps): React.JSX.Element => (\n\t<StyledText\n\t\t$width={width}\n\t\t$centered={centered}\n\t\t$italic={italic}\n\t\t$inline={inline}\n\t\t$lineHeight={lineHeight}\n\t\twithTooltip={withTooltip}\n\t\t{...dsProps}\n\t/>\n);\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nexport const TASKS_APP_ID = 'carbonio-tasks-ui';\nexport const TASKS_ROUTE = 'tasks';\n\n// endpoint\n// keep endpoint without trailing slash\nexport const GRAPHQL_ENDPOINT = '/services/tasks/graphql/';\nexport const ROUTES = {\n\ttask: '/:taskId?'\n} as const;\n\n// misc\nexport const LIST_WIDTH = '40%';\nexport const DISPLAYER_WIDTH = '60%';\nexport const LIST_ITEM_HEIGHT = '10rem';\nexport const ALL_DAY_DATE_TIME_PICKER_DATE_FORMAT = 'PPP';\nexport const TIME_SPECIFIC_DATE_TIME_PICKER_DATE_FORMAT = 'PPPp';\nexport const RANDOM_PLACEHOLDER_TIMEOUT = 250;\nexport const TASK_TITLE_MAX_LENGTH = 1024;\nexport const TASK_DESCRIPTION_MAX_LENGTH = 4096;\nexport const MAX_TASKS_LIMIT = 200;\nexport const REMINDER_TIMEOUT_LIMIT = 172800000; // 48h\nexport const REMINDERS_INTERVAL_UPDATE = REMINDER_TIMEOUT_LIMIT - 5 * 60000; // 5 minute before all timeouts are expired\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n/* eslint-disable camelcase,no-shadow */\n// THIS FILE IS AUTOGENERATED BY GRAPHQL-CODEGEN. DO NOT EDIT!\nimport type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\n\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {\n\t[_ in K]?: never;\n};\nexport type Incremental<T> =\n\t| T\n\t| { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n\tID: { input: string; output: string };\n\tString: { input: string; output: string };\n\tBoolean: { input: boolean; output: boolean };\n\tInt: { input: number; output: number };\n\tFloat: { input: number; output: number };\n\tDateTime: { input: number; output: number };\n};\n\nexport type Config = {\n\t__typename?: 'Config';\n\tname: Scalars['String']['output'];\n\tvalue: Scalars['String']['output'];\n};\n\nexport type Mutation = {\n\t__typename?: 'Mutation';\n\tcreateTask?: Maybe<Task>;\n\ttrashTask?: Maybe<Scalars['ID']['output']>;\n\tupdateTask?: Maybe<Task>;\n};\n\nexport type MutationCreateTaskArgs = {\n\tnewTask: NewTaskInput;\n};\n\nexport type MutationTrashTaskArgs = {\n\ttaskId: Scalars['ID']['input'];\n};\n\nexport type MutationUpdateTaskArgs = {\n\tupdateTask: UpdateTaskInput;\n};\n\nexport type NewTaskInput = {\n\tdescription?: InputMaybe<Scalars['String']['input']>;\n\tpriority?: InputMaybe<Priority>;\n\treminderAllDay?: InputMaybe<Scalars['Boolean']['input']>;\n\treminderAt?: InputMaybe<Scalars['DateTime']['input']>;\n\tstatus?: InputMaybe<Status>;\n\ttitle: Scalars['String']['input'];\n};\n\nexport enum Priority {\n\tHigh = 'HIGH',\n\tLow = 'LOW',\n\tMedium = 'MEDIUM'\n}\n\nexport type Query = {\n\t__typename?: 'Query';\n\tfindTasks: Array<Maybe<Task>>;\n\tgetServiceInfo: ServiceInfo;\n\tgetTask?: Maybe<Task>;\n};\n\nexport type QueryFindTasksArgs = {\n\tpriority?: InputMaybe<Priority>;\n\tstatus?: InputMaybe<Status>;\n};\n\nexport type QueryGetTaskArgs = {\n\ttaskId: Scalars['ID']['input'];\n};\n\nexport type ServiceInfo = {\n\t__typename?: 'ServiceInfo';\n\tflavour: Scalars['String']['output'];\n\tname: Scalars['String']['output'];\n\tversion: Scalars['String']['output'];\n};\n\nexport enum Status {\n\tComplete = 'COMPLETE',\n\tOpen = 'OPEN'\n}\n\nexport type Task = {\n\t__typename?: 'Task';\n\tcreatedAt: Scalars['DateTime']['output'];\n\tdescription?: Maybe<Scalars['String']['output']>;\n\tid: Scalars['ID']['output'];\n\tpriority: Priority;\n\treminderAllDay?: Maybe<Scalars['Boolean']['output']>;\n\treminderAt?: Maybe<Scalars['DateTime']['output']>;\n\tstatus: Status;\n\ttitle: Scalars['String']['output'];\n};\n\nexport type UpdateTaskInput = {\n\tdescription?: InputMaybe<Scalars['String']['input']>;\n\tid: Scalars['ID']['input'];\n\tpriority?: InputMaybe<Priority>;\n\treminderAllDay?: InputMaybe<Scalars['Boolean']['input']>;\n\treminderAt?: InputMaybe<Scalars['DateTime']['input']>;\n\tstatus?: InputMaybe<Status>;\n\ttitle?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type TaskFragment = {\n\tid: string;\n\tdescription?: string | null;\n\tpriority: Priority;\n\treminderAllDay?: boolean | null;\n\tstatus: Status;\n\treminderAt?: number | null;\n\ttitle: string;\n\tcreatedAt: number;\n} & { __typename?: 'Task' };\n\nexport type CreateTaskMutationVariables = Exact<{\n\tnewTask: NewTaskInput;\n}>;\n\nexport type CreateTaskMutation = {\n\tcreateTask?:\n\t\t| ({\n\t\t\t\tid: string;\n\t\t\t\tdescription?: string | null;\n\t\t\t\tpriority: Priority;\n\t\t\t\treminderAllDay?: boolean | null;\n\t\t\t\tstatus: Status;\n\t\t\t\treminderAt?: number | null;\n\t\t\t\ttitle: string;\n\t\t\t\tcreatedAt: number;\n\t\t  } & { __typename?: 'Task' })\n\t\t| null;\n} & { __typename?: 'Mutation' };\n\nexport type TrashTaskMutationVariables = Exact<{\n\ttaskId: Scalars['ID']['input'];\n}>;\n\nexport type TrashTaskMutation = { trashTask?: string | null } & { __typename?: 'Mutation' };\n\nexport type UpdateTaskMutationVariables = Exact<{\n\tupdateTask: UpdateTaskInput;\n}>;\n\nexport type UpdateTaskMutation = {\n\tupdateTask?:\n\t\t| ({\n\t\t\t\tid: string;\n\t\t\t\tdescription?: string | null;\n\t\t\t\tpriority: Priority;\n\t\t\t\treminderAllDay?: boolean | null;\n\t\t\t\tstatus: Status;\n\t\t\t\treminderAt?: number | null;\n\t\t\t\ttitle: string;\n\t\t\t\tcreatedAt: number;\n\t\t  } & { __typename?: 'Task' })\n\t\t| null;\n} & { __typename?: 'Mutation' };\n\nexport type UpdateTaskStatusMutationVariables = Exact<{\n\tid: Scalars['ID']['input'];\n\tstatus: Status;\n}>;\n\nexport type UpdateTaskStatusMutation = {\n\tupdateTask?: ({ id: string; status: Status } & { __typename?: 'Task' }) | null;\n} & { __typename?: 'Mutation' };\n\nexport type FindTasksQueryVariables = Exact<{\n\tpriority?: InputMaybe<Priority>;\n\tstatus?: InputMaybe<Status>;\n}>;\n\nexport type FindTasksQuery = {\n\tfindTasks: Array<\n\t\t| ({\n\t\t\t\tid: string;\n\t\t\t\tpriority: Priority;\n\t\t\t\tcreatedAt: number;\n\t\t\t\treminderAllDay?: boolean | null;\n\t\t\t\tstatus: Status;\n\t\t\t\treminderAt?: number | null;\n\t\t\t\ttitle: string;\n\t\t  } & { __typename?: 'Task' })\n\t\t| null\n\t>;\n} & { __typename?: 'Query' };\n\nexport type GetTaskQueryVariables = Exact<{\n\ttaskId: Scalars['ID']['input'];\n}>;\n\nexport type GetTaskQuery = {\n\tgetTask?:\n\t\t| ({\n\t\t\t\tid: string;\n\t\t\t\tpriority: Priority;\n\t\t\t\tcreatedAt: number;\n\t\t\t\tdescription?: string | null;\n\t\t\t\treminderAllDay?: boolean | null;\n\t\t\t\tstatus: Status;\n\t\t\t\treminderAt?: number | null;\n\t\t\t\ttitle: string;\n\t\t  } & { __typename?: 'Task' })\n\t\t| null;\n} & { __typename?: 'Query' };\n\nexport const TaskFragmentDoc = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'FragmentDefinition',\n\t\t\tname: { kind: 'Name', value: 'Task' },\n\t\t\ttypeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Task' } },\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'description' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'priority' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAllDay' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAt' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'title' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'createdAt' } }\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<TaskFragment, unknown>;\nexport const CreateTaskDocument = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'OperationDefinition',\n\t\t\toperation: 'mutation',\n\t\t\tname: { kind: 'Name', value: 'createTask' },\n\t\t\tvariableDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'newTask' } },\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tkind: 'NonNullType',\n\t\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'NewTaskInput' } }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: 'Field',\n\t\t\t\t\t\tname: { kind: 'Name', value: 'createTask' },\n\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'newTask' },\n\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'newTask' } }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectionSet: {\n\t\t\t\t\t\t\tkind: 'SelectionSet',\n\t\t\t\t\t\t\tselections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Task' } }]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tkind: 'FragmentDefinition',\n\t\t\tname: { kind: 'Name', value: 'Task' },\n\t\t\ttypeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Task' } },\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'description' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'priority' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAllDay' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAt' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'title' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'createdAt' } }\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<CreateTaskMutation, CreateTaskMutationVariables>;\nexport const TrashTaskDocument = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'OperationDefinition',\n\t\t\toperation: 'mutation',\n\t\t\tname: { kind: 'Name', value: 'trashTask' },\n\t\t\tvariableDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'taskId' } },\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tkind: 'NonNullType',\n\t\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: 'Field',\n\t\t\t\t\t\tname: { kind: 'Name', value: 'trashTask' },\n\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'taskId' },\n\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'taskId' } }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<TrashTaskMutation, TrashTaskMutationVariables>;\nexport const UpdateTaskDocument = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'OperationDefinition',\n\t\t\toperation: 'mutation',\n\t\t\tname: { kind: 'Name', value: 'updateTask' },\n\t\t\tvariableDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'updateTask' } },\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tkind: 'NonNullType',\n\t\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'UpdateTaskInput' } }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: 'Field',\n\t\t\t\t\t\tname: { kind: 'Name', value: 'updateTask' },\n\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'updateTask' },\n\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'updateTask' } }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectionSet: {\n\t\t\t\t\t\t\tkind: 'SelectionSet',\n\t\t\t\t\t\t\tselections: [{ kind: 'FragmentSpread', name: { kind: 'Name', value: 'Task' } }]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tkind: 'FragmentDefinition',\n\t\t\tname: { kind: 'Name', value: 'Task' },\n\t\t\ttypeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Task' } },\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'description' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'priority' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAllDay' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAt' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'title' } },\n\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'createdAt' } }\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<UpdateTaskMutation, UpdateTaskMutationVariables>;\nexport const UpdateTaskStatusDocument = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'OperationDefinition',\n\t\t\toperation: 'mutation',\n\t\t\tname: { kind: 'Name', value: 'updateTaskStatus' },\n\t\t\tvariableDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tkind: 'NonNullType',\n\t\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tkind: 'NonNullType',\n\t\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'Status' } }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: 'Field',\n\t\t\t\t\t\tname: { kind: 'Name', value: 'updateTask' },\n\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'updateTask' },\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tkind: 'ObjectValue',\n\t\t\t\t\t\t\t\t\tfields: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkind: 'ObjectField',\n\t\t\t\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'id' },\n\t\t\t\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'id' } }\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tkind: 'ObjectField',\n\t\t\t\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'status' },\n\t\t\t\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'status' } }\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectionSet: {\n\t\t\t\t\t\t\tkind: 'SelectionSet',\n\t\t\t\t\t\t\tselections: [\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'status' } }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<UpdateTaskStatusMutation, UpdateTaskStatusMutationVariables>;\nexport const FindTasksDocument = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'OperationDefinition',\n\t\t\toperation: 'query',\n\t\t\tname: { kind: 'Name', value: 'findTasks' },\n\t\t\tvariableDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'priority' } },\n\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'Priority' } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'Status' } }\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: 'Field',\n\t\t\t\t\t\tname: { kind: 'Name', value: 'findTasks' },\n\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'priority' },\n\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'priority' } }\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'status' },\n\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'status' } }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectionSet: {\n\t\t\t\t\t\t\tkind: 'SelectionSet',\n\t\t\t\t\t\t\tselections: [\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'priority' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAllDay' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAt' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'title' } }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<FindTasksQuery, FindTasksQueryVariables>;\nexport const GetTaskDocument = {\n\tkind: 'Document',\n\tdefinitions: [\n\t\t{\n\t\t\tkind: 'OperationDefinition',\n\t\t\toperation: 'query',\n\t\t\tname: { kind: 'Name', value: 'getTask' },\n\t\t\tvariableDefinitions: [\n\t\t\t\t{\n\t\t\t\t\tkind: 'VariableDefinition',\n\t\t\t\t\tvariable: { kind: 'Variable', name: { kind: 'Name', value: 'taskId' } },\n\t\t\t\t\ttype: {\n\t\t\t\t\t\tkind: 'NonNullType',\n\t\t\t\t\t\ttype: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tselectionSet: {\n\t\t\t\tkind: 'SelectionSet',\n\t\t\t\tselections: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: 'Field',\n\t\t\t\t\t\tname: { kind: 'Name', value: 'getTask' },\n\t\t\t\t\t\targuments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkind: 'Argument',\n\t\t\t\t\t\t\t\tname: { kind: 'Name', value: 'taskId' },\n\t\t\t\t\t\t\t\tvalue: { kind: 'Variable', name: { kind: 'Name', value: 'taskId' } }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tselectionSet: {\n\t\t\t\t\t\t\tkind: 'SelectionSet',\n\t\t\t\t\t\t\tselections: [\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'id' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'priority' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'description' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAllDay' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'status' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'reminderAt' } },\n\t\t\t\t\t\t\t\t{ kind: 'Field', name: { kind: 'Name', value: 'title' } }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n} as unknown as DocumentNode<GetTaskQuery, GetTaskQueryVariables>;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React from 'react';\n\nimport { ThemeProvider } from '@zextras/carbonio-design-system';\n\ntype StyledWrapperProps = {\n\tchildren?: React.ReactNode;\n};\n\nexport const StyledWrapper = ({ children }: StyledWrapperProps): React.JSX.Element => (\n\t<ThemeProvider loadDefaultFont={false}>{children}</ThemeProvider>\n);\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport type { FieldFunctionOptions, Reference, TypePolicies } from '@apollo/client';\n\nimport type { GetTaskQueryVariables, QueryGetTaskArgs, Task } from '../gql/types';\n\nexport const typePolicies: TypePolicies = {\n\tQuery: {\n\t\tfields: {\n\t\t\tgetTask: {\n\t\t\t\tread(\n\t\t\t\t\t_existing: Reference | undefined,\n\t\t\t\t\toptions: FieldFunctionOptions<Partial<QueryGetTaskArgs>, Partial<GetTaskQueryVariables>>\n\t\t\t\t): Reference | undefined {\n\t\t\t\t\tconst { args, toReference } = options;\n\t\t\t\t\tif (args?.taskId) {\n\t\t\t\t\t\tconst typename: Task['__typename'] = 'Task';\n\n\t\t\t\t\t\treturn toReference({\n\t\t\t\t\t\t\t__typename: typename,\n\t\t\t\t\t\t\tid: args.taskId\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n","/*\n * SPDX-FileCopyrightText: 2024 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n// THIS FILE IS AUTOGENERATED BY GRAPHQL-CODEGEN. DO NOT EDIT!\n\nexport interface PossibleTypesResultData {\n\tpossibleTypes: {\n\t\t[key: string]: string[];\n\t};\n}\nconst result: PossibleTypesResultData = {\n\tpossibleTypes: {}\n};\nexport default result;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport { ApolloClient, HttpLink, InMemoryCache, type NormalizedCacheObject } from '@apollo/client';\n\nimport { typePolicies } from './typePolicies';\nimport { GRAPHQL_ENDPOINT } from '../constants';\nimport introspection from '../gql/possible-types';\n\nconst cache = new InMemoryCache({\n\tpossibleTypes: introspection.possibleTypes,\n\ttypePolicies\n});\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>;\n\nconst buildClient: () => ApolloClient<NormalizedCacheObject> = () => {\n\tconst uri = process.env.NODE_ENV === 'test' ? 'http://localhost:9000' : '';\n\tif (apolloClient == null) {\n\t\tconst httpLink = new HttpLink({\n\t\t\turi: `${uri}${GRAPHQL_ENDPOINT}`,\n\t\t\tcredentials: 'same-origin'\n\t\t});\n\n\t\tapolloClient = new ApolloClient<NormalizedCacheObject>({\n\t\t\tcache,\n\t\t\tconnectToDevTools: process.env.NODE_ENV !== 'production',\n\t\t\tlink: httpLink\n\t\t});\n\t}\n\treturn apolloClient;\n};\n\nexport default buildClient;\n","/*\n * SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\n\nimport React, { useMemo } from 'react';\n\nimport { ApolloProvider } from '@apollo/client';\nimport { ModalManager } from '@zextras/carbonio-design-system';\n\nimport { StyledWrapper } from './StyledWrapper';\nimport buildClient from '../apollo';\nimport { type OneOrMany } from '../types/utils';\n\ninterface ProvidersWrapperProps {\n\tchildren?: OneOrMany<React.ReactNode>;\n}\n\nexport const ProvidersWrapper = ({ children }: ProvidersWrapperProps): React.JSX.Element => {\n\tconst apolloClient = useMemo(() => buildClient(), []);\n\n\treturn (\n\t\t<StyledWrapper>\n\t\t\t<ApolloProvider client={apolloClient}>\n\t\t\t\t<ModalManager>{children}</ModalManager>\n\t\t\t</ApolloProvider>\n\t\t</StyledWrapper>\n\t);\n};\n","export const BACKGROUND_COLOR = '#FFFFFF';\nexport const BACKGROUND_HEADER_COLOR = '#ffffff';\nexport const PRIMARY_COLOR = '#ff6600';\nexport const SECONDARY_COLOR = '#0a1153';\nexport const FOREGROUND_COLOR = '#c2e7ff';\nexport const PRIMARY_ICON_COLOR_ACTIVE = '#000000';\n\nexport const MEDIUM_PRIORITY = '#00b5ff';\nexport const HIGH_PRIORITY = '#ff6600';\nexport const LOW_PRIORITY = '#c2e7ff';\n\nexport const MEDIUM_PRIORITY_BORDER = '#00b5ff';\nexport const HIGH_PRIORITY_BORDER = '#ff6600';\nexport const LOW_PRIORITY_BORDER = '#c2e7ff';\n\nexport const MEDIUM_PRIORITY_BG = '#C7D0EE';\nexport const HIGH_PRIORITY_BG = '#ffe6ee';\nexport const LOW_PRIORITY_BG = '#B3D6EB';\n\nexport const COMPLETED_PRIORITY_ICON = '#34C759';\n","/*\n * SPDX-FileCopyrightText: 2023 Zextras <https://www.zextras.com>\n *\n * SPDX-License-Identifier: AGPL-3.0-only\n */\nimport { debounce, flatten } from 'lodash';\n\nexport function formatDateFromTimestamp(\n\ttimestamp: number,\n\toptions?: { includeTime?: boolean; locale?: string }\n): string {\n\tconst fixedLocale = options?.locale?.replaceAll('_', '-');\n\tconst format: Intl.DateTimeFormatOptions = {\n\t\tyear: 'numeric',\n\t\tmonth: 'short',\n\t\tday: '2-digit'\n\t};\n\tif (options?.includeTime) {\n\t\tformat.hour = '2-digit';\n\t\tformat.minute = '2-digit';\n\t}\n\ttry {\n\t\treturn Intl.DateTimeFormat(fixedLocale, format).format(timestamp);\n\t} catch (e) {\n\t\tif (e instanceof RangeError) {\n\t\t\t// try to format with only the language part of the locale\n\t\t\t// if there is no hyphen, use the system language by passing locale undefined\n\t\t\tconst hyphenIndex = fixedLocale?.indexOf('-') ?? -1;\n\t\t\treturn formatDateFromTimestamp(timestamp, {\n\t\t\t\tlocale: hyphenIndex > -1 ? fixedLocale?.substring(0, hyphenIndex) : undefined,\n\t\t\t\tincludeTime: options?.includeTime\n\t\t\t});\n\t\t}\n\t\tthrow e;\n\t}\n}\n\nexport function identity<Type>(arg: Type | null): arg is Type {\n\treturn arg !== null;\n}\n\nexport function debounceWithAllArgs<T extends Parameters<typeof debounce>[0]>(\n\t...[callback, wait, options]: Parameters<typeof debounce<T>>\n): ReturnType<typeof debounce<T>> {\n\tlet collectedArgs: Array<Parameters<T>> = [];\n\tconst debouncedFn = debounce(\n\t\t() => {\n\t\t\tconst returnValue = callback(...flatten(collectedArgs));\n\t\t\tcollectedArgs = [];\n\t\t\treturn returnValue;\n\t\t},\n\t\twait,\n\t\toptions\n\t);\n\tconst cancelFn = (): void => {\n\t\tdebouncedFn.cancel();\n\t\tcollectedArgs = [];\n\t};\n\tconst flushFn = (): ReturnType<T> | undefined => debouncedFn.flush();\n\tconst invokerFn = (...args: Parameters<T>): ReturnType<T> => {\n\t\tcollectedArgs.push(args);\n\t\treturn debouncedFn();\n\t};\n\tinvokerFn.cancel = cancelFn;\n\tinvokerFn.flush = flushFn;\n\n\treturn invokerFn;\n}\n"],"names":["ReminderItem","title","status","priority","completeAction","undoCompleteAction","t","useTranslation","React","Row","wrap","mainAlignment","gap","width","flexShrink","flexBasis","minWidth","Status","Complete","PriorityIcon","Icon","icon","color","flexGrow","Text","size","weight","context","toLowerCase","defaultValue","Tooltip","label","IconButton","onClick","ReminderGroup","date","reminders","items","useMemo","map","reminder","key","id","length","Container","height","crossAlignment","ReminderModalContent","groups","ReminderModalFooter","closeAction","secondaryAction","showSecondaryAction","secondaryLabel","secondaryIcon","Button","type","buildReminderEntity","task","locale","_reminderTimeout","getKey","formatDateFromTimestamp","reminderAt","includeTime","reminderAllDay","isVisible","isToday","isBefore","Date","now","isValid","isAfter","startTimeout","callback","epochDiffFromNow","startOfDay","getTime","REMINDER_TIMEOUT_LIMIT","this","setTimeout","clearTimout","clearTimeout","hasAlreadyBeenReminded","isFutureReminder","isTaskWithReminder","RemindersManager","language","notificationManager","getNotificationManager","data","remindersData","previousData","remindersPreviousData","useQuery","FindTasksDocument","variables","Open","fetchPolicy","errorPolicy","findRemindersLazyQuery","useLazyQuery","updateTaskStatus","useMutation","UpdateTaskStatusDocument","isModalOpen","setIsModalOpen","useState","modalReminders","setModalReminders","modalRemindersRef","useRef","remindersByDateRef","location","useLocation","isTasksView","pathname","includes","TASKS_ROUTE","isTasksViewRef","isBadgeVisibleRef","remindersToStartRef","updateTimeoutsIntervalRef","useEffect","current","getVisibleReminders","useCallback","chain","reduce","accumulator","reminderGroup","dateKey","remindersToShow","filter","push","sortBy","reminderModalEntry","value","notifyReminders","badgeCount","notify","showPopup","playSound","updatePrimaryBadge","show","count","showCount","undefined","_showReminder","alreadyOpen","prevState","newState","cloneDeep","newReminders","prevRemindersFlat","flatMap","prevStateEntry","forEach","existingReminder","find","prevReminder","remindersByDate","groupBy","newReminderEntries","newModalReminders","shouldOpenModal","diffNewDate","differenceBy","item","showReminderDebounced","debounceWithAllArgs","registerReminder","some","registeredReminder","unregisterReminder","removedItems","remove","findRegisteredReminder","result","reminderIndex","findIndex","index","updateRegisteredReminder","prevKey","prevIndex","newDateKey","pullAt","registerRemindersFromTasks","tasks","then","findTasks","flatten","Object","values","cancel","clearInterval","startFutureReminders","checkForFutureRemindersToStart","remindersToStart","remindersForDate","concat","setInterval","REMINDERS_INTERVAL_UPDATE","addedTasks","modifiedTasks","intersectionWith","newTask","prevTask","isEqual","updatedReminders","flatMapOfModalReminders","closeModalHandler","completeTaskHandler","optimisticResponse","updateTask","updateTaskToOpen","completeAllHandler","undoAllHandler","isActionForAllAvailable","showCompleteAll","secondaryActionLabel","secondaryActionHandler","secondaryActionIcon","Modal","open","onClose","closeIconTooltip","customFooter","maxHeight","LazyAppView","lazy","LazySecondaryBarView","LazyNewTaskBoardView","LazyEditTaskBoardView","AppView","Suspense","fallback","Spinner","SecondaryBarView","props","NewTaskBoardView","ProvidersWrapper","EditTaskBoardView","App","appNameLabel","addRoute","route","position","visible","primaryBar","secondaryBar","appView","addBoardView","component","registerActions","ACTION_TYPES","NEW","action","addBoard","url","disabled","primary","group","TASKS_APP_ID","Route","path","Priority","High","PriorityHighRounded","style","HIGH_PRIORITY","Low","LOW_PRIORITY","Medium","MEDIUM_PRIORITY","StyledText","styled","TextWithOptionalTooltip","withTooltip","children","rest","TextWithTooltip","DSText","withConfig","displayName","componentId","$width","$inline","$italic","$centered","$lineHeight","centered","italic","inline","lineHeight","dsProps","_extends","GRAPHQL_ENDPOINT","ROUTES","ALL_DAY_DATE_TIME_PICKER_DATE_FORMAT","TIME_SPECIFIC_DATE_TIME_PICKER_DATE_FORMAT","RANDOM_PLACEHOLDER_TIMEOUT","TASK_TITLE_MAX_LENGTH","TASK_DESCRIPTION_MAX_LENGTH","MAX_TASKS_LIMIT","CreateTaskDocument","kind","definitions","operation","name","variableDefinitions","variable","selectionSet","selections","arguments","typeCondition","TrashTaskDocument","UpdateTaskDocument","fields","GetTaskDocument","StyledWrapper","ThemeProvider","loadDefaultFont","typePolicies","Query","getTask","read","_existing","options","args","toReference","taskId","__typename","cache","InMemoryCache","possibleTypes","apolloClient","buildClient","httpLink","HttpLink","uri","credentials","ApolloClient","connectToDevTools","process","link","ApolloProvider","client","ModalManager","BACKGROUND_COLOR","BACKGROUND_HEADER_COLOR","PRIMARY_ICON_COLOR_ACTIVE","MEDIUM_PRIORITY_BG","HIGH_PRIORITY_BG","LOW_PRIORITY_BG","COMPLETED_PRIORITY_ICON","timestamp","fixedLocale","replaceAll","format","year","month","day","hour","minute","Intl","DateTimeFormat","e","RangeError","hyphenIndex","indexOf","substring","identity","arg","wait","collectedArgs","debouncedFn","debounce","returnValue","invokerFn","cancelFn","flush","flushFn"],"sourceRoot":""}